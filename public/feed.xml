<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gato GraphQL</title>
	<subtitle></subtitle>
	<link href="https://gatographql.com/feed.xml" rel="self"/>
	<link href="https://gatographql.com/"/>
	
	<updated>2024-02-15T00:00:00+00:00</updated>
	
	<id>https://gatographql.com</id>
	<author>
  <name>Gato GraphQL Team</name>
  <email>info@gatographql.com</email>
	</author>
	
  
  <entry>
    <title>
      🚀 Automate your WordPress tasks, with the new Gato GraphQL v2.1
      
    </title>
    <link href="https://gatographql.com/blog/automate-your-wordpress-tasks-using-graphql-persisted-queries-with-the-new-gatographql-v210/"/>
    <updated>2024-02-15T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/automate-your-wordpress-tasks-using-graphql-persisted-queries-with-the-new-gatographql-v210/</id>
    <content type="html"><![CDATA[
      <p>We are delighted to announce that Gato GraphQL <code>v2.1</code> has now been released!</p>
<p class="[ p-name text-center ]">
    <a class="[ button bigger rounded ]" href="https://downloads.wordpress.org/plugin/gatographql.latest-stable.zip" download>Download the latest <strong>Gato GraphQL</strong> release</a>
</p>
<p>With this new version, and the <a href="/bundles/all-in-one-toolbox-for-wordpress/">PRO extensions</a>, you can do <strong>GraphQL as Automator</strong>, leveraging GraphQL persisted queries to automate data-related tasks in your WordPress site.</p>
<p>Below are all the changes added to <code>v2.1</code> (a shorter version is available in the <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/2.1.0">Release notes in GitHub</a>).</p>
<h2>Support providing the Schema Configuration to apply when invoking the Internal GraphQL Server</h2>
<p>We can now specify what Schema Configuration to apply when executing a query via an internal GraphQL Server (i.e. directly within the PHP application, not via an endpoint).</p>
<p>This new feature enhances the <a href="/extensions/">Internal GraphQL Server</a> extension: It now accepts a <code>$schemaConfigurationIDOrSlug</code> parameter on methods <code>executeQuery</code> and <code>executeQueryInFile</code> from the <code>GraphQLServer</code> class, and already extracts the schema configuration used by the persisted query on <code>executePersistedQuery</code>:</p>
<pre class="language-diff"><code class="language-diff"><span class="highlight-line">class GraphQLServer {</span><br><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> <br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line"> public static function executeQuery(</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   string $query,</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   array $variables = [],</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   ?string $operationName = null,</span><br><span class="highlight-line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // Accept parameter </span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">   int|string|null $schemaConfigurationIDOrSlug = null,</span><br><span class="highlight-line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ): Response {</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   // ...</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line"> }</span><br></span></span><br><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> public static function executeQueryInFile(<br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   string $file,</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   array $variables = [],</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   ?string $operationName = null,</span><br><span class="highlight-line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // Accept parameter </span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">   int|string|null $schemaConfigurationIDOrSlug = null,</span><br><span class="highlight-line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ): Response {</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   // ...</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line"> }</span><br></span></span><br><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> public static function executePersistedQuery(<br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   string|int $persistedQueryIDOrSlug,</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   array $variables = [],</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   ?string $operationName = null,</span><br><span class="highlight-line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // Schema Configuration is taken directly from the Persisted Query</span><br><span class="highlight-line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ): Response {</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   // ...</span><br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line"> }</span></code></pre>
<h2>GraphQL as Automator [PRO]</h2>
<p>The feature above also provides the foundation for upgrading the <a href="/extensions/automation/">Automation</a> extension.</p>
<p>The <strong>Automation</strong> extension now provides an &quot;automator&quot; user interface (directly via the WordPress editor) called <a href="/extensions/automation/#heading-automation-configurator">Automation Configurator</a>. The automation trigger is any WordPress action hook, and the action is the execution of a GraphQL persisted query.</p>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/extensions/upstream-pro/automation-rule-editor.png" alt="Automation Rule editor" title="Automation Rule editor"></p>
</div>
<p>For instance, when creating a new post, automation rule <strong>Add comments block to new post</strong> (executing the <a href="/library/add-a-mandatory-comments-block-to-post/">persisted query with the same name</a>) checks if the <code>core/comments</code> block is present and, if not, it adds it at the bottom of the post:</p>
<div class="img-width-640" markdown=1>
<p><img src="/assets/extensions/upstream-pro/automation-rule-insert-mandatory-comments-block.gif" alt="Automatically inserting the comments block to new 'draft' posts" title="Automatically inserting the comments block to new 'draft' posts"></p>
</div>
<p>These are some ways you can use the automator:</p>
<ul>
<li>Create (and optimize) a featured image for new posts using AI</li>
<li>Add a mandatory block to the post when published</li>
<li>Replace <code>http</code> with <code>https</code> in all image sources and links when a post is updated</li>
<li>Send an email to the admin when there's a new post</li>
<li>Send an email to the user whose comment has a new response</li>
<li>[Multisite] Translate a new post to different languages, and add the translated posts to each site</li>
<li>Execute an action on an external service (eg: automatically share new posts on Facebook)</li>
</ul>
<p>As you can compose the GraphQL persisted queries and automation rules directly within the wp-admin, it takes no time to create a super-customized automation pipeline, tailored to your needs.</p>
<p>And as there are no constraints in the inputs (the GraphQL query can interact with all data in WordPress, and connect to any external service via an HTTP client), you should be able to satisfy 100% of your requirements.</p>
<p>(Automator plugins typically satisfy 95% of our needs, as we often find that some input that we need hasn't been mapped.)</p>
<p>Several automation rules are already created by the plugin (with status <code>draft</code>, so they must be updated to <code>publish</code> for them to take effect). You can already use them, and also check them out as examples to create your own automations (this list will be expanded on further releases):</p>
<ul>
<li>Add comments block to new post</li>
<li>Insert block in new post</li>
<li>Send notification email to admin when there is a new post</li>
<li>Generate a post's featured image using AI (and optimize it) if a new post has none</li>
</ul>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/extensions/upstream-pro/automation-rules.png" alt="Automation Rules" title="Automation Rules"></p>
</div>
<p class="[ p-name text-center ]">
    <a class="[ button bigger rounded alternate ]" href="https://app.instawp.io/launch?t=gatographql-demo&d=v2" target="_blank">Try it out in a <strong>testing site</strong>↗</a>
</p>
<h2>Predefined persisted query &quot;Insert block in post&quot;</h2>
<p>The newly-added persisted GraphQL query &quot;Insert block in post&quot; allows to inject a block in a post. It identifies the nth block of a given type (<code>wp:paragraph</code> by default) in a post, and places the provided custom block's HTML content right after it.</p>
<p>Used with the <a href="/extensions/automation/">Automation</a> extension, this persisted query can be used to automatically inject mandatory blocks to a newly-published post (eg: a CTA block to promote an ongoing campaign).</p>
<h2>Improvements</h2>
<ul>
<li>If initializing the service container from the cache fails, fallback to initializing PHP object from memory (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/2638">#2638</a>)</li>
<li>Give unique operationName to all predefined persisted queries (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/2644">#2644</a>)</li>
<li>Improved error message when fetching blocks from a post, and the block content has errors</li>
<li>Completed documentation for the Automation extension (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/2651">#2651</a>)</li>
<li>On the &quot;Generate a post's featured image using AI and optimize it&quot; predefined persisted query, execute logic only if the post title is not empty (<a href="https://github.com/GatoGraphQL/GatoGraphQL/commit/ec931dd">#ec931dd</a>)</li>
</ul>
<h2>Fixed</h2>
<ul>
<li>Bug in multi-control JS component used by extensions (Access Control, Cache Control, and Field Deprecation) showing &quot;undefined&quot; on the block on the Schema Configuration (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/2639">#2639</a>)</li>
<li>Bug in regex replacements in predefined persisted queries (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/2649">#2649</a>)</li>
<li>Avoid reinstalling plugin setup data if deactivating/reactivating the plugin (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/2641">#2641</a>)</li>
<li>Handle error from passing WP_Post as GraphQL variable to the Internal GraphQL Server (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/2652">#2652</a>)</li>
</ul>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🚀 Generate and optimize a post&#39;s featured image using AI, with the new Gato GraphQL v2
      
    </title>
    <link href="https://gatographql.com/blog/generate-and-optimize-a-post-featured-image-using-ai-with-the-new-gatographql-v2/"/>
    <updated>2024-01-29T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/generate-and-optimize-a-post-featured-image-using-ai-with-the-new-gatographql-v2/</id>
    <content type="html"><![CDATA[
      <p>We are delighted to announce that Gato GraphQL <code>v2.0</code> has now been released!</p>
<p class="[ p-name text-center ]">
    <a class="[ button bigger rounded ]" href="https://downloads.wordpress.org/plugin/gatographql.latest-stable.zip" download>Download the latest Gato GraphQL release</a>
</p>
<p>With this new version, and the <a href="/bundles/all-in-one-toolbox-for-wordpress/">PRO extensions</a>, you can use generative AI to create featured images for posts that do not have a thumbnail.</p>
<p>Below are the most important changes added to <code>v2.0</code> (to see all changes, head over to the <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/2.0.1">release notes in GitHub</a>).</p>
<h2>Added mutation <code>createMediaItem</code></h2>
<p>Mutation <code>createMediaItem</code> allows uploading files to the Media Library. It offers 2 ways to provide the source file:</p>
<ol>
<li>Via URL</li>
<li>Directly its contents</li>
</ol>
<p>Running this query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> CreateMediaItems <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">fromURL</span><span class="token punctuation">:</span> createMediaItem<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">source</span><span class="token punctuation">:</span> <span class="token string">"https://gatographql.com/assets/GatoGraphQL-logo.png"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token attr-name">caption</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">Gato GraphQL logo</span>"</span></span><br><span class="highlight-line">    <span class="token attr-name">altText</span><span class="token punctuation">:</span> <span class="token string">"This is the Gato GraphQL logo"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    mediaItemID</span><br><span class="highlight-line">    status</span><br><span class="highlight-line">    errors <span class="token punctuation">{</span></span><br><span class="highlight-line">      __typename</span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token keyword">on</span> <span class="token class-name">ErrorPayload</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        message</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    mediaItem <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token fragment function">MediaItemData</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">directlyByContents</span><span class="token punctuation">:</span> createMediaItem<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">contents</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br>        <span class="token attr-name">body</span><span class="token punctuation">:</span> <span class="token description string">"""<span class="token language-markdown"><br><span class="highlight-line">&lt;html></span><br><span class="highlight-line">  &lt;body></span><br><span class="highlight-line">    Hello world!</span><br><span class="highlight-line">  &lt;/body></span><br><span class="highlight-line">&lt;/html></span><br>        </span>"""</span><br><span class="highlight-line">        <span class="token attr-name">filename</span><span class="token punctuation">:</span> <span class="token string">"hello-world.html"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token string">"Hello world!"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    mediaItemID</span><br><span class="highlight-line">    status</span><br><span class="highlight-line">    errors <span class="token punctuation">{</span></span><br><span class="highlight-line">      __typename</span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token keyword">on</span> <span class="token class-name">ErrorPayload</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        message</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    mediaItem <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token fragment function">MediaItemData</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">fragment</span> <span class="token fragment function">MediaItemData</span> <span class="token keyword">on</span> <span class="token class-name">Media</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  altText</span><br><span class="highlight-line">  caption</span><br><span class="highlight-line">  mimeType</span><br><span class="highlight-line">  slug</span><br><span class="highlight-line">  src</span><br><span class="highlight-line">  title</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...will produce:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"fromURL"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"mediaItemID"</span><span class="token operator">:</span> <span class="token number">1380</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"SUCCESS"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"errors"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"mediaItem"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"altText"</span><span class="token operator">:</span> <span class="token string">"This is the Gato GraphQL logo"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">"Gato GraphQL logo"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"mimeType"</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token string">"gatographql-logo-png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"https://mysite.com/wp-content/uploads/GatoGraphQL-logo.png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"GatoGraphQL-logo.png"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"directlyByContents"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"mediaItemID"</span><span class="token operator">:</span> <span class="token number">1381</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"SUCCESS"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"errors"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"mediaItem"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"altText"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"mimeType"</span><span class="token operator">:</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token string">"hello-world-html"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"https://mysite.com/wp-content/uploads/hello-world.html"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Hello world!"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Added fields <code>myMediaItemCount</code>, <code>myMediaItems</code> and <code>myMediaItem</code></h2>
<p>Logged-in users can now retrieve all of their media files.</p>
<p>Running this query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> GetMediaItems <span class="token punctuation">{</span></span><br><span class="highlight-line">  me <span class="token punctuation">{</span></span><br><span class="highlight-line">    slug</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  myMediaItemCount</span><br><span class="highlight-line"></span><br><span class="highlight-line">  myMediaItems<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">3</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">MediaItemData</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  myMediaItem<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1380</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">MediaItemData</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">fragment</span> <span class="token fragment function">MediaItemData</span> <span class="token keyword">on</span> <span class="token class-name">Media</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  id</span><br><span class="highlight-line">  mimeType</span><br><span class="highlight-line">  src</span><br><span class="highlight-line">  author <span class="token punctuation">{</span></span><br><span class="highlight-line">    slug</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...will produce:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"me"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token string">"admin"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"myMediaItemCount"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"myMediaItems"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1380</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"mimeType"</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"https://mysite.com/wp-content/uploads/GatoGraphQL-logo.png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token string">"admin"</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1365</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"mimeType"</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"https://mysite.com/wp-content/uploads/browser.png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token string">"admin"</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"myMediaItem"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1380</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"mimeType"</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"https://mysite.com/wp-content/uploads/GatoGraphQL-logo.png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"author"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token string">"admin"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Added a predefined persisted query &quot;Generate a post's featured image using AI and optimize it&quot;</h2>
<p><em>(This functionality requires the <a href="/bundles/all-in-one-toolbox-for-wordpress/">PRO extensions</a>.)</em></p>
<p>A new predefined Persisted query, with title &quot;Generate a post's featured image using AI and optimize it&quot;, has been added.</p>
<p>It uses generative AI to produce images for posts without a featured image, using the post's title as the prompt. We can choose from these service providers:</p>
<ul>
<li><a href="https://openai.com/dall-e-3">OpenAI's DALL-E</a></li>
<li><a href="https://stablediffusionapi.com/">Stable Diffusion</a></li>
</ul>
<p>The query first checks if a post has a featured image. If it does not, it creates one by calling the generative AI service. We must provide the corresponding API key for the chosen service to use.</p>
<p>As the generative AI images are not optimized for the web (OpenAI's images could weigh 3MB!), the query also sends the newly-generated image to <a href="https://tinypng.com/">TinyPNG</a> to compress it. We must provide the API key to use this service.</p>
<p>Finally, the query creates a new media item with the image (using the post's title as the filename for the attachment, truncated to 20 chars), and sets it as the post's featured image.</p>
<p>This is the GraphQL query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> InitializeVariables<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$openAIAPIKey</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token variable">$stableDiffusionAPIKey</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token variable">$tinyPngAPIKey</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line"><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@configureWarningsOnExportingDuplicateVariable</span><span class="token punctuation">(</span><span class="token attr-name">enabled</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">isFeaturedImageMissing</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isFeaturedImageMissing"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">generatedImageURL</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> null<span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"generatedImageURL"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">isImageGenerated</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isImageGenerated"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">mimeType</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> null<span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"mimeType"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">isMediaItemCreated</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isMediaItemCreated"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">useOpenAI</span><span class="token punctuation">:</span> _notEmpty<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$openAIAPIKey</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"useOpenAI"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">useStableDiffusion</span><span class="token punctuation">:</span> _notEmpty<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$stableDiffusionAPIKey</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"useStableDiffusion"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">useTinyPng</span><span class="token punctuation">:</span> _notEmpty<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$tinyPngAPIKey</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"useTinyPng"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> ExportPostData<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$postId</span><span class="token punctuation">:</span> ID<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"InitializeVariables"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postId</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    hasFeaturedImage</span><br><span class="highlight-line">    <span class="token attr-name">isFeaturedImageMissing</span><span class="token punctuation">:</span> hasFeaturedImage</span><br><span class="highlight-line">      <span class="token directive function">@boolOpposite</span></span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isFeaturedImageMissing"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postTitle"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token attr-name">mediaItemFilename</span><span class="token punctuation">:</span> rawTitle</span><br><span class="highlight-line">      <span class="token directive function">@default</span><span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token string">"untitled"</span><span class="token punctuation">,</span> <span class="token attr-name">condition</span><span class="token punctuation">:</span> <span class="token constant">IS_EMPTY</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@strLowerCase</span></span><br><span class="highlight-line">      <span class="token directive function">@strSubstr</span><span class="token punctuation">(</span><span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token attr-name">length</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"filename"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@remove</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> MaybeGenerateImageUsingOpenAI<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$openAIAPIKey</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token variable">$imageSize</span><span class="token punctuation">:</span> String<span class="token operator">!</span> <span class="token operator">=</span> <span class="token string">"1024x1024"</span> <span class="token comment"># 256x256, 512x512, or 1024x1024 pixels</span></span><br><span class="highlight-line"><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportPostData"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isFeaturedImageMissing</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$useOpenAI</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">openAIResponse</span><span class="token punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://api.openai.com/v1/images/generations"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">options</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">auth</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token variable">$openAIAPIKey</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">json</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">prompt</span><span class="token punctuation">:</span> <span class="token variable">$postTitle</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">size</span><span class="token punctuation">:</span> <span class="token variable">$imageSize</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">n</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">response_format</span><span class="token punctuation">:</span> <span class="token string">"url"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@underJSONObjectProperty</span><span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"data"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@underArrayItem</span><span class="token punctuation">(</span><span class="token attr-name">index</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token directive function">@underJSONObjectProperty</span><span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"url"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">          <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"generatedImageURL"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">openAPIImageCaption</span><span class="token punctuation">:</span> _sprintf<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">string</span><span class="token punctuation">:</span> <span class="token string">"Image created by DALL-E using prompt: '%s'"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$postTitle</span><span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"imageCaption"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">openAIMediaItemFilename</span><span class="token punctuation">:</span> _sprintf<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">string</span><span class="token punctuation">:</span> <span class="token string">"%s.png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$filename</span><span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"filename"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> MaybeGenerateImageUsingStableDiffusion<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$stableDiffusionAPIKey</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token variable">$width</span><span class="token punctuation">:</span> Int<span class="token operator">!</span> <span class="token operator">=</span> <span class="token number">1024</span></span><br><span class="highlight-line">  <span class="token variable">$height</span><span class="token punctuation">:</span> Int<span class="token operator">!</span> <span class="token operator">=</span> <span class="token number">1024</span></span><br><span class="highlight-line"><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportPostData"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isFeaturedImageMissing</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$useStableDiffusion</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">stableDiffusionResponse</span><span class="token punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://stablediffusionapi.com/api/v3/text2img"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">options</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">json</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token variable">$stableDiffusionAPIKey</span></span><br><span class="highlight-line">        <span class="token attr-name">prompt</span><span class="token punctuation">:</span> <span class="token variable">$postTitle</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span></span><br><span class="highlight-line">        <span class="token attr-name">height</span><span class="token punctuation">:</span> <span class="token variable">$height</span></span><br><span class="highlight-line">        <span class="token attr-name">samples</span><span class="token punctuation">:</span> <span class="token number">1</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@underJSONObjectProperty</span><span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"output"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@underArrayItem</span><span class="token punctuation">(</span><span class="token attr-name">index</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"generatedImageURL"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">stableDiffusionImageCaption</span><span class="token punctuation">:</span> _sprintf<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">string</span><span class="token punctuation">:</span> <span class="token string">"Image created by Stable Diffusion using prompt: '%s'"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$postTitle</span><span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"imageCaption"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">stableDiffusionMediaItemFilename</span><span class="token punctuation">:</span> _sprintf<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">string</span><span class="token punctuation">:</span> <span class="token string">"%s.png"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$filename</span><span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"filename"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> CheckIsImageGenerated</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token string">"MaybeGenerateImageUsingOpenAI"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string">"MaybeGenerateImageUsingStableDiffusion"</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isFeaturedImageMissing</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">isImageGenerated</span><span class="token punctuation">:</span> _notEmpty<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$generatedImageURL</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isImageGenerated"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> MaybeCompressGeneratedImage<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$tinyPngAPIKey</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line"><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"CheckIsImageGenerated"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isImageGenerated</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$useTinyPng</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">compressedImageResponse</span><span class="token punctuation">:</span> _sendHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://api.tinify.com/shrink"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">options</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">auth</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token variable">$tinyPngAPIKey</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">headers</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"Content-Type"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">json</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">source</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token variable">$generatedImageURL</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    body</span><br><span class="highlight-line">      <span class="token directive function">@remove</span></span><br><span class="highlight-line">    <span class="token attr-name">bodyJSONObject</span><span class="token punctuation">:</span> _strDecodeJSONObject<span class="token punctuation">(</span><span class="token attr-name">string</span><span class="token punctuation">:</span> <span class="token variable">$__body</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token attr-name">mimeType</span><span class="token punctuation">:</span> _objectProperty<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">object</span><span class="token punctuation">:</span> <span class="token variable">$__bodyJSONObject</span></span><br><span class="highlight-line">      <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token string">"output.type"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"mimeType"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token attr-name">generatedImageURL</span><span class="token punctuation">:</span> header<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"Location"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"generatedImageURL"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">mutation</span> CreateMediaItemFromGeneratedImage</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"MaybeCompressGeneratedImage"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isImageGenerated</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  createMediaItem<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">source</span><span class="token punctuation">:</span> <span class="token variable">$generatedImageURL</span></span><br><span class="highlight-line">        <span class="token attr-name">filename</span><span class="token punctuation">:</span> <span class="token variable">$filename</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token variable">$postTitle</span></span><br><span class="highlight-line">    <span class="token attr-name">caption</span><span class="token punctuation">:</span> <span class="token variable">$imageCaption</span></span><br><span class="highlight-line">    <span class="token attr-name">altText</span><span class="token punctuation">:</span> <span class="token variable">$postTitle</span></span><br><span class="highlight-line">    <span class="token attr-name">mimeType</span><span class="token punctuation">:</span> <span class="token variable">$mimeType</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    mediaItemID</span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"mediaItemID"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token attr-name">isMediaItemCreated</span><span class="token punctuation">:</span> _notNull<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$__mediaItemID</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isMediaItemCreated"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@remove</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    status</span><br><span class="highlight-line">    errors <span class="token punctuation">{</span></span><br><span class="highlight-line">      __typename</span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token keyword">on</span> <span class="token class-name">ErrorPayload</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        message</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    mediaItem <span class="token punctuation">{</span></span><br><span class="highlight-line">      altText</span><br><span class="highlight-line">      caption</span><br><span class="highlight-line">      mimeType</span><br><span class="highlight-line">      slug</span><br><span class="highlight-line">      src</span><br><span class="highlight-line">      title</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">mutation</span> SetMediaItemAsPostFeaturedImage<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$postId</span><span class="token punctuation">:</span> ID<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"CreateMediaItemFromGeneratedImage"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isMediaItemCreated</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  setFeaturedImageOnCustomPost<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> <span class="token variable">$postId</span></span><br><span class="highlight-line">    <span class="token attr-name">mediaItemBy</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$mediaItemID</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    status</span><br><span class="highlight-line">    errors <span class="token punctuation">{</span></span><br><span class="highlight-line">      __typename</span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token keyword">on</span> <span class="token class-name">ErrorPayload</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        message</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    customPost <span class="token punctuation">{</span></span><br><span class="highlight-line">      __typename</span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token keyword">on</span> <span class="token class-name">CustomPost</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        featuredImage <span class="token punctuation">{</span></span><br><span class="highlight-line">          id</span><br><span class="highlight-line">          altText</span><br><span class="highlight-line">          caption</span><br><span class="highlight-line">          mimeType</span><br><span class="highlight-line">          slug</span><br><span class="highlight-line">          src</span><br><span class="highlight-line">          title</span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>[PRO] Added field <code>_dataMatrixOutputAsCSV</code> on the Helper Function Collection extension</h2>
<p><em>(This functionality was added to the <a href="/bundles/all-in-one-toolbox-for-wordpress/">PRO extensions</a>.)</em></p>
<p>Field <code>_dataMatrixOutputAsCSV</code> has been added to the Helper Function Collection extension (and all bundles containing this extension).</p>
<p>This field takes a matrix of data, and produces a CSV string. For instance, this query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token attr-name">csv</span><span class="token punctuation">:</span> _dataMatrixOutputAsCSV<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token attr-name">fields</span><span class="token punctuation">:</span> </span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Surname"</span><span class="token punctuation">,</span> <span class="token string">"Year"</span><span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token attr-name">data</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Pedro"</span><span class="token punctuation">,</span> <span class="token string">"Gonzales"</span><span class="token punctuation">,</span> <span class="token number">2012</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Manuel"</span><span class="token punctuation">,</span> <span class="token string">"Perez"</span><span class="token punctuation">,</span> <span class="token number">2008</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Jose"</span><span class="token punctuation">,</span> <span class="token string">"Pereyra"</span><span class="token punctuation">,</span> <span class="token number">1999</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Jacinto"</span><span class="token punctuation">,</span> <span class="token string">"Bloomberg"</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Jun-E"</span><span class="token punctuation">,</span> <span class="token string">"Song"</span><span class="token punctuation">,</span> <span class="token number">1983</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Juan David"</span><span class="token punctuation">,</span> <span class="token string">"Santamaria"</span><span class="token punctuation">,</span> <span class="token number">1943</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string">"Luis Miguel"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1966</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">)</span></span></code></pre>
<p>...will produce:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"csv"</span><span class="token operator">:</span> <span class="token string">"Name,Surname,Year\nJohn,Smith,2003\nPedro,Gonzales,2012\nManuel,Perez,2008\nJose,Pereyra,1999\nJacinto,Bloomberg,1998\nJun-E,Song,1983\nJuan David,Santamaria,1943\nLuis Miguel,,1966\n"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This functionality allow us to export data from our WordPress site into Google Sheets or others.</p>
<p>For instance, this query will fetch the data for 100 posts, and create a CSV file with it that is uploaded to the Media Library, with columns <code>ID</code>, <code>Title</code>, <code>Slug</code>, <code>Author name</code>, <code>Published date</code>, <code>URL</code>, and <code>Content</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> ExportPostData<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$limit</span><span class="token punctuation">:</span> Int<span class="token operator">!</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token variable">$offset</span><span class="token punctuation">:</span> Int<span class="token operator">!</span> <span class="token operator">=</span> <span class="token number">0</span></span><br><span class="highlight-line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  posts<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token variable">$limit</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token variable">$offset</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">sort</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">by</span><span class="token punctuation">:</span> ID<span class="token punctuation">,</span> <span class="token attr-name">order</span><span class="token punctuation">:</span> <span class="token constant">ASC</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postIds"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token constant">LIST</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    title <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postTitles"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token constant">LIST</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    slug <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postSlugs"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token constant">LIST</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    author <span class="token punctuation">{</span></span><br><span class="highlight-line">      name <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postAuthorNames"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token constant">LIST</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    dateStr<span class="token punctuation">(</span><span class="token attr-name">format</span><span class="token punctuation">:</span> <span class="token string">"d/m/Y"</span><span class="token punctuation">)</span> <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postPublishedDates"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token constant">LIST</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    url <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postUrls"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token constant">LIST</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    content <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"postContents"</span><span class="token punctuation">,</span> <span class="token attr-name">type</span><span class="token punctuation">:</span> <span class="token constant">LIST</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> CreateDataMatrix</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportPostData"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">csvDataMatrix</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$postIds</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@underEachArrayItem</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">passIndexOnwardsAs</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">key</span>"</span></span><br><span class="highlight-line">      <span class="token attr-name">passValueOnwardsAs</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">postId</span>"</span></span><br><span class="highlight-line">      <span class="token attr-name">affectDirectivesUnderPos</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"_arrayItem"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token variable">$postTitles</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">position</span><span class="token punctuation">:</span> <span class="token variable">$key</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"postTitle"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"_arrayItem"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token variable">$postSlugs</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">position</span><span class="token punctuation">:</span> <span class="token variable">$key</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"postSlug"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"_arrayItem"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token variable">$postAuthorNames</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">position</span><span class="token punctuation">:</span> <span class="token variable">$key</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"postAuthorName"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"_arrayItem"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token variable">$postPublishedDates</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">position</span><span class="token punctuation">:</span> <span class="token variable">$key</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"postPublishedDate"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"_arrayItem"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token variable">$postUrls</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">position</span><span class="token punctuation">:</span> <span class="token variable">$key</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"postUrl"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"_arrayItem"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token variable">$postContents</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">position</span><span class="token punctuation">:</span> <span class="token variable">$key</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"postContent"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"_echo"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">            <span class="token variable">$postId</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token variable">$postTitle</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token variable">$postSlug</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token variable">$postAuthorName</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token variable">$postPublishedDate</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token variable">$postUrl</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token variable">$postContent</span></span><br><span class="highlight-line">          <span class="token punctuation">]</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">setResultInResponse</span><span class="token punctuation">:</span> <span class="token boolean">true</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"csvDataMatrix"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> OutputCSV</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"CreateDataMatrix"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">csvString</span><span class="token punctuation">:</span> _dataMatrixOutputAsCSV<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">fields</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string">"ID"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Title"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Slug"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Author name"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Published date"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"URL"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Content"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token attr-name">data</span><span class="token punctuation">:</span> <span class="token variable">$csvDataMatrix</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"csvString"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">mutation</span> CreateMediaItem</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"OutputCSV"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  createMediaItem<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">contents</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">body</span><span class="token punctuation">:</span> <span class="token variable">$csvString</span></span><br><span class="highlight-line">        <span class="token attr-name">filename</span><span class="token punctuation">:</span> <span class="token string">"posts.csv"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token string">"Post data as CSV"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    mediaItemID</span><br><span class="highlight-line">    status</span><br><span class="highlight-line">    errors <span class="token punctuation">{</span></span><br><span class="highlight-line">      __typename</span><br><span class="highlight-line">      <span class="token operator">...</span><span class="token keyword">on</span> <span class="token class-name">ErrorPayload</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        message</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    mediaItem <span class="token punctuation">{</span></span><br><span class="highlight-line">      mimeType</span><br><span class="highlight-line">      slug</span><br><span class="highlight-line">      src</span><br><span class="highlight-line">      title</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Preparing for <code>v3.0</code></h2>
<p>We hope that you enjoy the new features in this latest release.</p>
<p>Is there any new feature you'd like Gato GraphQL to have next? <a href="/contact/">Send us a message</a> and let us know.</p>
<p>Enjoy!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🥳 Gato GraphQL has been (finally) released in the WordPress plugin directory
      
    </title>
    <link href="https://gatographql.com/blog/gatographql-is-finally-released-on-the-wordpress-plugin-directory/"/>
    <updated>2024-01-09T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/gatographql-is-finally-released-on-the-wordpress-plugin-directory/</id>
    <content type="html"><![CDATA[
      <p>We are delighted to announce that Gato GraphQL is now available via the WordPress plugin directory!</p>
<p><strong>👉🏽 <a href="https://wordpress.org/plugins/gatographql/">wordpress.org/plugins/gatographql</a></strong></p>
<div class="img-width-1024" markdown=1>
<a href="https://wordpress.org/plugins/gatographql/" target="_blank">
<p><img src="/images/gatographql-on-wordpress-plugin-directory.png" alt="Gato GraphQL on the WordPress plugin directory" title="Gato GraphQL on the WordPress plugin directory"></p>
</a>
</div>
<p>Yay! 🎉🥳🙌🎈🥂</p>
<h2>Let's celebrate with a discount</h2>
<p>To celebrate the launch, the first 10 customers that purchase any bundle or extension can do so with an incredible deal:</p>
<div class="highlight" markdown=1>
<p><strong>30% off any bundle or extension, using code <code>GATOLAUNCH30</code></strong></p>
<br/>
<p>This is a Lifetime Deal! Purchase now, and obtain the discount forever.</p>
<br/>
<p><em>(Limited to the first 10 customers)</em></p>
</div>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      💪 Gato GraphQL v1.4 is out + 7 new bundles + lower prices
      
    </title>
    <link href="https://gatographql.com/blog/gatographql-v14-is-out-plus-7-new-bundles-plus-lower-prices/"/>
    <updated>2024-01-05T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/gatographql-v14-is-out-plus-7-new-bundles-plus-lower-prices/</id>
    <content type="html"><![CDATA[
      <p>Gato GraphQL v1.4 has been released! 🎉</p>
<p class="[ p-name text-center ]">
    <a class="[ button bigger rounded ]" href="/releases/latest/" download>👉 Download the latest version of <strong>Gato GraphQL</strong></a>
</p>
<p>This version:</p>
<ul>
<li>Supports passing headers in the GraphiQL client</li>
<li>Installs a predefined custom endpoint for duplicating posts in bulk (and executing similar operations)</li>
<li>Renames the &quot;Recipes&quot; section to &quot;Tutorial&quot;</li>
<li>Fixes several minor bugs</li>
</ul>
<p>Find the description of all the changes in the <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/1.4.0">release notes in GitHub</a>.</p>
<h2>7 new bundles</h2>
<p>Gato GraphQL can be augmented via <a href="/extensions/">extensions</a>, which are offered in <a href="/bundles/">bundles</a> satisfying common use cases (providing a better value for money over purchasing the extensions individually).</p>
<p>We received feedback that, for several simple use cases, the bundles contained too many extensions, making them more expensive than they could be.</p>
<p>For instance, to <a href="/library/replace-the-old-domain-with-a-new-domain-in-all-posts/">replace the old domain with a new domain in all posts</a>, we had to get the “Application Glue &amp; Automator” Bundle, which was priced at u$d 119 for 1 domain.</p>
<p>Hence, we decided to create several new bundles, which are tailored to ever-more specific use cases:</p>
<div class="table-wrapper" markdown=1>
<table>
<thead>
<tr>
<th>New bundle</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/bundles/automated-content-translation-and-sync-for-wordpress-multisite/">“Automated Content Translation &amp; Sync for WordPress Multisite” Bundle</a></td>
<td>Automatically create a translation of a newly-published post using the Google Translate API, for every language site on a WordPress multisite.</td>
</tr>
<tr>
<td><a href="/bundles/better-wordpress-webhooks/">“Better WordPress Webhooks” Bundle</a></td>
<td>Easily create webhooks to process incoming data from any source or service using advanced tools, directly within the wp-admin.</td>
</tr>
<tr>
<td><a href="/bundles/easy-wordpress-bulk-transform-and-update/">“Easy WordPress Bulk Transform &amp; Update” Bundle</a></td>
<td>Transform hundreds of posts with a single operation (replacing strings, adding blocks, adding a thumbnail, and more), and store them again on the DB.</td>
</tr>
<tr>
<td><a href="/bundles/private-graphql-server-for-wordpress/">“Private GraphQL Server for WordPress” Bundle</a></td>
<td>Use GraphQL to power your application (blocks, themes and plugins), internally fetching data without exposing a public endpoint.</td>
</tr>
<tr>
<td><a href="/bundles/selective-content-import-export-and-sync-for-wordpress/">“Selective Content Import, Export &amp; Sync for WordPress” Bundle</a></td>
<td>Import hundreds of records into your WordPress site from another site or service (such as Google Sheets), and selectively export entries to another site.</td>
</tr>
<tr>
<td><a href="/bundles/unhindered-wordpress-email-notifications/">“Unhindered WordPress Email Notifications” Bundle</a></td>
<td>Send personalized emails to all your users, and notifications to the admin, without constraints on what data can be added to the email.</td>
</tr>
<tr>
<td><a href="/bundles/versatile-wordpress-request-api/">“Versatile WordPress Request API” Bundle</a></td>
<td>Interact with any external API and cloud service, posting and fetching data to/from them.</td>
</tr>
</tbody>
</table>
</div>
<p>Now, to replace the old domain with a new domain in all posts, we can get the “Easy WordPress Bulk Transform &amp; Update” Bundle, which is priced at u$d 59 for 1 domain.</p>
<p>To keep the naming for all bundles consistent, we also renamed all already-existing bundles:</p>
<ul>
<li><a href="/bundles/all-in-one-toolbox-for-wordpress/">“All in One Toolbox for WordPress” Bundle</a> (from “All Extensions” Bundle)</li>
<li><a href="/bundles/responsible-wordpress-public-api/">“Responsible WordPress Public API” Bundle</a> (from “Public API” Bundle)</li>
<li><a href="/bundles/simplest-wordpress-content-translation/">“Simplest WordPress Content Translation” Bundle</a> (from “Content Translation” Bundle)</li>
<li><a href="/bundles/tailored-wordpress-automator/">“Tailored WordPress Automator” Bundle</a> (from “Application Glue &amp; Automator” Bundle)</li>
</ul>
<h2>Reduced the price for all existing bundles</h2>
<p>In addition to creating more-specific bundles, we have also reduced the prices for all existing bundles!</p>
<p>For instance, the <a href="/bundles/all-in-one-toolbox-for-wordpress/">“All in One Toolbox for WordPress” Bundle</a> is now priced at u$d 129 for 1 domain (it was u$d 149).</p>
<p><a href="/pricing/">Check the new pricing for all bundles</a>.</p>
<h2>Install extensions and bundles in more domains</h2>
<p>Finally, the licenses for the “Professional” and “Agency” tiers now permit <a href="/pricing/">installing your purchased bundles and extensions on more domains</a>:</p>
<ul>
<li>“Professional”: 10 domains (it was 5)</li>
<li>“Agency”: 50 domains (it was 25)</li>
</ul>
<h2>Your feedback is welcome</h2>
<p>Your feedback is very important to us. We listen to our customers, and (as much as we can) act on their suggestions.</p>
<p>If you have any comment (concerning any of these news, or anything else), please don't hesitate to <a href="/contact/">contact us</a>.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🚀 Released Gato GraphQL v1.2 (with new Persisted Queries)
      
    </title>
    <link href="https://gatographql.com/blog/released-gatographql-v12-with-new-persisted-queries/"/>
    <updated>2023-11-28T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/released-gatographql-v12-with-new-persisted-queries/</id>
    <content type="html"><![CDATA[
      <p>Version <code>1.2</code> of Gato GraphQL has been released! 🎉</p>
<p class="[ p-name text-center ]">
    <a class="[ button bigger rounded ]" href="/releases/latest" download>👉 Download the latest version of <strong>Gato GraphQL</strong></a>
</p>
<p>Here's a description of all the changes.</p>
<h2>Added several predefined Persisted Queries</h2>
<p>The following Persisted Queries, to execute common admin tasks, are now provided:</p>
<h3>Translate content from URL</h3>
<p>Given a URL as input, its language, and what language to translate it to, this query fetches the content from the URL and performs the translation using Google Translate:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> TranslateContent<span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token variable">$url</span><span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token variable">$fromLang</span><span class="token punctuation">:</span> String<span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token variable">$toLang</span><span class="token punctuation">:</span> String<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  _sendHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token variable">$url</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">GET</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    body</span><br><span class="highlight-line">    <span class="token attr-name">translated</span><span class="token punctuation">:</span> body <span class="token directive function">@strTranslate</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token variable">$fromLang</span></span><br><span class="highlight-line">      <span class="token attr-name">to</span><span class="token punctuation">:</span> <span class="token variable">$toLang</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>For instance, passing the <a href="https://raw.githubusercontent.com/GatoGraphQL/GatoGraphQL/c870d8906ae1aec3c81acc039c53acc7aab5dff0/layers/GatoGraphQLForWP/plugins/gatographql/docs/modules/single-endpoint/en.md">URL of some Markdown file in a GitHub repo</a>, and language code <code>&quot;es&quot;</code>:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://raw.githubusercontent.com/GatoGraphQL/GatoGraphQL/c870d8906ae1aec3c81acc039c53acc7aab5dff0/layers/GatoGraphQLForWP/plugins/gatographql/docs/modules/single-endpoint/en.md"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"fromLang"</span><span class="token operator">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"toLang"</span><span class="token operator">:</span> <span class="token string">"es"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...will translate the Markdown content to Spanish:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"_sendHTTPRequest"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"# Single Endpoint\n\nExecute queries against the GraphQL server through the public single endpoint.\n\nBy default the endpoint is `/graphql/`, and the path can be configured through the Settings.\n\n![Single endpoint in Settings](/assets/guides/upstream/settings-single-endpoint.png \"Single endpoint in Settings\")\n\nThe GraphQL single endpoint can be configured by assigning a Schema Configuration to it. To do this, on section \"Schema Configuration\" select the desired entry from the dropdown for \"Schema Configuration for the Single Endpoint\":\n\n&lt;div class=\"img-width-1024\" markdown=1>\n\n![Settings for the Schema Configuration for the Single Endpoint](/assets/guides/upstream/settings-schema-configuration-for-single-endpoint.png)\n\n&lt;/div>\n\n## Clients\n\nInteract with the single endpoint via the available clients.\n\n### GraphiQL\n\nIf module \"GraphiQL for Single Endpoint\" is enabled, then the single endpoint's GraphiQL client becomes publicly available.\n\nTo open it, click on link \"🟢 GraphiQL (public)\" on the plugin's menu:\n\n&lt;div class=\"img-width-1024\" markdown=1>\n\n![Single endpoint's link to the GraphiQL client](/assets/guides/upstream/single-endpoint-graphiql-link.png)\n\n&lt;/div>\n\nBy default, the client is exposed under `/graphiql/`. This path can be modified on the Settings, under tab \"GraphiQL for Single Endpoint\":\n\n&lt;div class=\"img-width-1024\" markdown=1>\n\n![Path to GraphiQL client](/assets/guides/upstream/settings-graphiql-for-single-endpoint.png)\n\n&lt;/div>\n\n### Interactive Schema (Voyager)\n\nIf module \"Interactive Schema for Single Endpoint\" is enabled, then the single endpoint's Voyager client becomes publicly available.\n\nTo open it, click on link \"🟢 Schema (public)\" on the plugin's menu:\n\n&lt;div class=\"img-width-1024\" markdown=1>\n\n![Single endpoint's link to the Interactive Schema client](/assets/guides/upstream/single-endpoint-interactive-schema-link.png)\n\n&lt;/div>\n\nBy default, the client is exposed under `/schema/`. This path can be modified on the Settings, under tab \"Interactive Schema for Single Endpoint\":\n\n&lt;div class=\"img-width-1024\" markdown=1>\n\n![Path to Voyager client](/assets/guides/upstream/settings-interactive-schema-for-single-endpoint.png)\n\n&lt;/div>\n"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"translated"</span><span class="token operator">:</span> <span class="token string">"# Punto final único\n\nEjecute consultas en el servidor GraphQL a través del punto final único público.\n\nDe forma predeterminada, el punto final es `/graphql/` y la ruta se puede configurar a través de Configuración.\n\n![Punto final único en Configuración](/assets/guides/upstream/settings-single-endpoint.png \"Punto final único en Configuración\")\n\nEl punto final único GraphQL se puede configurar asignándole una configuración de esquema. Para hacer esto, en la sección \"Configuración del esquema\", seleccione la entrada deseada del menú desplegable para \"Configuración del esquema para el punto final único\":\n\n&lt;div class=\"img-width-1024\" descuento=1>\n\n![Configuración del esquema para el punto final único](/assets/guides/upstream/settings-schema-configuration-for-single-endpoint.png)\n\n&lt;/div>\n\n## Clientes\n\nInteractúe con el punto final único a través de los clientes disponibles.\n\n### GrafiQL\n\nSi el módulo \"GraphiQL para punto final único\" está habilitado, el cliente GraphiQL del punto final único estará disponible públicamente.\n\nPara abrirlo, haga clic en el enlace \"🟢 GraphiQL (público)\" en el menú del complemento:\n\n&lt;div class=\"img-width-1024\" descuento=1>\n\n![Enlace del punto final único al cliente GraphiQL](/assets/guides/upstream/single-endpoint-graphiql-link.png)\n\n&lt;/div>\n\nDe forma predeterminada, el cliente está expuesto en `/graphiql/`. Esta ruta se puede modificar en Configuración, en la pestaña \"GraphiQL para punto final único\":\n\n&lt;div class=\"img-width-1024\" descuento=1>\n\n![Ruta al cliente GraphiQL](/assets/guides/upstream/settings-graphiql-for-single-endpoint.png)\n\n&lt;/div>\n\n### Esquema interactivo (Voyager)\n\nSi el módulo \"Esquema interactivo para punto final único\" está habilitado, el cliente Voyager del punto final único estará disponible públicamente.\n\nPara abrirlo, haga clic en el enlace \"🟢 Esquema (público)\" en el menú del complemento:\n\n&lt;div class=\"img-width-1024\" descuento=1>\n\n![Enlace del punto final único al cliente de esquema interactivo](/assets/guides/upstream/single-endpoint-interactive-schema-link.png)\n\n&lt;/div>\n\nDe forma predeterminada, el cliente está expuesto en `/schema/`. Esta ruta se puede modificar en Configuración, en la pestaña \"Esquema interactivo para punto final único\":\n\n&lt;div class=\"img-width-1024\" descuento=1>\n\n![Ruta al cliente Voyager](/assets/guides/upstream/settings-interactive-schema-for-single-endpoint.png)\n\n&lt;/div>\n"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It has been added to the Recipes section too, under &quot;Translating content from URL&quot;.</p>
<h3>Translate post (Classic editor), and Translate posts (Classic editor)</h3>
<p>There already were persisted queries &quot;Translate post&quot; and &quot;Translate posts&quot; (in bulk), which deal with translating all the properties inside the Gutenberg blocks in the post.</p>
<p>These have been duly renamed as &quot;Translate post (Gutenberg)&quot; and &quot;Translate posts (Gutenberg)&quot;, and new persisted queries have been added to translate content for the Classic editor:</p>
<ul>
<li><strong>Translate post (Classic editor)</strong>: Translate a single post</li>
<li><strong>Translate posts (Classic editor)</strong>: Translate multiple posts, in bulk</li>
</ul>
<p>All these queries translate content by calling the Google Translate API, sending all the data within a single request.</p>
<p>Then, if using query &quot;Translate posts (Classic editor)&quot; to translate 5 posts, all data (title, content and excerpt) for all 5 posts is sent all together, providing a rich context that produces a greater accuracy in the translation.</p>
<p>For instance, after translating this post from English to Chinese:</p>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/guides/upstream/releases/v1.2/post-before-translation.png" alt="Post in English" title="Post in English"></p>
</div>
<p>...it became this:</p>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/guides/upstream/releases/v1.2/post-after-translation.png" alt="Post translated to Chinese" title="Post translated to Chinese"></p>
</div>
<h3>Import post from WordPress RSS feed</h3>
<p>Point to the WordPress RSS feed for a post, and create a new post with its data.</p>
<p>For instance, the query will parse the following RSS feed for a single post (normally accessible under <code>https://mysite.com/post-slug/feed/rss/?withoutcomments=1</code>):</p>
<pre class="language-xml"><code class="language-xml"><span class="highlight-line"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rss</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span><br><span class="highlight-line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://purl.org/rss/1.0/modules/content/<span class="token punctuation">"</span></span></span><br><span class="highlight-line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>wfw</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://wellformedweb.org/CommentAPI/<span class="token punctuation">"</span></span></span><br><span class="highlight-line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>dc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://purl.org/dc/elements/1.1/<span class="token punctuation">"</span></span></span><br><span class="highlight-line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>atom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2005/Atom<span class="token punctuation">"</span></span></span><br><span class="highlight-line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>sy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://purl.org/rss/1.0/modules/syndication/<span class="token punctuation">"</span></span></span><br><span class="highlight-line">  <span class="token attr-name"><span class="token namespace">xmlns:</span>slash</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://purl.org/rss/1.0/modules/slash/<span class="token punctuation">"</span></span></span><br><span class="token punctuation">></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>channel</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>A tale of two cities <span class="token entity" title="&#8211;">&amp;#8211;</span> teaser <span class="token entity" title="&#8211;">&amp;#8211;</span> PoP API Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">atom:</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://mysite.com/blogroll/a-tale-of-two-cities-teaser/feed/?withoutcomments=1<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>self<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>https://mysite.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Just another WordPress site<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lastBuildDate</span><span class="token punctuation">></span></span>Tue, 20 Jul 2021 23:03:59 +0000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lastBuildDate</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>language</span><span class="token punctuation">></span></span>en-US<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>language</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sy:</span>updatePeriod</span><span class="token punctuation">></span></span>hourly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sy:</span>updatePeriod</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sy:</span>updateFrequency</span><span class="token punctuation">></span></span>1	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sy:</span>updateFrequency</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generator</span><span class="token punctuation">></span></span>https://wordpress.org/?v=6.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generator</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>A tale of two cities <span class="token entity" title="&#8211;">&amp;#8211;</span> teaser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>https://mysite.com/blogroll/a-tale-of-two-cities-teaser/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>link</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comments</span><span class="token punctuation">></span></span>https://mysite.com/blogroll/a-tale-of-two-cities-teaser/#comments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comments</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dc:</span>creator</span><span class="token punctuation">></span></span>leo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dc:</span>creator</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pubDate</span><span class="token punctuation">></span></span>Mon, 21 Dec 2020 08:24:18 +0000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pubDate</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span><span class="token punctuation">></span></span>Blogroll<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span><span class="token punctuation">></span></span>championship<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span><span class="token punctuation">></span></span>book<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>category</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>guid</span> <span class="token attr-name">isPermaLink</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://mysite.com/?p=1657<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>guid</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">content:</span>encoded</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way—in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">content:</span>encoded</span><span class="token punctuation">></span></span>          </span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wfw:</span>commentRss</span><span class="token punctuation">></span></span>https://mysite.com/blogroll/a-tale-of-two-cities-teaser/feed/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">wfw:</span>commentRss</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">slash:</span>comments</span><span class="token punctuation">></span></span>45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">slash:</span>comments</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span></span><br><span class="highlight-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>channel</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rss</span><span class="token punctuation">></span></span></span></code></pre>
<h3>Import posts from CSV</h3>
<p>Provide a CSV to creates posts with the corresponding data for each entry (the title, excerpt, content, and author).</p>
<p>For instance, the CSV below will create 3 posts:</p>
<pre><code>Title,Excerpt,Content,Author
Multi-channelled optimal interface,Inventore iste velit et expedita ipsa dolor,&quot;&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Inventore iste velit et expedita ipsa dolor. Optio suscipit qui id harum corporis dignissimos.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;&quot;,admin
Ergonomic motivating parallelism,Consequuntur velit quasi assumenda,&quot;&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Consequuntur velit quasi assumenda. Eum non saepe est. Ut dolorem harum eveniet eaque nemo impedit. Voluptatem commodi modi sed sed animi voluptatem.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;
&lt;!-- wp:image {&quot;&quot;id&quot;&quot;:5,&quot;&quot;sizeSlug&quot;&quot;:&quot;&quot;large&quot;&quot;} --&gt;
&lt;figure class=&quot;&quot;wp-block-image size-large&quot;&quot;&gt;&lt;img src=&quot;&quot;https://mysite.com/wp-content/uploads/2023/09/wordpress0.jpg&quot;&quot; alt=&quot;&quot;&quot;&quot; class=&quot;&quot;wp-image-5&quot;&quot;/&gt;&lt;/figure&gt;
&lt;!-- /wp:image --&gt;
&lt;!-- wp:image {&quot;&quot;id&quot;&quot;:7,&quot;&quot;sizeSlug&quot;&quot;:&quot;&quot;large&quot;&quot;} --&gt;
&lt;figure class=&quot;&quot;wp-block-image size-large&quot;&quot;&gt;&lt;img src=&quot;&quot;https://mysite.com/wp-content/uploads/2023/09/wordpress2.jpg&quot;&quot; alt=&quot;&quot;&quot;&quot; class=&quot;&quot;wp-image-7&quot;&quot;/&gt;&lt;/figure&gt;
&lt;!-- /wp:image --&gt;&quot;,admin
Down-sized solution-oriented securedline,Ipsam minima qui asperiores dolorum unde voluptas quia voluptate,&quot;&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Ipsam minima qui asperiores dolorum unde voluptas quia voluptate. Incidunt omnis cumque beatae quo deleniti ex. Praesentium nihil et consectetur neque commodi tempora ipsa adipisci. Praesentium perferendis sint est.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;
&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Et aut fuga aliquam consequuntur dolore sunt ut ut. Quibusdam in voluptas vitae quia eaque. Eligendi dolorum dolorem vitae et vitae et ut.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;&quot;,admin
</code></pre>
<p>After executing the query, we get the results:</p>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/guides/upstream/releases/v1.2/import-posts-from-csv.png" alt="Created posts from CSV" title="Created posts from CSV"></p>
</div>
<h3>Fetch post links</h3>
<p>Find all links in all posts (by searching for all <code>&lt;a href=&quot;(...)&quot;&gt;(...)&lt;/a&gt;</code> strings), and list them down in the response as a JSON object, with properties <code>{ href: (...), text: (...) }</code>.</p>
<p>For instance, it may produce this response:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"posts"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1435</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Citations from famous authors"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"links"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">          <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"https://www.azquotes.com/author/4085-Fyodor_Dostoevsky"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Quote by Fyodor Dostoevsky"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"https://www.azquotes.com/author/14706-Leo_Tolstoy"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Quote by Leon Tolstoi"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"https://www.azquotes.com/author/15138-Voltaire"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"Quote by Voltaire"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">]</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Hello world!"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"links"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Added <code>XML</code> scalar type</h2>
<p>We can now input XML strings via the new <code>XML</code> scalar type, which will validate the correctness of the XML string.</p>
<p>For instance, this query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br>  _strDecodeXMLAsJSON<span class="token punctuation">(</span><span class="token attr-name">xml</span><span class="token punctuation">:</span> <span class="token string">"""&lt;?xml version="1.0" encoding="UTF-8"?><br><span class="highlight-line">  &lt;body></span><br><span class="highlight-line">    &lt;message>Hello world!&lt;/message></span><br><span class="highlight-line">  &lt;/body></span><br>  """</span><span class="token punctuation">)</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...will produce:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"_strDecodeXMLAsJSON"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"Hello world!"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Whereas this query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br>  _strDecodeXMLAsJSON<span class="token punctuation">(</span><span class="token attr-name">xml</span><span class="token punctuation">:</span> <span class="token string">"""&lt;?xml version="1.0" encoding="UTF-8"?><br><span class="highlight-line">  &lt;body></span><br><span class="highlight-line">    &lt;message>Hello world!&lt;/message></span><br>  """</span><span class="token punctuation">)</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...will produce:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"errors"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"Cannot cast value '&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  &lt;body>\n  &lt;message>Hello world!&lt;\/message>\n  ' for type 'XML'"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"locations"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"column"</span><span class="token operator">:</span> <span class="token number">31</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"extensions"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"_strDecodeXMLAsJSON(xml: \"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  &lt;body>\n  &lt;message>Hello world!&lt;\/message>\n  \")"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"problems"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">          <span class="token string">"Premature end of data in tag body line 2\n"</span></span><br><span class="highlight-line">        <span class="token punctuation">]</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"_strDecodeXMLAsJSON"</span><span class="token operator">:</span> <span class="token null keyword">null</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Improved documentation</h2>
<ul>
<li>Added documentation for new fields from the <a href="/extensions/helper-function-collection/">Helper Function Collection</a> extension:
<ul>
<li><code>_strDecodeXMLAsJSON</code></li>
<li><code>_strParseCSV</code></li>
</ul>
</li>
</ul>
<h2>Fixed</h2>
<ul>
<li>In predefined persisted queries &quot;Translate post&quot; and &quot;Translate posts&quot;, added <code>failIfNonExistingKeyOrPath: false</code> when selecting a block's <code>attributes.{something}</code> property (as it may sometimes not be defined)</li>
<li>In predefined persisted query &quot;Import post from WordPress site&quot;, added status <code>any</code> to select the post</li>
<li>Renamed persisted query &quot;Translate post&quot; to &quot;Translate post (Gutenberg)&quot;, and &quot;Translate posts&quot; to &quot;Translate posts (Gutenberg)&quot;</li>
</ul>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🚀 Released Gato GraphQL v1.1 (with predefined Persisted Queries)
      
    </title>
    <link href="https://gatographql.com/blog/released-gatographql-v11-with-predefined-persisted-queries/"/>
    <updated>2023-11-22T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/released-gatographql-v11-with-predefined-persisted-queries/</id>
    <content type="html"><![CDATA[
      <p>Version <code>1.1</code> of Gato GraphQL has been released! 🎉</p>
<p class="[ p-name text-center ]">
    <a class="[ button bigger rounded ]" href="/releases/latest" download>👉 Download the latest version of <strong>Gato GraphQL</strong></a>
</p>
<p>Explore all the new features in the <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/1.1.1">release notes in GitHub</a>. Below is the summary with the most important features.</p>
<h2>Predefined Persisted Queries</h2>
<p>Version <code>1.1</code> adds predefined Persisted Queries to tackle a number of common admin tasks, including:</p>
<ul>
<li>Duplicate posts</li>
<li>Replace strings in posts</li>
<li>Replace and old domain with a new domain in posts</li>
<li>Insert a block in posts</li>
<li>Remove a block from posts</li>
<li>Translate posts</li>
<li>Import a post from another WordPress site</li>
<li>Export a post into another WordPress site</li>
<li>Many more</li>
</ul>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/guides/downstream/predefined-persisted-queries.png" alt="Predefined Persisted Queries" title="Predefined Persisted Queries"></p>
</div>
<p>These Persisted Queries are all published as <code>private</code>, so they are not publicly exposed. These can be executed from within the wp-admin, by a logged-in user with the corresponding capability.</p>
<p>(An additional Persisted Query, to provide as webhook to InstaWP to process newsletter registrations, was added with status <code>draft</code>, so it's also not publicly exposed.)</p>
<p>Every Persisted Query contains the GraphQL query to execute for that task, documentation on what inputs must be provided, and a notice of which extensions are required (if any):</p>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/guides/downstream/predefined-persisted-query-editor.png" alt="Persisted Query in the Editor" title="Persisted Query in the Editor"></p>
</div>
<p>In addition, if the Persisted Query requires some specific configuration (such as &quot;nested mutations&quot;), a corresponding Schema Configuration is also created and defined accordingly.</p>
<p>You can execute the Persisted Query either:</p>
<ul>
<li>Straight from the GraphiQL client, passing the inputs as variables</li>
<li>Invoking the Persisted Query's URL in the browser, passing the inputs as URL params</li>
</ul>
<p><em>Explore the list of all the predefined Persisted Queries in the <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/1.1.1">release notes</a>.</em></p>
<h3>How are predefined Persisted Queries useful?</h3>
<p>The addition of predefined Persisted Queries makes it easier for admins to execute and automate tasks on their sites.</p>
<p>Do you need to translate a post into any language? Execute the Persisted Query &quot;Translate post&quot;, passing the language and post ID as URL params.</p>
<p>Do you need to synchronize content across sites? Execute Persisted Query &quot;Export a post into another WordPress site&quot;, passing the post slug to sync, and the destination site's endpoint URL, as params.</p>
<p>And so on. <strong>It's like executing WP-CLI commands, but using GraphQL queries instead</strong>, which are composed, stored and executed already within the wp-admin.</p>
<p>We plan to keep adding more predefined Persisted Queries in future releases.</p>
<p class="[ p-name text-center ]">
    <a class="[ button bigger rounded ]" href="/releases/latest" download>👉 Download the latest version of <strong>Gato GraphQL</strong></a>
</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      ♻️ Maximizing the PHP compatibility for WordPress 6.4 and the plugin directory
      
    </title>
    <link href="https://gatographql.com/blog/maximizing-php-compatibility-for-wordpress-6.4-and-plugin-directory/"/>
    <updated>2023-11-08T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/maximizing-php-compatibility-for-wordpress-6.4-and-plugin-directory/</id>
    <content type="html"><![CDATA[
      <p><a href="https://wordpress.org/news/2023/11/shirley/">WordPress 6.4 &quot;Shirley&quot; has been released</a>. Is is recommended to run it using PHP 8.1 or 8.2, but the minimum supported PHP version is still 7.0.</p>
<p>Hence, our WordPress plugins need to (as much as possible) support PHP all the way down to 7.0, and be compatible with PHP 8.1 and 8.2.</p>
<p>The most logical way to do that is to code our plugins using PHP 7.0, while:</p>
<ul>
<li>Using no features that have been deprecated in PHP 7.x, as those will have been removed in PHP 8.x</li>
<li>Using no features that have been deprecated in PHP 8.x, as those will raise warnings</li>
</ul>
<p>To be sure that the plugin code is compatible, we need to thoroughly test it on several environments, running the different versions of PHP.</p>
<p>Coding in PHP 7.x has a clear disadvantage: The plugin code must be compatible with PHP 8.x, however it cannot use any of its features, such as union types, the match expression, the nullsafe operator, and many others.</p>
<p>There is a better alternative.</p>
<h2>Downgrading PHP code from 8.x to 7.x</h2>
<p>Instead of coding in PHP 7 and making sure it works with PHP 8, we can do the inverse: Code the plugin in PHP 8, and downgrade it to PHP 7.</p>
<p>This is possible thanks to <a href="https://github.com/rectorphp/rector/">Rector</a>, a tool to automate PHP code refactoring.</p>
<p>Rector provides <a href="https://github.com/rectorphp/rector-downgrade-php/blob/main/docs/rector_rules_overview.md">rules to downgrade code from PHP 8.1 to PHP 7.2</a>. This means we can use these modern features in our WordPress plugins, as these can be downgraded into PHP 7.2 code.</p>
<p>For instance, rule <a href="https://github.com/rectorphp/rector-downgrade-php/blob/main/docs/rector_rules_overview.md#downgradematchtoswitchrector"><code>DowngradeMatchToSwitchRector</code></a> converts the <code>match</code> operator into a <code>switch</code> operator:</p>
<pre class="language-diff"><code class="language-diff"><span class="highlight-line">class SomeClass</span><br><span class="highlight-line">{</span><br><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   public function run()<br><span class="highlight-line"></span><span class="token prefix unchanged"> </span><span class="token line">   {</span><br><span class="highlight-line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">        $message = match ($statusCode) {</span><br><span class="highlight-line"></span><span class="token prefix deleted">-</span><span class="token line">            200, 300 => null,</span><br><span class="highlight-line"></span><span class="token prefix deleted">-</span><span class="token line">            400 => 'not found',</span><br><span class="highlight-line"></span><span class="token prefix deleted">-</span><span class="token line">            default => 'unknown status code',</span><br><span class="highlight-line"></span><span class="token prefix deleted">-</span><span class="token line">        };</span><br><span class="highlight-line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        switch ($statusCode) {</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">            case 200:</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">            case 300:</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">                $message = null;</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">                break;</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">            case 400:</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">                $message = 'not found';</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">                break;</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">            default:</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">                $message = 'unknown status code';</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">                break;</span><br><span class="highlight-line"></span><span class="token prefix inserted">+</span><span class="token line">        }</span><br><span class="highlight-line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   }</span><br></span></span>}</code></pre>
<p>Notice that the rules are for good for downgrading down to PHP 7.2, not all the way down to PHP 7.1 and 7.0. However this is not a big deal, as <a href="https://wordpress.org/about/stats/#php_versions">these two PHP versions combined account for only 3% of WordPress sites</a>.</p>
<p>Downgrading code is a better approach, because:</p>
<ul>
<li>By coding in PHP 8.1, we are absolutely sure that our code will be compatible with PHP 8.1 and 8.2.</li>
<li>As long as we use PHP features for which there are downgrade rules, the code will also work in PHP 7.2, 7.3 and 7.4.</li>
<li>We can make use of PHP 8.x features, such as union types, the match expression, the nullsafe operator, and many others.</li>
</ul>
<p>Notice that not all PHP 8.x features are available. For instance, there is no rule (yet) to downgrade enumerations, hence we can't use these.</p>
<p>Concerning testing, there is no difference: We must also thoroughly test the plugin on several environments, running the different versions of PHP, to be on the safe side.</p>
<h2>How to downgrade code</h2>
<p><a href="/">Gato GraphQL</a> is developed with PHP 8.1, and downgraded to PHP 7.2 for production.</p>
<p>Downgrading the code and testing it, and then releasing the plugin for production, is all automated via GitHub Actions workflows:</p>
<ul>
<li><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/1.0.15/.github/workflows/downgrade_php_tests.yml"><code>downgrade_php_tests.yml</code></a>: Downgrade the code and analyse it using PHP 7.2</li>
<li><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/1.0.15/.github/workflows/generate_plugins.yml"><code>generate_plugins.yml</code></a>: Generate the plugin for release, downgrading it to PHP 7.2</li>
<li><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/1.0.15/.github/workflows/integration_tests.yml"><code>integration_tests.yml</code></a>: Install the newly-generated plugin in a set of InstaWP instances running different versions of PHP, and run integration tests</li>
</ul>
<p>To learn more, I've written a few articles on this topic:</p>
<ul>
<li><a href="/blog/the-plugin-is-now-transpiled-from-php-80-to-71/">🦸🏿‍♂️ Gato GraphQL is now transpiled from PHP 8.0 to 7.1</a></li>
<li><a href="https://blog.logrocket.com/transpiling-php-code-from-8-0-to-7-x-via-rector/">Transpiling PHP code from 8.0 to 7.x via Rector</a></li>
<li><a href="https://blog.logrocket.com/coding-in-php-7-4-and-deploying-to-7-1-via-rector-and-github-actions/">Coding in PHP 7.4 and deploying to 7.1 via Rector and GitHub Actions</a></li>
</ul>
<p>I hope you find it useful 🙏</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🎤 WPBuilds Podcast: How Gato GraphQL can accelerate your WordPress development
      
    </title>
    <link href="https://gatographql.com/blog/wpbuilds-podcast-how-gatographql-can-accelerate-your-wordpress-development/"/>
    <updated>2023-11-06T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/wpbuilds-podcast-how-gatographql-can-accelerate-your-wordpress-development/</id>
    <content type="html"><![CDATA[
      <p>I (Leonardo Losoviz) was invited to talk about <strong>WordPress + GraphQL</strong> in the <strong>WPBuilds podcast</strong>:</p>
<p><a href="https://wpbuilds.com/2023/11/02/348-how-the-gato-graphql-plugin-can-accelerate-your-wordpress-development/">How the Gato GraphQL plugin can accelerate your WordPress development</a></p>
<p markdown=1>
<a href="https://wpbuilds.com/2023/11/02/348-how-the-gato-graphql-plugin-can-accelerate-your-wordpress-development/" markdown=1>
<p><img src="/images/wpbuilds-podcast.jpg" alt="WPBuilds Podcast: How Gato GraphQL can accelerate your WordPress development" title="WPBuilds Podcast: How Gato GraphQL can accelerate your WordPress development"></p>
</a>
</p>
<p>Enjoy!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      👨🏻‍💻 GraphQL as a (sort of) programming language
      
    </title>
    <link href="https://gatographql.com/blog/graphql-as-a-sort-of-programming-language/"/>
    <updated>2023-10-31T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/graphql-as-a-sort-of-programming-language/</id>
    <content type="html"><![CDATA[
      <p>GraphQL, even though having the <a href="https://graphql.org/learn/queries/">GraphQL language</a>, would not be normally called a programming language, as there are so many things that we can do with programming languages that we cannot do with GraphQL.</p>
<p>GraphQL is normally used to fetch data, for instance to render a website on the client, and to mutate data, for instance to create a post. And that's pretty much it.</p>
<p>(Other uses are simply combinations of these 2 previous cases. For instance, an API gateway may fetch/mutate data from an internal server, which is not exposed to the client.)</p>
<p>Accessing data in GraphQL:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> PrintPostTitle<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...has this (sort of) equivalent in PHP:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostTitle</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><em>(All the examples below will use PHP as the programming language for comparison.)</em></p>
<p>Mutating data in GraphQL:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> UpdatePost<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token variable">$title</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  updatePost<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token variable">$title</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...has this (sort of) equivalent in PHP:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">updatePost</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$title</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$post</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token variable">$title</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is enough because GraphQL is normally accessed from a client (coded in some programming language, such as JavaScript, PHP, Java, or other) which will contain the logic of what to do with the data. So GraphQL is not used on its own, but as a companion to somebody else.</p>
<p>But if GraphQL could be used on its own, then many new use cases could be solved just using GraphQL, allowing GraphQL to be deployed to novel environments and be responsible for additional tasks in the application stack.</p>
<p>For that to happen, though, GraphQL must support many of the features of programming languages.</p>
<p>The programming language features that GraphQL supports are limited. For instance, using directive <code>@include</code> (or <code>@skip</code>) and passing a variable as input can be considered (sort of) conditional logic:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> PrintPostProperties<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token variable">$addContent</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    content <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$addContent</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This query has this PHP equivalent:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostProperties</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$addContent</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$addContent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That's pretty much it. GraphQL lacks recursions, dynamic variables (where their values are computed and assigned to the variable on runtime, not as input in the dictionary), variable assignments (eg: assigning a field output to a variable, which can then be provided as argument into another field), and others.</p>
<p>Consider how you would implement a solution, just using GraphQL, for the following problem:</p>
<ul>
<li>Create a webhook to be invoked by a service whenever a new user signs up to that service; the user may have subscribed to the newsletter (indicated by field <code>marketing_optin</code> in the webhook's payload); in that case, the webook must register the user's email (in field <code>email</code> in the webhook's payload) in a Mailchimp list.</li>
</ul>
<p>Do you consider it's doable? easy? difficult? impossible?</p>
<p>At <a href="/">Gato GraphQL</a>, we want to solve this problem just using GraphQL. Any many more problems. That's why we've thought hard on how to support characterists from programming languages.</p>
<p>Let's explore what programming features we've supported on our GraphQL server. At the end of this post, we will see how we can solve that problem.</p>
<h2>Functionality</h2>
<p>Fields in GraphQL normally bring data, such as a post's title, content or data. But we can also implement fields as &quot;functionality&quot;.</p>
<p>For instance, printing the time in PHP:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>...can be done with field <code>_time</code> in GraphQL:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  _time</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Notice that function <code>time</code> does not belong to any type, hence field <code>_time</code> does not either. As such, it is a <a href="/guides/special-features/global-fields/">global field</a>, and it can be accessed under every type from the GraphQL schema:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    _time</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Other examples of <a href="/guides/special-features/function-fields/">functionality fields</a> are:</p>
<ul>
<li><code>_arrayItem</code></li>
<li><code>_arrayJoin</code></li>
<li><code>_date</code></li>
<li><code>_equals</code></li>
<li><code>_inArray</code></li>
<li><code>_intAdd</code></li>
<li><code>_isEmpty</code></li>
<li><code>_isNull</code></li>
<li><code>_makeTime</code></li>
<li><code>_objectProperty</code></li>
<li><code>_sprintf</code></li>
<li><code>_strContains</code></li>
<li><code>_strRegexReplace</code></li>
<li><code>_strSubstr</code></li>
</ul>
<h2>Functions</h2>
<p>We can split units of logic into functions, and have a function invoke another function:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostProperties</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token function">printPostTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token function">printPostContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostTitle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Post</span> <span class="token variable">$post</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostContent</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Post</span> <span class="token variable">$post</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In GraphQL, we can similarly split the <code>query</code> (or <code>mutation</code>) operation in the document into multiple <code>query</code> operations, and have an operation &quot;depend&quot; on other ones, thus executing those ones first:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> PrintPostTitle<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">postWithTitle</span><span class="token punctuation">:</span> post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> PrintPostContent<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">postWithContent</span><span class="token punctuation">:</span> post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    content</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> PrintPostProperties</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token string">"PrintPostTitle"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string">"PrintPostContent"</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># ...</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In this query, executing the GraphQL query passing <code>?operationName=PrintPostProperties</code> to the endpoint will first execute queries <code>PrintPostTitle</code> and <code>PrintPostContent</code>, and only then <code>PrintPostProperties</code>.</p>
<p>This is possible via <a href="/guides/special-features/multiple-query-execution/">Multiple Query Execution</a>.</p>
<h2>Dynamic Variables</h2>
<p>We can compute a value and assign it to a variable on runtime. Then, based on that value, we can conditionally execute some functionality or not:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostProperties</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token variable">$addContent</span> <span class="token operator">=</span> <span class="token function">isUserLoggedIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$addContent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In GraphQL, we can &quot;export&quot; a value under a dynamic variable in some operation, and then read this value on another operation:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> ExportAddContent</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">addContent</span><span class="token punctuation">:</span> isUserLoggedIn</span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"addContent"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> PrintPostProperties<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportAddContent"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    content <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$addContent</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Notice that variable <code>$addContent</code>, which holds a value that was computed on runtime, is read by but not declared on operation <code>PrintPostProperties</code>, as it is a <a href="/guides/augment/dynamic-variables/">dynamic variable</a>.</p>
<h2>Conditionally executing functions</h2>
<p>An alternative to the previous example is to group logic into functions, and then conditionally execute a function or not depending on the value of the dynamic variable:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostProperties</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token function">printPostTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token variable">$addContent</span> <span class="token operator">=</span> <span class="token function">isUserLoggedIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$addContent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token function">printPostContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostTitle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Post</span> <span class="token variable">$post</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostContent</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Post</span> <span class="token variable">$post</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In GraphQL we can add the <code>@include</code> directive on the operation:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> ExportAddContent</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">addContent</span><span class="token punctuation">:</span> isUserLoggedIn</span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"addContent"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> PrintPostTitle<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">postWithTitle</span><span class="token punctuation">:</span> post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> PrintPostContent<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportAddContent"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$addContent</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">postWithContent</span><span class="token punctuation">:</span> post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    content</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> PrintPostProperties</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token string">"PrintPostTitle"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string">"PrintPostContent"</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># ...</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now, operation <code>PrintPostContent</code> will only be executed if <code>$addContent</code> is <code>true</code>.</p>
<h2>Assigning variables, Inputting them back</h2>
<p>Let's modify slightly the previous example, in which the condition <code>&quot;addContent&quot;</code> was tied to the user being logged-in or not.</p>
<p>In this other example, <code>&quot;addContent&quot;</code> is <code>true</code> whenever today is weekend, which involves some logic to compute:</p>
<ul>
<li>Get today's date</li>
<li>Format it to the day's name, in lowercase</li>
<li>Check it's either <code>&quot;saturday&quot;</code> or <code>&quot;sunday&quot;</code></li>
</ul>
<p>In PHP:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">addContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$today</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$dayName</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'l'</span><span class="token punctuation">,</span> <span class="token variable">$today</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$lcDayName</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$dayName</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$isWeekend</span> <span class="token operator">=</span> <span class="token function">in_array</span><span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token variable">$lcDayName</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span><span class="token string single-quoted-string">'saturday'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sunday'</span><span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token variable">$isWeekend</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostProperties</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token variable">$addContent</span> <span class="token operator">=</span> <span class="token function">addContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$addContent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In GraphQL:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> ExportAddContent</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">today</span><span class="token punctuation">:</span> _time</span><br><span class="highlight-line">  <span class="token attr-name">dayName</span><span class="token punctuation">:</span> _date<span class="token punctuation">(</span><span class="token attr-name">format</span><span class="token punctuation">:</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token attr-name">timestamp</span><span class="token punctuation">:</span> <span class="token variable">$__today</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">lcDayName</span><span class="token punctuation">:</span> _strLowerCase<span class="token punctuation">(</span><span class="token attr-name">text</span><span class="token punctuation">:</span> <span class="token variable">$__dayName</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">isWeekend</span><span class="token punctuation">:</span> _inArray<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$__lcDayName</span></span><br><span class="highlight-line">    <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"saturday"</span><span class="token punctuation">,</span> <span class="token string">"sunday"</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"addContent"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> PrintPostProperties<span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportAddContent"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$postID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    content <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$addContent</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In operation <code>ExportAddContent</code>, the value for every queried field is immediately available to the fields below, under dynamic variable <code>$__fieldName</code>. This way the output of a field can be immediately be used as input to another field, already within the same operation.</p>
<p>This is possible thanks to <a href="/guides/special-features/field-to-input/">Field to Input</a>.</p>
<h2>Dynamically modifying a value</h2>
<p>In this example in PHP, we modify the value of a variable whenever the logged-in user is an admin, in which case we the post's content is added a link to edit the post:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">isAdminUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"administrator"</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token property">roles</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printPostContent</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$postID</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token variable">$postID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$postContent</span> <span class="token operator">=</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token variable">$isAdminUser</span> <span class="token operator">=</span> <span class="token function">isAdminUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$isAdminUser</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$postContent</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'%s&lt;p>&lt;a href="%s">%s&lt;/a>&lt;/p>'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token variable">$postContent</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">edit_url</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'(Admin only) Edit post'</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span> </span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">echo</span> <span class="token variable">$postContent</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In GraphQL, we can conditionally execute an operation or another one, producing different values for some field:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> InitializeDynamicVariables</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">isAdminUser</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isAdminUser"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> ExportConditionalVariables</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"InitializeDynamicVariables"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  me <span class="token punctuation">{</span></span><br><span class="highlight-line">    roleNames</span><br><span class="highlight-line">    <span class="token attr-name">isAdminUser</span><span class="token punctuation">:</span> _inArray<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token string">"administrator"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token variable">$__roleNames</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"isAdminUser"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> RetrieveContentForAdminUser<span class="token punctuation">(</span><span class="token variable">$postId</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportConditionalVariables"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isAdminUser</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span> <span class="token punctuation">:</span> <span class="token variable">$postId</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">originalContent</span><span class="token punctuation">:</span> content</span><br><span class="highlight-line">    wpAdminEditURL</span><br><span class="highlight-line">    <span class="token attr-name">content</span><span class="token punctuation">:</span> _sprintf<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">string</span><span class="token punctuation">:</span> <span class="token string">"%s&lt;p>&lt;a href=\"%s\">%s&lt;/a>&lt;/p>"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">        <span class="token variable">$__originalContent</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token variable">$__wpAdminEditURL</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token string">"(Admin only) Edit post"</span></span><br><span class="highlight-line">      <span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> RetrieveContentForNonAdminUser<span class="token punctuation">(</span><span class="token variable">$postId</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"ExportConditionalVariables"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token directive function">@skip</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$isAdminUser</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span> <span class="token punctuation">:</span> <span class="token variable">$postId</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    content</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> ExecuteAll</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token string">"RetrieveContentForAdminUser"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string">"RetrieveContentForNonAdminUser"</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># ...</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>By using directives <code>@include</code> and <code>@skip</code> with the same dynamic variable as input, operations <code>RetrieveContentForAdminUser</code> and <code>RetrieveContentForNonAdminUser</code> are mutually exclusive.</p>
<h2>Iterating arrays</h2>
<p>Let's say we want to iterate the items in an array, and convert those values to uppercase:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">printUserRolesAsUppercase</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$userID</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token variable">$userID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">roles</span> <span class="token keyword">as</span> <span class="token variable">$role</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">echo</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$role</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In GraphQL, we can have directive <code>@underEachArrayItem</code> iterate over the array items, and provide each of those values to the following directive in the chain, in this case <code>@strUpperCase</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> PrintUserRolesAsUppercase<span class="token punctuation">(</span><span class="token variable">$userID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  user<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token variable">$userID</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    roles</span><br><span class="highlight-line">      <span class="token directive function">@underEachArrayItem</span></span><br><span class="highlight-line">        <span class="token directive function">@strUpperCase</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is possible thanks to <a href="/guides/special-features/composable-directives/">composable directives</a>.</p>
<h2>Bulk CRUD operations</h2>
<p>CRUD stands for Create, Read, Update and Delete, these are the operations we apply on resources (posts, users, etc).</p>
<p>Reading in bulk in PHP looks like this:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">getPostTitles</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$posts</span> <span class="token keyword">as</span> <span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">echo</span> <span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This use case is naturally satisfied by GraphQL:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> GetPostTitles</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Updating in bulk in PHP looks like this:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">updatePostTitlesAsUppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$posts</span> <span class="token keyword">as</span> <span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$post</span><span class="token operator">-></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token operator">-></span><span class="token property">title</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Executing updates in bulk in GraphQL is normally supported by creating a dedicated mutation <code>updatePosts</code>, that takes the data for all the posts.</p>
<p>I do not like this approach, as it effectively duplicates the number of mutations in the schema (one to mutate the single resource, one to mutate multiple resources), and we need to maintain the logic for both of them:</p>
<ul>
<li><code>updatePost</code> + <code>updatePosts</code></li>
<li><code>createPost</code> + <code>createPosts</code></li>
<li>etc</li>
</ul>
<p>In my opinion, a more elegant approach is to use <a href="/guides/special-features/nested-mutations/">nested mutations</a>, where the mutation <code>Post.update</code> is applied to each of the queried resources:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> UpdatePostTitlesAsUppercase</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    <span class="token attr-name">ucTitle</span><span class="token punctuation">:</span> _strUpperCase<span class="token punctuation">(</span><span class="token attr-name">text</span><span class="token punctuation">:</span> <span class="token variable">$__title</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    update<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token variable">$__ucTitle</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      status</span><br><span class="highlight-line">      post <span class="token punctuation">{</span></span><br><span class="highlight-line">        title</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The same approach works for deleting resources:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">deletePosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$posts</span> <span class="token keyword">as</span> <span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$post</span><span class="token operator">-></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In GraphQL:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> DeletePosts</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    delete <span class="token punctuation">{</span></span><br><span class="highlight-line">      status</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>For creation, we don't pass the resources as they don't exist yet; instead, we provide an array with the data inputs for all resources to create:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">createPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$postDataItems</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'First title'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'content'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'First content'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'title'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Second title'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'content'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Second content'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$postDataItems</span> <span class="token keyword">as</span> <span class="token variable">$postDataItem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token variable">$postDataItem</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$postDataItem</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token variable">$post</span><span class="token operator">-></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Creating posts in bulk in GraphQL using a single <code>createPost</code> mutation is a bit tricky, but it is nevertheless doable.</p>
<p>The idea is to iterate over the array with the data inputs, assign each under a dynamic variable <code>$input</code>, and then execute the <code>createPost</code> mutation passing that input. Finally we get the resulting IDs from the created posts under the dynamic variable <code>$createdPostIDs</code>, and we retrieve their data:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> CreatePosts</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"GetPostsAndExportData"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">createdPostIDs</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token string">"First title"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">content</span><span class="token punctuation">:</span> <span class="token string">"First content"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token string">"Second title"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">content</span><span class="token punctuation">:</span> <span class="token string">"Second content"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@underEachArrayItem</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">passValueOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"input"</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">createPost</span>"</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token variable">$input</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">setResultInResponse</span><span class="token punctuation">:</span> <span class="token boolean">true</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"createdPostIDs"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> RetrieveCreatedPosts</span><br><span class="highlight-line">  <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"CreatePosts"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">createdPosts</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">filter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">ids</span><span class="token punctuation">:</span> <span class="token variable">$createdPostIDs</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Sending an HTTP request (and other functions)</h2>
<p>Sending an HTTP request to some webserver can be satisfied via a dedicated function in PHP, such as <code>file_get_contents</code> or <code>curl_exec</code>.</p>
<p>Using <code>file_get_contents</code>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"http://www.example.com/file.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>In GraphQL, the logic for executing an HTTP request can be satisfied via a functionality field, such as <code>_sendHTTPRequest</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  _sendHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"http://www.example.com/file.xml"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">GET</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">xml</span><span class="token punctuation">:</span> body</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The same concept applies for any functionality.</p>
<p>For instance, we access the value of a constant in PHP like this:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token variable">$mailchimpUsername</span> <span class="token operator">=</span> <span class="token function">constant</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'MAILCHIMP_API_CREDENTIALS_USERNAME'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>We can implement a corresponding functionality field in GraphQL:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">mailchimpUsername</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_USERNAME"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Solving the challenge using only GraphQL</h2>
<p>With all the programming language features we've just covered, we are now able to use only GraphQL to solve the problem posed earlier:</p>
<ul>
<li>Create a webhook to be invoked by a service whenever a new user signs up to that service; the user may have subscribed to the newsletter (indicated by field <code>marketing_optin</code> in the webhook's payload); in that case, the webook must register the user's email (in field <code>email</code> in the webhook's payload) in a Mailchimp list.</li>
</ul>
<p>The solution is to use a <a href="/guides/special-features/persisted-queries/">GraphQL persisted query</a> as a webhook, with this query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> HasSubscribedToNewsletter <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">hasSubscriberOptin</span><span class="token punctuation">:</span> _httpRequestHasParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberOptin</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">isNotSubscriberOptinNAValue</span><span class="token punctuation">:</span> _notEquals<span class="token punctuation">(</span><span class="token attr-name">value1</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberOptin</span><span class="token punctuation">,</span> <span class="token attr-name">value2</span><span class="token punctuation">:</span> <span class="token string">"NA"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">subscribedToNewsletter</span><span class="token punctuation">:</span> _and<span class="token punctuation">(</span><span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$__hasSubscriberOptin</span><span class="token punctuation">,</span> <span class="token variable">$__isNotSubscriberOptinNAValue</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"subscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> MaybeCreateContactOnMailchimp</span><br><span class="highlight-line">   <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"HasSubscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$subscribedToNewsletter</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberEmail</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"email"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">mailchimpUsername</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_USERNAME"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   </span><br><span class="highlight-line">  <span class="token attr-name">mailchimpPassword</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_PASSWORD"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   </span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">mailchimpListMembersJSONObject</span><span class="token punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://us7.api.mailchimp.com/3.0/lists/{listCode}/members"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">options</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">auth</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">username</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpUsername</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpPassword</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">json</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">email_address</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberEmail</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">status</span><span class="token punctuation">:</span> <span class="token string">"subscribed"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In this solution, operation <code>MaybeCreateContactOnMailchimp</code>, which executes the HTTP request against Mailchimp's API, will be conditionally executed, depending on the value of the <code>marketing_optin</code> field.</p>
<p><em>(Read blog post <a href="/blog/instawp-gatographql-query/">👨🏻‍🏫 GraphQL query to automatically send the newsletter subscribers from InstaWP to Mailchimp</a> to see how this query works.)</em></p>
<h2>GraphQL is more powerful than you thought!</h2>
<p>GraphQL can be used for much more than just fetching and mutating data... Adapt data, dynamically modify the output, customize content for different contexts, create an API gateway with barely a few lines of code, and many others.</p>
<p>By supporting programming language features, we can solve the challenge above just using GraphQL, and avoid deploying a client to go alongside it. We are then simplifying the application stack: Less moving parts, less complexity, less code to debug, less technologies to deal with.</p>
<p>GraphQL rocks 🤘</p>
<p class="[ p-name text-center ]">
    <a href="https://app.instawp.io/launch?t=gatographql-demo&d=v2" target="_blank" class="[ button bigger rounded ]">Launch a sandbox site to play with Gato GraphQL</a>
</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🚀 Automatically sending the newsletter subscribers from InstaWP to Mailchimp
      
    </title>
    <link href="https://gatographql.com/blog/instawp-gatographql/"/>
    <updated>2023-10-25T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/instawp-gatographql/</id>
    <content type="html"><![CDATA[
      <p>For Gato GraphQL, we are using <a href="https://instawp.com">InstaWP</a> to allow visitors to play with the commercial extensions of the plugin in a sandbox site of their own, before deciding to buy them.</p>
<p>Two days ago I upgraded the InstaWP subscription to the Personal plan, as to increase the lifespan of the sandbox sites from 4 hours to 7 days, and be able to capture the emails subscribed to the newsletter when <a href="https://app.instawp.io/launch?t=gatographql-demo&amp;d=v2">test driving Gato GraphQL</a>:</p>
<div class="img-width-610" markdown=1>
<p><img src="/images/instawp-test-drive-gatographql.png" alt="Test Driving Gato GraphQL with InstaWP" title="Test Driving Gato GraphQL with InstaWP"></p>
</div>
<p>The new plan gives me access to the &quot;Advanced Options&quot; tab, where I can provide a webhook that will receive the data from a newly-created sandbox site:</p>
<div class="img-width-1024" markdown=1>
<p><img src="/images/instawp-template-advanced-options.png" alt="Advanced options for InstaWP templates" title="Advanced options for InstaWP templates"></p>
</div>
<p>I'd like to automatically capture the email from the visitors who ticked the &quot;Subscribe to mailing list&quot; checkbox, and send it straight to my Mailchimp list, without any manual intervention.</p>
<p>The <a href="https://docs.instawp.com/en/article/webhooks-1m7qpja/">documentation for the webhook</a> provides an example on capturing the new sandbox site's data, based on using the <a href="https://www.make.com">Make</a> platform to create a webhook that extracts the payload fields and sends them to Google Sheet:</p>
<p><img src="/images/instawp-make.jpeg" alt="Make + InstaWP" title="Make + InstaWP"></p>
<p>However, this workflow does not fully satisfy my needs, as I don't want to depend on yet another service provider, and have to input my Mailchimp credentials there. I want something simpler.</p>
<h2>Using InstaWP + Gato GraphQL to forward webhook data</h2>
<p>The solution jumped right in front of my eyes: I can directly use InstaWP to host a reserved site, and install the Gato GraphQL plugin with the <a href="/bundles/all-in-one-toolbox-for-wordpress/">“All in One Toolbox for WordPress” Bundle</a> (that includes the <a href="/extensions/http-client/">HTTP Client</a> and all other required extensions).</p>
<p>This combination gives me an &quot;API Gateway&quot; instance on the cheap. I can now use this instance to receive the webhook payload, extract the data, and send it over to Mailchimp, coding this logic in a GraphQL query.</p>
<p>Using GraphQL may not be an obvious option at first, because a GraphQL server normally exposes a single endpoint to receive the query, resolve it, and return its response. Even though possible, it would be very awkward to use the single endpoint as the webhook URL, while passing the GraphQL query via as a param:</p>
<pre class="language-apacheconf"><code class="language-apacheconf"><span class="highlight-line">https://my-api-gateway.instawp.xyz/graphql/?query=query HasSubscribedToNewsletter { hasSubscriberOptin: _httpRequestHasParam(name: <span class="token string">"marketing_optin") subscriberOptin: _httpRequestStringParam(name: "marketing_optin") isNotSubscriberOptinNAValue: _notEquals(value1: <span class="token variable">$__subscriberOptin</span>, value2: "NA") subscribedToNewsletter: _and(values: [<span class="token variable">$__hasSubscriberOptin</span>, <span class="token variable">$__isNotSubscriberOptinNAValue</span>]) @export(as: "subscribedToNewsletter") } query MaybeCreateContactOnMailchimp @depends(on: "HasSubscribedToNewsletter") @include(if: <span class="token variable">$subscribedToNewsletter</span>) { subscriberEmail: _httpRequestStringParam(name: "email") mailchimpUsername: _env(name: "MAILCHIMP_API_CREDENTIALS_USERNAME") @remove mailchimpPassword: _env(name: "MAILCHIMP_API_CREDENTIALS_PASSWORD") @remove mailchimpListMembersJSONObject: _sendJSONObjectItemHTTPRequest(input: { url: "https://us7.api.mailchimp.com/3.0/lists/bdfd6885fe/members", method: POST, options: { auth: { username: <span class="token variable">$__mailchimpUsername</span>, password: <span class="token variable">$__mailchimpPassword</span> }, json: { email_address: <span class="token variable">$__subscriberEmail</span>, status: "subscribed"</span> } } }) }</span></code></pre>
<p>Not pretty, right?</p>
<p>Gato GraphQL offers a better way to deal with this: <a href="/guides/special-features/persisted-queries/">Persisted Queries</a>. A persisted query is similar to a REST endpoint in that it is accessible under its own URL, and its output is predefined (the GraphQL query is provided in advance and stored in the database):</p>
<p><img src="/assets/guides/upstream/persisted-query.png" alt="Persisted query editor" title="Persisted query editor"></p>
<p>Now, the webhook URL will look like this:</p>
<pre class="language-apacheconf"><code class="language-apacheconf"><span class="highlight-line">https://my-api-gateway.instawp.xyz/graphql-query/process-instawp-sandbox-webhook/?operationName=MaybeCreateContactOnMailchimp</span></code></pre>
<p>And the GraphQL query stored as a Persisted query is this one:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> HasSubscribedToNewsletter <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">hasSubscriberOptin</span><span class="token punctuation">:</span> _httpRequestHasParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberOptin</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">isNotSubscriberOptinNAValue</span><span class="token punctuation">:</span> _notEquals<span class="token punctuation">(</span><span class="token attr-name">value1</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberOptin</span><span class="token punctuation">,</span> <span class="token attr-name">value2</span><span class="token punctuation">:</span> <span class="token string">"NA"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">subscribedToNewsletter</span><span class="token punctuation">:</span> _and<span class="token punctuation">(</span><span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$__hasSubscriberOptin</span><span class="token punctuation">,</span> <span class="token variable">$__isNotSubscriberOptinNAValue</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"subscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> MaybeCreateContactOnMailchimp</span><br><span class="highlight-line">   <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"HasSubscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$subscribedToNewsletter</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberEmail</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"email"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">mailchimpUsername</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_USERNAME"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line">  <span class="token attr-name">mailchimpPassword</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_PASSWORD"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">mailchimpListMembersJSONObject</span><span class="token punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://us7.api.mailchimp.com/3.0/lists/{listCode}/members"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">options</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">auth</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">username</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpUsername</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpPassword</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">json</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">email_address</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberEmail</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">status</span><span class="token punctuation">:</span> <span class="token string">"subscribed"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Much better, right?</p>
<p>Now, when creating a new sandbox site on InstaWP, and the user signs up to the newsletter, I automatically get that email added to my Mailchimp list:</p>
<div class="img-width-1024" markdown=1>
<p><img src="/images/instawp-mailchimp.png" alt="Email automatically added to Mailchimp list" title="Email automatically added to Mailchimp list"></p>
</div>
<p>If you're interested in learning how this GraphQL query works, check out blog post <a href="/blog/instawp-gatographql-query/">👨🏻‍🏫 GraphQL query to automatically send the newsletter subscribers from InstaWP to Mailchimp</a></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      👨🏻‍🏫 GraphQL query to automatically send the newsletter subscribers from InstaWP to Mailchimp
      
    </title>
    <link href="https://gatographql.com/blog/instawp-gatographql-query/"/>
    <updated>2023-10-25T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/instawp-gatographql-query/</id>
    <content type="html"><![CDATA[
      <p><em>(Read blog post <a href="/blog/instawp-gatographql/">🚀 Automatically sending the newsletter subscribers from InstaWP to Mailchimp</a> to see the context for this query.)</em></p>
<p>This GraphQL query captures the email from the visitors who ticked the &quot;Subscribe to mailing list&quot; checkbox from InstaWP (when creating a new sandbox site), and subscribes this email to a Mailchimp list:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> HasSubscribedToNewsletter <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">hasSubscriberOptin</span><span class="token punctuation">:</span> _httpRequestHasParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberOptin</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">isNotSubscriberOptinNAValue</span><span class="token punctuation">:</span> _notEquals<span class="token punctuation">(</span><span class="token attr-name">value1</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberOptin</span><span class="token punctuation">,</span> <span class="token attr-name">value2</span><span class="token punctuation">:</span> <span class="token string">"NA"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token attr-name">subscribedToNewsletter</span><span class="token punctuation">:</span> _and<span class="token punctuation">(</span><span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$__hasSubscriberOptin</span><span class="token punctuation">,</span> <span class="token variable">$__isNotSubscriberOptinNAValue</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"subscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> MaybeCreateContactOnMailchimp</span><br><span class="highlight-line">   <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"HasSubscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$subscribedToNewsletter</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberEmail</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"email"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">mailchimpUsername</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_USERNAME"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line">  <span class="token attr-name">mailchimpPassword</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_PASSWORD"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token attr-name">mailchimpListMembersJSONObject</span><span class="token punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://us7.api.mailchimp.com/3.0/lists/{listCode}/members"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">options</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">auth</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">username</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpUsername</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpPassword</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token attr-name">json</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">email_address</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberEmail</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">status</span><span class="token punctuation">:</span> <span class="token string">"subscribed"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Let's see how this GraphQL query does its magic.</p>
<h2>Splitting the GraphQL query into independent units</h2>
<p>A GraphQL document can contain multiple operations (queries and mutations), but only one of them will be executed. We indicate which one via the <code>?operationName=...</code> parameter on the GraphQL endpoint; otherwise, the last operation will be executed.</p>
<p>Notice that there are 2 <code>query</code> operations in the document above:</p>
<ol>
<li><code>HasSubscribedToNewsletter</code></li>
<li><code>MaybeCreateContactOnMailchimp</code></li>
</ol>
<p>The webhook URL contains <code>?operationName=MaybeCreateContactOnMailchimp</code>, so that's the operation that will be executed.</p>
<p>Thanks to the <a href="/extensions/multiple-query-execution/">Multiple Query Execution</a> extension, <code>MaybeCreateContactOnMailchimp</code> will first execute <code>HasSubscribedToNewsletter</code>, as indicated via the <code>@depends</code> directive:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> MaybeCreateContactOnMailchimp</span><br><span class="highlight-line">   <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"HasSubscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   <span class="token comment"># ...</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment">#</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In addition, the <code>MaybeCreateContactOnMailchimp</code> will be conditionally executed, only if the value of variable <code>$subscribedToNewsletter</code> is <code>true</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> MaybeCreateContactOnMailchimp</span><br><span class="highlight-line">   <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"HasSubscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$subscribedToNewsletter</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment">#</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><code>$subscribedToNewsletter</code> is a <a href="/guides/augment/dynamic-variables/">dynamic variable</a>, exported within the <code>HasSubscribedToNewsletter</code> operation:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> HasSubscribedToNewsletter <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># ...</span></span><br><span class="highlight-line">  <span class="token attr-name">subscribedToNewsletter</span><span class="token punctuation">:</span> _and<span class="token punctuation">(</span><span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$__hasSubscriberOptin</span><span class="token punctuation">,</span> <span class="token variable">$__isNotSubscriberOptinNAValue</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"subscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Hence, operation <code>MaybeCreateContactOnMailchimp</code> will only be executed when the user has ticked on the &quot;Subscribe to mailing list&quot; checkbox.</p>
<h2>Computing if the user ticked the checkbox</h2>
<p>InstaWP's <a href="https://docs.instawp.com/en/article/webhooks-1m7qpja/">documentation for the webhook</a> indicates that the payload data contains the following fields (among others):</p>
<ul>
<li><code>marketing_optin</code>: Indicates if the user ticked the checkbox</li>
<li><code>email</code>: Visitor's email</li>
</ul>
<p>The doc only explains that field <code>marketing_optin</code> has value <code>NA</code> when the checkbox is not ticked, so we will have to work with that.</p>
<p>To find out if the user ticked the checkbox, the logic is:</p>
<ul>
<li>Check if field <code>marketing_optin</code> is present, and</li>
<li>Check that its value is not <code>NA</code></li>
</ul>
<p>This is computed in the <code>HasSubscribedToNewsletter</code> operation. Here it is with comments, explaining what each line in the query is doing:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> HasSubscribedToNewsletter <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># Check if field `marketing_optin` is present</span></span><br><span class="highlight-line">  <span class="token attr-name">hasSubscriberOptin</span><span class="token punctuation">:</span> _httpRequestHasParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># Get the value of field `marketing_optin`</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberOptin</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"marketing_optin"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># Check if the value of the field is not "NA"</span></span><br><span class="highlight-line">  <span class="token attr-name">isNotSubscriberOptinNAValue</span><span class="token punctuation">:</span> _notEquals<span class="token punctuation">(</span><span class="token attr-name">value1</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberOptin</span><span class="token punctuation">,</span> <span class="token attr-name">value2</span><span class="token punctuation">:</span> <span class="token string">"NA"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># Perform an AND operation: field present &amp;&amp; value != "NA"</span></span><br><span class="highlight-line">  <span class="token attr-name">subscribedToNewsletter</span><span class="token punctuation">:</span> _and<span class="token punctuation">(</span><span class="token attr-name">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$__hasSubscriberOptin</span><span class="token punctuation">,</span> <span class="token variable">$__isNotSubscriberOptinNAValue</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    </span><br><span class="highlight-line">    <span class="token comment"># Export the result under dynamic variable $subscribedToNewsletter</span></span><br><span class="highlight-line">    <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"subscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>There are several interesting things in this query.</p>
<h3>Global Fields</h3>
<p>Have you noticed the fields starting with <code>_</code>? Namely:</p>
<ul>
<li><code>_httpRequestHasParam</code></li>
<li><code>_httpRequestStringParam</code></li>
<li><code>_notEquals</code></li>
<li><code>_and</code></li>
</ul>
<p>These are <a href="/guides/special-features/global-fields/">global fields</a>, which are fields that are available under all types in the GraphQL schema. Global fields offer functionality instead of data, and by convention they start with <code>_</code>.</p>
<h3>Field to Input</h3>
<p>Have you noticed those variables starting with <code>$__</code>? Namely:</p>
<ul>
<li><code>$__subscriberOptin</code></li>
<li><code>$__hasSubscriberOptin</code></li>
<li><code>$__isNotSubscriberOptinNAValue</code></li>
</ul>
<p>These are dynamic variables that contain the value of a field defined before them within the same operation. For instance, variable <code>$__subscriberOptin</code> contains the value of field <code>subscriberOptin</code> declared above it.</p>
<p>This is a feature provided by the <a href="/extensions/field-to-input/">Field to Input</a> extension, which allows to use the output of a field as input into another field. This is how we can create functionality within the GraphQL query.</p>
<p>In the query, field <code>isNotSubscriberOptinNAValue</code> checks that the value of the previously queried field <code>subscriberOptin</code> does not equal <code>&quot;NA&quot;</code>, and <code>subscribedToNewsletter</code> computes an <code>AND</code> operation involving the values of fields <code>hasSubscriberOptin</code> and <code>isNotSubscriberOptinNAValue</code>.</p>
<h2>Connecting to Mailchimp</h2>
<p>Operation <code>MaybeCreateContactOnMailchimp</code> contains the logic to extract the payload data, and call the Mailchimp API to sign up the email to the newsletter list.</p>
<p>Here is the operation with comments, explaining what each line is doing:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> MaybeCreateContactOnMailchimp</span><br><span class="highlight-line">   <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"HasSubscribedToNewsletter"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">   <span class="token directive function">@include</span><span class="token punctuation">(</span><span class="token attr-name">if</span><span class="token punctuation">:</span> <span class="token variable">$subscribedToNewsletter</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># Extract form field `email` from the body of the request</span></span><br><span class="highlight-line">  <span class="token attr-name">subscriberEmail</span><span class="token punctuation">:</span> _httpRequestStringParam<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"email"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token comment"># Obtain Mailchimp credentials, defined in wp-config.php</span></span><br><span class="highlight-line">  <span class="token attr-name">mailchimpUsername</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_USERNAME"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token comment"># Do not print the credentials in the response</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line">  <span class="token attr-name">mailchimpPassword</span><span class="token punctuation">:</span> _env<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"MAILCHIMP_API_CREDENTIALS_PASSWORD"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token directive function">@remove</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token comment"># Connect to Mailchimp to add a new member to the list</span></span><br><span class="highlight-line">  <span class="token attr-name">mailchimpListMembersJSONObject</span><span class="token punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://us7.api.mailchimp.com/3.0/lists/{listCode}/members"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">method</span><span class="token punctuation">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">options</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token comment"># Provide credentials to connect to the API</span></span><br><span class="highlight-line">      <span class="token attr-name">auth</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">username</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpUsername</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token variable">$__mailchimpPassword</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token comment"># Provide form data</span></span><br><span class="highlight-line">      <span class="token attr-name">json</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">email_address</span><span class="token punctuation">:</span> <span class="token variable">$__subscriberEmail</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token attr-name">status</span><span class="token punctuation">:</span> <span class="token string">"subscribed"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Let's explore the features used in this query.</p>
<h3>Environment Variables</h3>
<p>We need to provide our credentials when connecting to the Mailchimp API. However, we do not want to directly input these in the GraphQL query, as they <a href="/tutorial/not-leaking-credentials-when-connecting-to-services/">may leak somewhere</a> (eg: they could be printed in some log).</p>
<p>That's why we use global field <code>_env</code> (provided by the <a href="/extensions/php-constants-and-environment-variables-via-schema/">PHP Constants and Environment via Schema</a> extension) to read an environment variable or PHP constant, together with the <code>@remove</code> directive (provided by the <a href="/extensions/field-response-removal/"><strong>Field Response Removal</strong></a> extension) to skip printing the credentials in the response.</p>
<p>Now, we can declare our credentials in <code>wp-config.php</code>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'MAILCHIMP_API_CREDENTIALS_USERNAME'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'{ username }'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'MAILCHIMP_API_CREDENTIALS_PASSWORD'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'{ password }'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h3>Sending the HTTP request to Mailchimp</h3>
<p>The last piece of the logic is field <code>_sendJSONObjectItemHTTPRequest</code>, which sends an HTTP request to some service.</p>
<p>As we want to connect to the Mailchimp API, field <code>mailchimpListMembersJSONObject</code> provides the data required by Mailchimp's REST API endpoint, as indicated in the docs to <a href="https://mailchimp.com/developer/marketing/api/list-members/add-member-to-list/">subscribe a member to a Mailchimp list</a>:</p>
<ul>
<li>Send a <code>POST</code> request</li>
<li>The endpoint is <code>https://{subdomain}.api.mailchimp.com/3.0/lists/{listCode}/members</code></li>
<li>The body must include fields <code>email_address</code> and <code>status</code></li>
</ul>
<h2>Creating a webhook to interact with any API</h2>
<p>The GraphQL query in this post forwards data from InstaWP to Mailchimp.</p>
<p>You can apply the same idea for whatever combination you need, extracting the data from some source service (whichever that is), adapting it, and sending it over to some destination service (whichever that is).</p>
<p>Have fun!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      👨🏻‍💻 (Starting this Wed 18/10) Gato GraphQL Webinar Series @ WPBuilds
      
    </title>
    <link href="https://gatographql.com/blog/gatographql-wpbuild-webinar-series/"/>
    <updated>2023-10-16T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/gatographql-wpbuild-webinar-series/</id>
    <content type="html"><![CDATA[
      <p>Starting this Wednesday 18th October, I will kick-start a webinar series on using <strong>Gato GraphQL</strong> at the <strong>WPBuilds podcast</strong>, hosted by the one and only <strong>Nathan Wrigley</strong>.</p>
<p>Whether you have used GraphQL or not, if you'd like to learn <em>(and be surprised at)</em> what is possible to attain with GraphQL in WordPress, then this webinar series is for you.</p>
<p>If you are not interested a tiny bit in GraphQL, but you do care about discovering tools that help you manage your WordPress site, then this webinar series is for you too.</p>
<p><em>(And psst, don't tell anyone, but if you care about getting a good deal, this webinar series is also for you! There might be a coupon code for a nice discount announced at it 🙊)</em></p>
<p><img src="/images/WP-Builds-Gato-GraphQL-Episode-1-1.jpeg" alt="Gato GraphQL Webinar Series - 1st Episode" title="Gato GraphQL Webinar Series - 1st Episode"></p>
<p><strong>Where:</strong> <a href="https://wpbuilds.com/live">wpbuilds.com/live</a></p>
<p><strong>When:</strong> This Wednesday 18th October 2023, at 3pm UK / 10am Eastern / 7am Pacific time</p>
<p><strong>Calendar:</strong> <a href="https://calendar.google.com/calendar/render?action=TEMPLATE&amp;dates=20231018T140000Z%2F20231018T145900Z&amp;details=Introduction%20to%20Gato%20GraphQL%2C%20Running%20queries%20in%20the%20admin%2C%20Creating%20API%20endpoints%2C%20Access%20Control%2C%20Caching.%0Ahttps%3A%2F%2Fwpbuilds.com%2Flive&amp;location=WP%20Builds%20LIVE%20Page&amp;text=Gato%20GraphQL%20Webinar%20Series%20%231">Google</a> / <a href="https://outlook.live.com/calendar/0/action/compose?allday=false&amp;body=Introduction%20to%20Gato%20GraphQL%2C%20Running%20queries%20in%20the%20admin%2C%20Creating%20API%20endpoints%2C%20Access%20Control%2C%20Caching.%0Ahttps%3A%2F%2Fwpbuilds.com%2Flive&amp;enddt=2023-10-18T14%3A59%3A00%2B00%3A00&amp;location=WP%20Builds%20LIVE%20Page&amp;path=%2Fcalendar%2Faction%2Fcompose&amp;rru=addevent&amp;startdt=2023-10-18T14%3A00%3A00%2B00%3A00&amp;subject=Gato%20GraphQL%20Webinar%20Series%20%231">Outlook</a> / <a href="https://outlook.office.com/calendar/action/compose?allday=false&amp;body=Introduction%20to%20Gato%20GraphQL%2C%20Running%20queries%20in%20the%20admin%2C%20Creating%20API%20endpoints%2C%20Access%20Control%2C%20Caching.%0Ahttps%3A%2F%2Fwpbuilds.com%2Flive&amp;enddt=2023-10-18T14%3A59%3A00%2B00%3A00&amp;location=WP%20Builds%20LIVE%20Page&amp;path=%2Fcalendar%2Faction%2Fcompose&amp;rru=addevent&amp;startdt=2023-10-18T14%3A00%3A00%2B00%3A00&amp;subject=Gato%20GraphQL%20Webinar%20Series%20%231">365</a></p>
<hr>
<p>The series will span over 5 sessions, going deeply into solving 20 problems that we usually encounter when building our WordPress sites.</p>
<p>Below is the program for each session (they all start at 3pm UK time).</p>
<h2>1st Episode: Wed 18th October</h2>
<p><strong>“Introduction to Gato GraphQL, Running queries in the admin, Creating API endpoints, Access Control, Caching”</strong></p>
<p><ins>Live demo:</ins></p>
<ol>
<li>Searching WP data <em>(eg: finding posts or users by metadata)</em></li>
<li>Querying dynamic data</li>
<li>Complementing WP-CLI <em>(eg: selecting on which resources to apply a command)</em></li>
<li>Publishing an API endpoint without any PHP code, and making it password-protected or private</li>
<li>Caching the API response without using 3rd-party libraries</li>
</ol>
<h2>2nd Episode: Wed 25th October</h2>
<p><strong>“Integrating with Gutenberg, Customizing content for users, Duplicating posts”</strong></p>
<p><ins>Live demo:</ins></p>
<ol start="6">
<li>Feeding data to custom blocks from your application</li>
<li>Retrieving data for blocks for both client-side rendering (CSR) and server-side rendering (SSR), using DRY logic!</li>
<li>Retrieving and exposing structured data from blocks</li>
<li>Mapping JavaScript components to blocks</li>
<li>Sending personalized emails</li>
<li>Customizing content for different users</li>
<li>Duplicating a blog post, and also multiple blog posts at once</li>
</ol>
<h2>3rd Episode: Wed 29th November</h2>
<p><strong>“Updating content in bulk, Automating tasks”</strong></p>
<p><ins>Live demo:</ins></p>
<ol start="13">
<li>Adapting content in bulk <em>(eg: replacing a string in all posts, as when migrating the site's domain)</em></li>
<li>Automating admin tasks <em>(eg: automatically inserting a mandatory block whenever missing)</em></li>
<li>Adding a custom call-to-action block to all posts (before a campaign), and removing it (after the campaign)</li>
<li>Sending a notification when there's a new post, and a daily summary of activity to your email</li>
</ol>
<h2>4th Episode: Wed 6th December</h2>
<p><strong>“Translating content, Interacting with external services, Importing/distributing content”</strong></p>
<p><ins>Live demo:</ins></p>
<ol start="17">
<li>Translating a blog post (at the block-property level!), and also multiple blog posts at once</li>
<li>Interacting with external services <em>(eg: combining data from Mailchimp subscribers and website users)</em></li>
<li>Importing a post from another WordPress site</li>
<li>Distributing content to multiple downstream sites <em>(eg: syncing data within a multisite)</em></li>
</ol>
<h2>5th Episode: Wed 13th December</h2>
<p><strong>“Extending the GraphQL schema”</strong></p>
<p>We will learn how to create an extension plugin, containing resolvers that fetch custom data, to power our themes, plugins and applications.</p>
<hr>
<h2>See you there!?</h2>
<p>I hope so!</p>
<p>👋 Ciao,<br/>
Leo</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      😲 15 things (you didn’t know) you can do with GraphQL in WordPress
      
    </title>
    <link href="https://gatographql.com/blog/15-things-you-didnt-know-you-can-do-with-graphql-in-wordpress/"/>
    <updated>2023-10-03T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/15-things-you-didnt-know-you-can-do-with-graphql-in-wordpress/</id>
    <content type="html"><![CDATA[
      <p>I was invited to present Gato GraphQL on <a href="https://malaysia.wordcamp.org/2023/">WordCamp Malaysia 2023</a> last September, and the video of the talk is now live:</p>
<p><a href="https://wordpress.tv/2023/10/01/15-things-you-didnt-know-you-can-do-with-graphql-in-wordpress/">15 things (you didn’t know) you can do with GraphQL in WordPress</a>.</p>
<p>Here is the video:</p>
<iframe width="1206" height="678" src="https://www.youtube.com/embed/4gDkunLl-rQ" title="15 things (you didn’t know) you can do with GraphQL in WordPress" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<p>Timestamps:</p>
<p><strong>[00:00]</strong> Intro</p>
<p><strong>[00:49]</strong> What we usually know about using GraphQL in WordPress</p>
<p><strong>[02:43]</strong> <strong>Exploring Gato GraphQL in the wp-admin:</strong></p>
<ul>
<li><strong>[02:53]</strong> Private GraphiQL client</li>
<li><strong>[04:00]</strong> Private Interactive schema client</li>
<li><strong>[04:36]</strong> Public GraphiQL client</li>
<li><strong>[05:39]</strong> Public Interactive schema client</li>
<li><strong>[06:19]</strong> Custom endpoints</li>
<li><strong>[06:52]</strong> Persisted queries</li>
</ul>
<p><strong>[08:14]</strong> <strong>15 things we can do with Gato GraphQL in WordPress:</strong></p>
<ul>
<li><strong>[08:51]</strong> Intro to Recipes section</li>
<li><strong>[09:29]</strong> (#1) Search WP data <em>(eg: finding posts or users by metadata)</em></li>
<li><strong>[12:40]</strong> (#2) Complement WP-CLI <em>(eg: selecting on which resources to apply a command)</em></li>
<li><strong>[14:10]</strong> (#3) Send personalized emails</li>
<li><strong>[16:18]</strong> (#4) Retrieve data for blocks for both CSR and SSR (using DRY logic!) <em>[skip demo]</em></li>
<li><strong>[16:40]</strong> (#5) Map JavaScript components to blocks <em>[skip demo]</em></li>
<li><strong>[16:49]</strong> (#6) Duplicate a blog post</li>
<li><strong>[18:22]</strong> (#7) Customize content for different users <em>[skip demo]</em></li>
<li><strong>[18:28]</strong> (#8) Adapt content in bulk <em>(eg: replacing a string in all posts, as when migrating the site's domain)</em></li>
<li><strong>[20:14]</strong> (#9) Automate admin tasks <em>(eg: inserting a mandatory block whenever missing) [skip demo]</em></li>
<li><strong>[20:53]</strong> (#10) Add a custom CTA block before a campaign to all posts, and remove it afterwards <em>[skip demo]</em></li>
<li><strong>[20:56]</strong> (#11) Translate a blog post (at the block-property level!)</li>
<li><strong>[23:13]</strong> (#12) Send a notification when there's a new post, and a daily summary of activity to your email <em>[skip demo]</em></li>
<li><strong>[23:17]</strong> (#13) Combine data from Mailchimp subscribers and website users <em>[skip demo]</em></li>
<li><strong>[23:24]</strong> (#14) Import a post from another WordPress site <em>[skip demo]</em></li>
<li><strong>[23:26]</strong> (#15) Distribute content to multiple downstream sites <em>(eg: sync data within a multisite) [skip demo]</em></li>
</ul>
<p><strong>[23:34]</strong> Conclusion</p>
<p><strong>[23:53]</strong> <strong>Q&amp;A:</strong></p>
<ul>
<li><strong>[23:54]</strong> &quot;What prompted you to build this plugin? Was there any problem that you encountered as a developer, so you decided to create this plugin?&quot;</li>
<li><strong>[25:13]</strong> &quot;Is it possible to do it with the REST API? For instance Gato REST API?&quot;</li>
<li><strong>[25:52]</strong> &quot;The part with the tables with the relationships [The GraphQL schema], what is that about?&quot;</li>
<li><strong>[27:58]</strong> &quot;[About the GraphQL schema] Is it automated, or do we need to do manual mapping?&quot;</li>
<li><strong>[29:47]</strong> &quot;Can it be used to power an AI assistant? (Using GraphQL instead of the REST API)&quot;</li>
</ul>
<p>These are the slides:</p>
<iframe src="https://slides.com/leoloso/graphql-in-wordpress/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
<p>Enjoy!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🎉 Gato GraphQL v1.0 is finally out!
      
    </title>
    <link href="https://gatographql.com/blog/gatographql-v1.0-is-finally-out/"/>
    <updated>2023-09-07T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/gatographql-v1.0-is-finally-out/</id>
    <content type="html"><![CDATA[
      <p>After a really long time (spanning several years), development of the Gato GraphQL plugin has finally reached <code>v1.0</code>!</p>
<p>Yaaaaaaaaaaay 🎉🍾🎊🥳🍻👏🥂🎈🙌</p>
<p>Alongside the release, we have also launched this current website, <a href="/">gatographql.com</a>.</p>
<p>The plugin has been renamed from the previous &quot;GraphQL API for WordPress&quot; (even tough this old name still appears in all previous blog posts), and it features a brand-new logo:</p>
<p><img src="/assets/GatoGraphQL-logo-suki.png" alt="New Gato GraphQL logo" title="New Gato GraphQL logo"></p>
<p>Starting from this version, the plugin will be released in the <a href="https://wordpress.org/plugins/">WordPress plugins directory</a> (submission process currently ongoing), so you'll be able to install the plugin directly from your WordPress dashboard.</p>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/1.0.6">Version 1.0 brings plenty of improvements</a>, including the <strong>integration with the (Gutenberg) block editor</strong>, support for <strong>private and password-protected endpoints</strong>, and the <strong>availability of (commercial) extensions</strong> to extend the GraphQL schema and provide further functionality.</p>
<p><img src="https://raw.githubusercontent.com/GatoGraphQL/GatoGraphQL/1.0.5/layers/GatoGraphQLForWP/plugins/gatographql/docs/images/releases/v1.0/extensions-page.png" alt="The brand-new Extensions page" title="The brand-new Extensions page"></p>
<p>Head over to the <a href="/download">Downloads</a> page, and check it out!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🥳 GraphQL API v0.10 has been released
      
    </title>
    <link href="https://gatographql.com/blog/released-graphql-api-v010/"/>
    <updated>2023-02-16T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/released-graphql-api-v010/</id>
    <content type="html"><![CDATA[
      <p>Version 0.10 of the GraphQL API for WordPress has been released! 🙏</p>
<p>This version:</p>
<ul>
<li>Completes the customization of data via the Schema Configuration</li>
<li>Adds more documentation</li>
</ul>
<p>Browse the <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/0.10.0">release notes in GitHub</a>.</p>
<p><a class="button rounded" href="https://github.com/GatoGraphQL/GatoGraphQL/releases/download/0.10.0/graphql-api.zip">👉🏼 Download GraphQL API for WordPress v0.10</a></p>
<p>Enjoy!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🤔 Why did the new GraphQL API take 1.5 years to be released?
      
    </title>
    <link href="https://gatographql.com/blog/why-did-releasing-graphql-api-v09-take-so-long/"/>
    <updated>2023-01-26T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/why-did-releasing-graphql-api-v09-take-so-long/</id>
    <content type="html"><![CDATA[
      <p>Version <code>0.9</code> of the GraphQL API for WordPress was <a href="/blog/released-graphql-api-v09">just released</a>. It took almost 1.5 years of development, and over 16000 commits, to be ready. That's a long time indeed!</p>
<p>Upon sharing the announcement on Hacker News, I <a href="https://news.ycombinator.com/item?id=34354179#34355592">got the following question</a>:</p>
<blockquote>
<p>[...] I'm curious to know what took 16k commits. The projects that I've been on with more then ten thousand commits had many dozens or hundreds of folks working full time. [...] Is there some complexity that needed to be overcome that the post doesn't get into?</p>
</blockquote>
<!-- As a [response to that question](https://news.ycombinator.com/item?id=34354179#34357827), we are told that developing the WP REST API required only 1/4th of the number of commits:

> For comparison, the WordPress REST API was about 4k commits over ~4 years or so (prior to us merging it into WordPress itself): https://github.com/WP-API/WP-API
>
> (That said, commit count is a pretty useless metric.) -->
<p>The commit count is not a very reliable metric, as I might just do a very simple change and push that as a single commit. Many of those 16k commits were <code>&quot;typo&quot;</code> commits, or just improved a description in some <code>README</code>.</p>
<p>Nevertheless, the commit count does give an idea of the actual effort involved. There were also plenty of commits packed with modifications, including dozens, and even hundres of changes at a time. The changes between versions <code>0.8</code> and <code>0.9</code> are indeed huge, and that took effort and time to pull out.</p>
<p>In this blog post, I'll describe what those changes are, as to explain why it took so long. And in doing so, I'll also give a preview of some advanced features that were added to the codebase, and which will see the light of the day with the upcoming version <code>1.0</code>.</p>
<!-- It's no coincidence that the release notes for version `0.9` are over 40 minutes reading time! -->
<h2>Background of the GraphQL server</h2>
<p>First, I'll share a bit of the history of the engine, and technical details of how it works.</p>
<p>(This is mostly relevant to developers; if you're not interested in technical stuff, be welcome to skip to the next section.)</p>
<p>The GraphQL API for WordPress is based on top of PoP, an engine that renders components in PHP (similar to React or Vue on JavaScript). Its dependency on this engine is absolute, which is why the plugin is hosted under the <a href="https://github.com/GatoGraphQL/GatoGraphQL"><code>GatoGraphQL/GatoGraphQL</code> monorepo in GitHub</a>.</p>
<p>Under the hood, this dependency looks like this:</p>
<p>The GraphQL API for WordPress resolves a GraphQL query by first <a href="https://graphql-by-pop.com/docs/architecture/using-components-instead-of-graphs.html">transforming it into an equivalent component model</a>, which PoP then resolves by fetching all required data, and then <a href="https://graphql-by-pop.com/docs/architecture/dataloading-engine.html#analyzing-the-time-complexity-of-the-solution">this data is given the shape of the GraphQL query</a>.</p>
<p>When I started working on PoP sometime around 2013/2014, there was no GraphQL, and the methodology for resolving a component model into data was designed and implemented from scratch. The lack of having a model to follow (such as GraphQL for concepts, and the <a href="https://github.com/graphql/graphql-js"><code>graphql-js</code> reference project</a> for an implementation) has been both a hindrance and a blessing, as I'll explain later on.</p>
<p>PoP was initially designed to render the whole website as HTML on the server-side, while exposing the raw data in JSON format when appending <code>?output=json</code> to the URL of the page, and further selecting what data to retrieve (settings, DB object data) with additional URL params.</p>
<p>Please click on the following links (all of them pointing to the same webpage, just with different URL params) and notice how they differ:</p>
<ul>
<li>HTML content: <a href="https://www.mesym.com/en/posts/">mesym.com/en/posts/</a></li>
<li>Raw JSON data (settings + DB): <a href="https://www.mesym.com/en/posts/?output=json">mesym.com/en/posts/?output=json</a></li>
<li>Raw JSON data (DB): <a href="https://www.mesym.com/en/posts/?output=json&amp;module=data">mesym.com/en/posts/?output=json&amp;module=data</a></li>
</ul>
<p>When clicking on the last link, a realization hits home: This is pretty much GraphQL! The only big difference is that the data in the response is implicit, as it has been already defined by the components (in PHP) that were included in the page. GraphQL, instead, allows us to decide what data to fetch via a query.</p>
<p>So when I learnt about GraphQL sometime around 2019, it was a no brainer for me to have PoP also satisfy a GraphQL server. All it had to do was to accept the GraphQL query as input, and create a component model on-the-fly based on the query.</p>
<p>And that's what I did. And it worked well. But it was slow, because PoP understood its own input format, so the GraphQL query had to be adapted to the PoP format:</p>
<ol>
<li>Parse the GraphQL query; then</li>
<li>Transform the query into the PoP format; then</li>
<li>Parse the PoP format</li>
</ol>
<p>Parsing the GraphQL query was then done twice (once for GraphQL, once for PoP), and the PoP format was not being resolved via an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a>, but just by parsing the query string time and again. (Not using an AST was terrible coding, but I didn't have a spec to follow, and its development happened organically, where a simple <code>substr(...)</code> would save the day, every day.)</p>
<p>This is why I say that not having the GraphQL spec was a hindrance, as my solution was slow (and this was the situation by version <code>0.8</code>). So I decided to fix it.</p>
<h2>Converting the engine into GraphQL-first</h2>
<p>The solution I decided upon is to have PoP natively speak the GraphQL language. Then, passing a GraphQL query to PoP as input would already be converted to the component model, without the need of any additional adapter, or doing things twice.</p>
<p>This meant that the PoP project had to be repurposed, from being a PHP library that renders components for websites in the server-side that was adapted to resolve GraphQL queries, to actually becoming a GraphQL server.</p>
<p>The codebase then underwent a massive transformation, introducing the GraphQL AST as the foundation to communicate state across all PHP services in the engine. GraphQL AST objects are now the inputs to PoP (instead of query strings).</p>
<p>Other GraphQL servers in PHP rely on <a href="https://github.com/webonyx/graphql-php"><code>graphql-php</code></a>, but plugin GraphQL API for WordPress does not. This is bad news concerning maintenance effort (as I can't reuse what someone else has coded), but good news concerning independence: I can decide to add custom features to my plugin at my own speed, and under my own criterion (which is why the plugin already provides the <a href="/guides/augment/oneof-input-object/">&quot;oneof&quot; input object</a>).</p>
<p>And as will be shown in the section below, this is a great advantage.</p>
<!-- As a side not, PoP can possibly still render components as HTML, as to produce a website in the server-side. However, GraphQL is meant to handle pure object data (such as a post title), and not component configuration data (such as priting the title with CSS class `"title-big"`). So to satisfy this use case, I'd have to implement the adapter in the opposite direction: from GraphQL query to component. That's currently a TODO that may or may not ever happen. (Anyone interested to take on this challenge?) -->
<h2>Incorporating original features to GraphQL</h2>
<p>GraphQL is normally associated with data fetching. Natually, you can retrieve any piece of data (posts, users, comments, etc) from the GraphQL API for WordPress:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  posts<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token attr-name">sort</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token constant">DATE</span><span class="token punctuation">,</span> <span class="token attr-name">order</span><span class="token punctuation">:</span> <span class="token constant">ASC</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    url</span><br><span class="highlight-line">    author <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      name</span><br><span class="highlight-line">      url</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">    comments <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      date</span><br><span class="highlight-line">      content</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But this is a low-hanging fruit. GraphQL can also be used for many other use cases, including data manipulation and transformation, and even placing GraphQL in a pipeline to mediate between services.</p>
<p>Some examples where GraphQL is useful are:</p>
<ul>
<li>Extracting information from one or more sources (such as users from the WordPress sites and the newsletter contact data from Mailchimp), combining the data, and analyzing it all together as a single dataset</li>
<li>Executing operations to adapt the content on the site:
<ul>
<li>As a one-off, as when migrating a site to another domain and replacing <code>&quot;www.myoldsite.com&quot;</code> to <code>&quot;mynewsite.com&quot;</code> everywhere in the content and metadata</li>
<li>On an ongoing basis, as to replace any <code>&quot;http://&quot;</code> to <code>&quot;https://&quot;</code> whenever a writer publishes a new blog post</li>
</ul>
</li>
<li>Connecting to the Google Translate API to translate all the blog posts to a different language</li>
<li>Sending a tweet automatically after a blog post is published</li>
</ul>
<!-- - Sending notifications (by email, Slack, etc) after something happened (a new post, comment, etc) -->
<p>PoP had been designed to support these other use cases, via features which are not (naturally) supported by GraphQL, such as:</p>
<ul>
<li>Supporting &quot;functionality&quot; fields (in addition to &quot;data&quot; fields), which are added to all types in the schema</li>
<li>Passing the result of a field as input to another field, within the same query</li>
<li>Composing directives, as to have a directive modify the behavior of another directive</li>
<li>Deciding to apply a directive or not dynamically, based on the value of the field</li>
</ul>
<!-- (such as a dynamic `@skip` or `@include` based on dynamic data, not on static variables) -->
<p>And I certainly did not want to remove these features from the GraphQL server: I had already coded them, and they are certainly valuable.</p>
<p>So the second reason why <code>v0.9</code> took so long is that I also had to find a way to incorporate these novel capabilities into GraphQL, in a way that did not break the GraphQL spec (for instance, introducing new elements to the GraphQL syntax was a no-go).</p>
<h2>An example of data manipulation in GraphQL</h2>
<p>The novel capabilities introduced to GraphQL in the plugin will become more visible in the near future, when version <code>1.0</code> is released. But you can already get a taste of some of them.</p>
<p>The following GraphQL query retrieves a list of user entries from an external REST API (which can be <code>@remove</code>d from the response); inputs this data into another field, right within the same query; extracts the email property from each entry; and finally transforms the email to upper case, but only if the language on that same entry is English or German:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token comment">###################################################################</span></span><br><span class="highlight-line"><span class="token comment"># Fetch data from a REST endpoint, extract the emails, and make</span></span><br><span class="highlight-line"><span class="token comment"># uppercase those ones from users with a special language.</span></span><br><span class="highlight-line"><span class="token comment">###################################################################</span></span><br><span class="highlight-line"><span class="token keyword">query</span> ExtractEmailsFromAPIAndUpperCaseSpecialOnes</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># Retrieve data from a REST API endpoint</span></span><br><span class="highlight-line">  <span class="token attr-name">userEntries</span><span class="token punctuation">:</span> _sendJSONObjectCollectionHTTPRequest<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://newapi.getpop.org/wp-json/newsletter/v1/subscriptions"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token comment"># @remove   # &lt;= Uncomment this directive to not print the API data</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">emails</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$__userEntries</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment"># Iterate all the entries, passing every entry</span></span><br><span class="highlight-line">    <span class="token comment"># (under the dynamic variable $userEntry)</span></span><br><span class="highlight-line">    <span class="token comment"># to each of the next 4 directives</span></span><br><span class="highlight-line">    <span class="token directive function">@underEachArrayItem</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">passValueOnwardsAs</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">userEntry</span>"</span></span><br><span class="highlight-line">      <span class="token attr-name">affectDirectivesUnderPos</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment"># Extract property "lang" from the entry</span></span><br><span class="highlight-line">      <span class="token comment"># via the functionality field `_objectProperty`,</span></span><br><span class="highlight-line">      <span class="token comment"># and pass it onwards as dynamic variable $userLang</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">_objectProperty</span>"</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">object</span><span class="token punctuation">:</span> <span class="token variable">$userEntry</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"lang"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"userLang"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment"># Execute functionality field `_inArray` to find out</span></span><br><span class="highlight-line">      <span class="token comment"># if $userLang is either "en" or "de", and place the</span></span><br><span class="highlight-line">      <span class="token comment"># result under dynamic variable $isSpecialLang</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">_inArray</span>"</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$userLang</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token string">"de"</span><span class="token punctuation">]</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"isSpecialLang"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment"># Extract property "email" from the entry</span></span><br><span class="highlight-line">      <span class="token comment"># and set it back as the value for that entry</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">_objectProperty</span>"</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">object</span><span class="token punctuation">:</span> <span class="token variable">$userEntry</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"email"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token attr-name">setResultInResponse</span><span class="token punctuation">:</span> <span class="token boolean">true</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment"># If $isSpecialLang is `true` then execute</span></span><br><span class="highlight-line">      <span class="token comment"># directive `@strUpperCase` </span></span><br><span class="highlight-line">      <span class="token directive function">@if</span><span class="token punctuation">(</span><span class="token attr-name">condition</span><span class="token punctuation">:</span> <span class="token variable">$isSpecialLang</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token directive function">@strUpperCase</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is the response (please notice how only certain emails were uppercased):</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"userEntries"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"abracadabra@ganga.com"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"de"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"longon@caramanon.com"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"es"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"rancotanto@parabara.com"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"en"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"quezarapadon@quebrulacha.net"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"fr"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"test@test.com"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"de"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"emilanga@pedrola.com"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token string">"fr"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"emails"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string">"ABRACADABRA@GANGA.COM"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"longon@caramanon.com"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"RANCOTANTO@PARABARA.COM"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"quezarapadon@quebrulacha.net"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"TEST@TEST.COM"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"emilanga@pedrola.com"</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Check it out by yourself! Press the &quot;Run&quot; button to execute the query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token comment">###################################################################</span></span><br><span class="highlight-line"><span class="token comment"># Fetch data from a REST endpoint, extract the emails, and make</span></span><br><span class="highlight-line"><span class="token comment"># uppercase those ones from users with a special language.</span></span><br><span class="highlight-line"><span class="token comment">###################################################################</span></span><br><span class="highlight-line"><span class="token keyword">query</span> ExtractEmailsFromAPIAndUpperCaseSpecialOnes <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># Retrieve data from a REST API endpoint</span></span><br><span class="highlight-line">  <span class="token attr-name">userEntries</span><span class="token punctuation">:</span> _sendJSONObjectCollectionHTTPRequest<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token string">"https://newapi.getpop.org/wp-json/newsletter/v1/subscriptions"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token comment"># @remove   # &lt;= Uncomment this directive to not print the API data</span></span><br><span class="highlight-line">  <span class="token attr-name">emails</span><span class="token punctuation">:</span> _echo<span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$__userEntries</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token comment"># Iterate all the entries, passing every entry</span></span><br><span class="highlight-line">    <span class="token comment"># (under the dynamic variable $userEntry)</span></span><br><span class="highlight-line">    <span class="token comment"># to each of the next 4 directives</span></span><br><span class="highlight-line">    <span class="token directive function">@underEachArrayItem</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">passValueOnwardsAs</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">userEntry</span>"</span></span><br><span class="highlight-line">      <span class="token attr-name">affectDirectivesUnderPos</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token comment"># Extract property "lang" from the entry</span></span><br><span class="highlight-line">      <span class="token comment"># via the functionality field `_objectProperty`,</span></span><br><span class="highlight-line">      <span class="token comment"># and pass it onwards as dynamic variable $userLang</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">_objectProperty</span>"</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">object</span><span class="token punctuation">:</span> <span class="token variable">$userEntry</span><span class="token punctuation">,</span> <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"lang"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"userLang"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token comment"># Execute functionality field `_inArray` to find out</span></span><br><span class="highlight-line">      <span class="token comment"># if $userLang is either "en" or "de", and place the</span></span><br><span class="highlight-line">      <span class="token comment"># result under dynamic variable $isSpecialLang</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">_inArray</span>"</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">value</span><span class="token punctuation">:</span> <span class="token variable">$userLang</span><span class="token punctuation">,</span> <span class="token attr-name">array</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token string">"de"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token attr-name">passOnwardsAs</span><span class="token punctuation">:</span> <span class="token string">"isSpecialLang"</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token comment"># Extract property "email" from the entry</span></span><br><span class="highlight-line">      <span class="token comment"># and set it back as the value for that entry</span></span><br><span class="highlight-line">      <span class="token directive function">@applyField</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token description string">"<span class="token language-markdown">_objectProperty</span>"</span></span><br><span class="highlight-line">        <span class="token attr-name">arguments</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">object</span><span class="token punctuation">:</span> <span class="token variable">$userEntry</span><span class="token punctuation">,</span> <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"email"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token attr-name">setResultInResponse</span><span class="token punctuation">:</span> <span class="token boolean">true</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token comment"># If $isSpecialLang is `true` then execute</span></span><br><span class="highlight-line">      <span class="token comment"># directive `@strUpperCase`</span></span><br><span class="highlight-line">      <span class="token directive function">@if</span><span class="token punctuation">(</span><span class="token attr-name">condition</span><span class="token punctuation">:</span> <span class="token variable">$isSpecialLang</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token directive function">@strUpperCase</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>I had mentioned that not being guided by GraphQL was a hindrance, but (in retrospect) also a blessing. This is because I didn't have the constraints of the GraphQL spec, so I could afford to dream of these novel capabilities.</p>
<p>And now that these features have been migrated to the GraphQL API for WordPress, it can be an incredibly useful ally for anything related to content retrieval, manipulation, and transformation for your WordPress site. (Even though they will be accessible only with the upcoming <code>v1.0</code>).</p>
<p>It took a while, but the effort was certainly worth it.</p>
<h2>Give it a try!</h2>
<p>Are you convinced that the long wait was worth it? I hope so!</p>
<p>Go ahead, download the plugin, and check it out:</p>
<p><a class="button rounded" href="/download/">Click here to go to the downloads page</a></p>
<p>Interested in getting news concerning its development, new documentation, and upcoming releases, including <code>v1.0</code>? Then be welcome to <a href="/newsletter/">subscribe to the newsletter</a>.</p>
<p>Want to explore the open source code in GitHub? <a href="https://github.com/GatoGraphQL/GatoGraphQL">Check out <code>GatoGraphQL/GatoGraphQL</code></a> (and be welcome to give it a star... We love stars! ⭐️⭐️⭐️)</p>
<p>Btw, what content transformations do you need to do in WordPress (for which you may be already using some dedicated commercial plugin)? Please <a href="/contact/">send me a message telling me your use case</a>.</p>
<p>If you like what you see, please share with your friends and colleagues, help spread the love ❤️.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🥳 GraphQL API v0.9 has been released!
      
    </title>
    <link href="https://gatographql.com/blog/released-graphql-api-v09/"/>
    <updated>2023-01-12T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/released-graphql-api-v09/</id>
    <content type="html"><![CDATA[
      <p>After almost 1.5 years of development, and over 16000 commits, a new version of the GraphQL API for WordPress has been finally released! 🥳</p>
<p><a class="button rounded" href="/download/">Click here to go to the downloads page</a></p>
<p>Version <code>0.9</code> is the biggest release in the history of the plugin. <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/f51fb69bcf36217ec123a9cf8809cb99ff6f25c8/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/CHANGELOG.md#090---12012013">Here is the changelog</a>, and here is the full breakdown of all the new features:</p>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/0.9.3">github.com/GatoGraphQL/GatoGraphQL/releases/tag/0.9.3</a></p>
<p>This document is pretty long (over 40 min reading time!), so below is a TL;DR with the most important changes.</p>
<h2>Significantly completed the GraphQL Schema</h2>
<p>The WordPress data model has been significantly mapped into the GraphQL schema.</p>
<p><img src="/images/releases/v09/graphql-schema.png" alt="GraphQL schema" title="GraphQL schema"></p>
<p>Among others, the schema has the following improvements:</p>
<ul>
<li>Query data from any CPT, including from any theme and plugin</li>
<li>Mapped custom taxonomies (tags and categories)</li>
<li>Created and return more suitable GraphQL types (eg: <code>HTML</code>, <code>URL</code>, <code>DateTime</code>)</li>
<li>Organized field args via input objects</li>
<li>Use oneof input objects to select an entity by different properties (eg: <code>id</code>, <code>slug</code>)</li>
<li>Return mutation payloads</li>
<li>Query settings (from <code>wp_options</code>) and meta values (for posts, users, comments, and taxonomies)</li>
</ul>
<h2>Custom scalars</h2>
<p>Support for custom <a href="https://graphql.org/learn/schema/#scalar-types">scalar types</a> has been added to the GraphQL server. Custom scalars allow you to better represent your data, whether for getting an input via a field argument, or printing a customized output in the response.</p>
<p>Several standard custom scalar types have been implemented, so they are readily-available to be used in your GraphQL schema:</p>
<ul>
<li><code>Date</code></li>
<li><code>DateTime</code></li>
<li><code>Email</code></li>
<li><code>HTML</code></li>
<li><code>URL</code></li>
<li><code>URLAbsolutePath</code></li>
</ul>
<h2>Custom enums</h2>
<p>Custom <a href="https://graphql.org/learn/schema/#enumeration-types">enum types</a> are now supported. Enums are a special kind of scalar that is restricted to a particular set of allowed values. This allows you to:</p>
<ul>
<li>Validate that any arguments of this type are one of the allowed values</li>
<li>Communicate through the type system that a field will always be one of a finite set of values</li>
</ul>
<p>Several enum types have been implemented, and used whenever appropriate in the GraphQL schema, including:</p>
<ul>
<li><code>CommentOrderByEnum</code></li>
<li><code>CommentStatusEnum</code></li>
<li><code>CommentTypeEnum</code></li>
<li><code>CustomPostOrderByEnum</code></li>
<li><code>CustomPostStatusEnum</code></li>
<li><code>MediaItemOrderByEnum</code></li>
<li><code>MenuOrderByEnum</code></li>
<li><code>TaxonomyOrderByEnum</code></li>
<li><code>UserOrderByEnum</code></li>
</ul>
<h2>Input Objects</h2>
<p>The GraphQL server now also supports <a href="https://graphql.org/learn/schema/#input-types">input types</a>, and you can add your own input objects to the GraphQL schema. Input objects allow you to pass complex objects as inputs to fields, which is particularly useful for mutations.</p>
<p>Several input objects were added wherever appropriate to the schema. For instance, fields to query data (such as <code>posts</code>, <code>users</code>, <code>comments</code>, etc) receive complex input objects under field args <code>filter</code>, <code>sort</code> and <code>pagination</code>, and fields that mutate data (such as <code>createPost</code>, <code>addCommentToCustomPost</code>, etc) receive an input object under field arg <code>input</code>.</p>
<h2>Oneof Input Objects</h2>
<p>The <a href="https://github.com/graphql/graphql-spec/pull/825">&quot;oneof&quot; input object</a> is a particular type of input object, where exactly one of the input fields must be provided as input, or otherwise it returns a validation error. This behavior introduces polymorphism for inputs.</p>
<p>For instance, the field <code>Root.post</code> now receives a field argument <code>by</code>, which is a oneof input object allowing is to retrieve the post via different properties, such as by <code>id</code> or by <code>slug</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">postByID</span><span class="token punctuation">:</span> post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token attr-name">postBySlug</span><span class="token punctuation">:</span> post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">slug</span><span class="token punctuation">:</span> <span class="token string">"hello-world"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The benefit is that a single field can then be used to tackle different use cases, so we can avoid creating a different field for each use case (such as <code>postByID</code>, <code>postBySlug</code>, etc), thus making the GraphQL schema leaner and more elegant.</p>
<p>Several Oneof Input Objects have been implemented:</p>
<ul>
<li><code>Root.customPost(by:)</code></li>
<li><code>Root.mediaItem(by:)</code></li>
<li><code>Root.menu(by:)</code></li>
<li><code>Root.page(by:)</code></li>
<li><code>Root.postCategory(by:)</code></li>
<li><code>Root.postTag(by:)</code></li>
<li><code>Root.post(by:)</code></li>
<li><code>Root.user(by:)</code></li>
</ul>
<h2>Operation Directives</h2>
<p>GraphQL operations (i.e. <code>query</code> and <code>mutation</code> operations) can now also receive directives.</p>
<h2>Restrict Directives to Specific Types</h2>
<p>(Field) directives can be restricted to be applied on fields of some specific type only. For instance, a directive <code>@strUpperCase</code> that transforms the field value to upper case makes sense on <code>String</code> fields only, not on <code>Int</code> or <code>Float</code> or <code>Boolean</code>. This restriction can now be declared in the directive resolver.</p>
<h2>Print the full path to the GraphQL query node producing errors</h2>
<p>The response now contains the full path to the nodes in the GraphQL query that return an error (under the subentry <code>extensions.path</code>), making it easier to find out the source of the problem.</p>
<p>For instance, in the following query, the directive <code>@nonExisting</code> does not exist:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  myField <span class="token directive function">@nonExisting</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The response is the following:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"errors"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"There is no directive with name 'nonExisting'"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"locations"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"column"</span><span class="token operator">:</span> <span class="token number">7</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"extensions"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"QueryRoot"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"myField @nonExisting"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">          <span class="token string">"@nonExisting"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token string">"myField @nonExisting"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token string">"query { ... }"</span></span><br><span class="highlight-line">        <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"PoP\\ComponentModel\\e20"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"root"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Enable unsafe default settings</h2>
<p>The GraphQL API for WordPress provides safe default settings:</p>
<ul>
<li>The single endpoint is disabled</li>
<li>The “sensitive” data elements in the GraphQL schema (such as <code>User.roles</code>, or filtering posts by <code>status</code>) are not exposed</li>
<li>Only a handful of the settings options and meta keys (for posts, users, etc) can be queried</li>
<li>The number of entities that can be queried at once is limited (for posts, users, etc)</li>
</ul>
<p>These safe default settings are needed to make &quot;live&quot; sites secure, to prevent malicious attacks. However, they are not needed when building &quot;static&quot; sites, where the WordPress site is not vulnerable to attacks (as when it's a development site on a laptop, sitting behind a secure firewall, or not exposed to the Internet in general).</p>
<p>Starting from <code>v0.9</code>, we can enable unsafe defaults by adding in <code>wp-config.php</code>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token function">define</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'GRAPHQL_API_ENABLE_UNSAFE_DEFAULTS'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>Alternatively, we can define this same key/value as an environment variable.</p>
<p>When enabling unsafe defaults, the default plugin settings are transformed like this:</p>
<ul>
<li>The single endpoint is enabled</li>
<li>The “sensitive” data elements are exposed in the GraphQL schema</li>
<li>All settings options and meta keys can be queried</li>
<li>The number of entities that can be queried at once is unlimited</li>
</ul>
<h2>Organize Custom Endpoints and Persisted Queries by Category</h2>
<p>When creating a Custom Endpoint or Persisted Query, we can add a &quot;GraphQL endpoint category&quot; to it, to organize all of our endpoints:</p>
<p><img src="/images/releases/v09/graphql-custom-endpoint-editor-with-categories.png" alt="Endpoint categories when editing a Custom Endpoint" title="Endpoint categories when editing a Custom Endpoint"></p>
<p>For instance, we can create categories to manage endpoints by client, application, or any other required piece of information:</p>
<p><img src="/images/releases/v09/graphql-endpoint-categories.png" alt="List of endpoint categories" title="List of endpoint categories"></p>
<p>On the list of Custom Endpoints and Persisted Queries, we can visualize their categories and, clicking on any category link, or using the filter at the top, will only display all entries for that category.</p>
<p><img src="/images/releases/v09/graphql-custom-endpoints-with-categories.png" alt="List of Custom Endpoints with their categories" title="List of Custom Endpoints with their categories"></p>
<h2>Query schema extensions via introspection</h2>
<p>Custom metadata attached to schema elements can now be queried via field <code>extensions</code>.</p>
<p>All introspection elements of the schema have been upgraded with the new field, each of them returning an object of a corresponding &quot;<code>Extensions</code>&quot; type, which exposes the custom properties for that element.</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token comment"># Using "_" instead of "__" in introspection type name to avoid errors in graphql-js</span></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">_SchemaExtensions</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># Is the schema being namespaced?</span></span><br><span class="highlight-line">  <span class="token attr-name">isNamespaced</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">__Schema</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">extensions</span><span class="token punctuation">:</span> _SchemaExtensions<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">_NamedTypeExtensions</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># The type name</span></span><br><span class="highlight-line">  <span class="token attr-name">elementName</span><span class="token punctuation">:</span> String<span class="token operator">!</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># The "namespaced" type name</span></span><br><span class="highlight-line">  <span class="token attr-name">namespacedName</span><span class="token punctuation">:</span> String<span class="token operator">!</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># Enum-like "possible values" for EnumString type resolvers, `null` otherwise</span></span><br><span class="highlight-line">  <span class="token attr-name">possibleValues</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token operator">!</span><span class="token punctuation">]</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># OneOf Input Objects are a special variant of Input Objects where the type system asserts that exactly one of the fields must be set and non-null, all others being omitted.</span></span><br><span class="highlight-line">  <span class="token attr-name">isOneOf</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">__Type</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># Non-null for named types, null for wrapping types (Non-Null and List)</span></span><br><span class="highlight-line">  <span class="token attr-name">extensions</span><span class="token punctuation">:</span> _NamedTypeExtensions</span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">_DirectiveExtensions</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># If no objects are returned in the field (eg: because they failed validation), does the directive still need to be executed?</span></span><br><span class="highlight-line">  <span class="token attr-name">needsDataToExecute</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># Names or descriptions of the types the field directives is restricted to, or `null` if it supports any type (i.e. it defines no restrictions)</span></span><br><span class="highlight-line">  <span class="token attr-name">fieldDirectiveSupportedTypeNamesOrDescriptions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token operator">!</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">__Directive</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">extensions</span><span class="token punctuation">:</span> _DirectiveExtensions<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">_FieldExtensions</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">isGlobal</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># Useful for nested mutations</span></span><br><span class="highlight-line">  <span class="token attr-name">isMutation</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment"># `true` => Only exposed when "Expose “sensitive” data elements" is enabled</span></span><br><span class="highlight-line">  <span class="token attr-name">isSensitiveDataElement</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">__Field</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">extensions</span><span class="token punctuation">:</span> _FieldExtensions<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">_InputValueExtensions</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">isSensitiveDataElement</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">__InputValue</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">extensions</span><span class="token punctuation">:</span> _InputValueExtensions<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">_EnumValueExtensions</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">isSensitiveDataElement</span><span class="token punctuation">:</span> Boolean<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">extend</span> <span class="token keyword">type</span> <span class="token class-name">__EnumValue</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">extensions</span><span class="token punctuation">:</span> _EnumValueExtensions<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Finished decoupling the GraphQL server code from WordPress</h2>
<p>The underlying GraphQL server powering the plugin can now be installed and executed as a standalone PHP component, i.e. independently of WordPress.</p>
<p>This opens the doors to using the GraphQL API with other frameworks (eg: Laravel), and on any PHP environment, whether WordPress is available or not (such as when executing a Continous Integration task).</p>
<h2>Browse documentation when editing a Schema Configuration, Custom Endpoint and Persisted Query</h2>
<p>All the blocks shown when editing a Schema Configuration, Custom Endpoint and Persisted Query now have an &quot;info&quot; button which, when clicked, displays documentation on a modal window.</p>
<p><img src="/images/releases/v09/modal-window-with-module-doc-1.png" alt="Clicking on an 'info' button..." title="Clicking on an 'info' button..."></p>
<p><img src="/images/releases/v09/modal-window-with-module-doc-2.png" alt="...opens a modal window with documentation" title="...opens a modal window with documentation"></p>
<h2>Plenty more</h2>
<p>To discover all the other new features, review the <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/tag/0.9.3">full description of the new release</a>, or browse the <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/f51fb69bcf36217ec123a9cf8809cb99ff6f25c8/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/CHANGELOG.md#090---12012013">changelog</a>.</p>
<p>And <a href="/download">download the plugin from here</a>.</p>
<p>If you like what you see, please help spread the love ❤️</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🤔 Should GraphQL Be Different for Different Users?
      
    </title>
    <link href="https://gatographql.com/blog/should-graphql-be-different-for-different-users/"/>
    <updated>2022-06-02T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/should-graphql-be-different-for-different-users/</id>
    <content type="html"><![CDATA[
      <p>GraphQL is an interface to retrieve data from some origin, with the GraphQL spec defining the requirements for the interface. As long as these requirements are satisfied, GraphQL does not care how it is accomplished. The GraphQL server can then be implemented in JavaScript using promises, using a concurrent architecture based in Golang, mapped to an Excel file, or whatnot, and all of these can be valid implementations of the GraphQL spec.</p>
<p><img src="/images/graphql-for-be-devs.png" alt="GraphQL stands in-between the client and backend services" title="GraphQL stands in-between the client and backend services. Image source: &lt;a href='https://www.netlify.com/blog/2020/01/21/advice-from-a-graphql-expert/'&gt;netlify.com&lt;/a&gt;"></p>
<p>How is the server's engine implemented is not important for the successful execution of a GraphQL request, as the interaction between client and server is always the same, taking place by submitting a GraphQL query using a defined syntax, and obtaining a corresponding response in JSON format.</p>
<p>Now, when I say that the implementation is not important, I mean it from the perspective of the user of the API, who is simply intending to obtain data from the server. How the returned data was produced is of no interest.</p>
<p>But the situation changes for the server-side developer working on the API, for who the details of the implementation are indeed very important. If I code my GraphQL API in PHP, then I'll do my best for my API to be resolved as efficiently as possible, and to have an architectural design that is as elegant as possible, using the capabilities offered by PHP.</p>
<p><img src="/images/php-vs-java-vs-javascript.png" alt="PHP vs Java vs JavaScript" title="PHP vs Java vs JavaScript. Image source: &lt;a href='https://twitter.com/themarcba/status/1245273834577711104'&gt;@themarcba&lt;/a&gt;"></p>
<p>Then, we have a possible conflict of interests between the need to safeguard the API, and the expected capabilities by developers working on the API, who do not want features supported by the underlying language taken away from them (such as being able to execute recursive code).</p>
<p>This conflict became evident in issue <a href="https://github.com/graphql/graphql-spec/issues/929">#929: Allow recursive references in fragments</a>, which contends that GraphQL should not ban recursions in fragments.</p>
<p>In a past meetup from the GraphQL working group, Roman, who is the developer who raised the issue, expressed why he is in <a href="https://github.com/graphql/graphql-wg/blob/10387b5848c2b49fdab09c731e0dc3b92b7dc284/notes/2022/2022-02-03.md#allowing-recursive-references-in-fragments">disagreement with the limitation imposed by the spec</a>:</p>
<blockquote>
<p>I'm a server-side developer, and I feel like the spec speaks too much about server-side execution, whereas it should focus on what the client wants to be delivered - not how</p>
</blockquote>
<p>The rule banning recursions in fragments has been justified on the premise of keeping the public API secure. After all, GraphQL was created by Facebook in order to deliver data to their public-facing application, and users should not be able to exploit a flaw in the design of the API that could bring the service down.</p>
<p>GraphQL creator's Lee Byron expressed three major concerns:</p>
<blockquote>
<p>infinite recursion; limitations wouldn't just be specification - how should it halt and when</p>
<p>data validation; returning the same value multiple times, how is that represented in the data. Ideally you want to detect it's cyclic and halt straight away, but some servers cannot detect this and may loop many times before they detect something went wrong and stop</p>
<p>what's the cost of not having this; does it warrant these problems? No it doesn't; it's always possible for you to specify the number of levels deep in your query - that's effectively the desugared version of what we'd do if we were to handle this in GraphQL</p>
</blockquote>
<p>Coming from their own perspectives, both Roman and Lee are right. Lee Byron is worried about the security of the public GraphQL API. Avoiding recursive fragments is justified as to make sure that no malicious actors can take down the system by executing a never-ending cycling loop in the query, and even remove the chance of a team “self-DDoSing”, which could happen if they unintentionally publish a query that halts the system.</p>
<p>Roman, however, is concerned with the limitations to his own capabilities for creating a GraphQL API. Because Roman may be the only consumer of his API (i.e. a private API that is not exposed to users), or because his server may have the capability to detect and stop recurring cycles, then he believes the GraphQL limitation is harmful and not justifiable.</p>
<p>At the core of the discussion, the issue is not whether recursive fragments should be allowed or not, but something more fundamental: Who is GraphQL's target? If not a single group, could a single API specification satisfy the requirements from all of the different stakeholders? And if the conflict cannot be prevented, can at least be somehow remediated?</p>
<p>Let's explore these questions.</p>
<h2>Who is GraphQL's target?</h2>
<p>GraphQL is being used by different kinds of stakeholders, among which we can identify:</p>
<p><strong>1. API users</strong>: Those consuming data from some GraphQL endpoint, for whatever reason. For instance, we can all be API users of GitHub's <a href="https://docs.github.com/en/graphql">public GraphQL API</a>, as to retrieve data concerning our GitHub repos.</p>
<p><strong>2. Client-side devs:</strong> Those creating client-side applications which are powered by some GraphQL endpoint. For instance, developers building sites with <a href="https://www.gatsbyjs.com">Gatsby</a> rely on GraphQL to fetch the content for the site.</p>
<p><strong>3. Backend devs:</strong> Those creating the resolvers for the GraphQL API.</p>
<p>In addition, we must note that the GraphQL API can be public or private:</p>
<p><strong>Public API:</strong> Because anyone has access to the GraphQL endpoint, we must be concerned with security measures to avoid attacks by malicious actors.</p>
<p><strong>Private API:</strong> Because only intended actors are granted access to the API, there are no inherent security risks, and self-DDoSing can be easily avoided with good coding practices.</p>
<h2>Does a single API specification satisfy the requirements of all stakeholders?</h2>
<p>The issue raised by Roman can be interpreted like this: “If my GraphQL API is private, and I know exactly what I'm doing (having 100% certainty that my code will work as expected and no halting executions will be produced), then why can't I use recursions in fragments?”</p>
<p><img src="/images/xkcd-recursion.png" alt="Recursions @ xkcd" title="Recursions @ xkcd. Image source: &lt;a href='https://xkcd.com/1270/'&gt;xkcd&lt;/a&gt;"></p>
<p>An example of this situation happens whenever we use a GraphQL-powered framework for building static sites (such as Gatsby, <a href="https://nextjs.org">Next.js</a> or <a href="https://redwoodjs.com">RedwoodJS</a>), because the GraphQL API will often be private, and we cannot inadvertently DDoS our application and suffer adverse consequences (at most it will crash when building the static site on a development or staging environment).</p>
<p>Developers using the above set-up may perfectly wonder why the GraphQL spec forbids them from using benefitial features, which have no adverse consequences whatsoever <strong>for their set-up</strong>.</p>
<p>In conclusion, by banning recursive fragments, the GraphQL spec is imposing a security measure that applies to a selection of all potential uses of GraphQL, not all of them, as to be on the safe side.</p>
<h2>Could the GraphQL spec better satisfy all stakeholders?</h2>
<p>If different stakeholders have different requirements, how can the GraphQL spec satisfy all of them? (The idea is to avoid forking the spec and produce customized versions for specific targets.)</p>
<p>Let's explore a couple of ideas, where the first one would need to go through the spec-contribution process, while the second would not.</p>
<h3>Feature-toggle at the GraphQL spec level</h3>
<p>One possible route to take is to have the spec “suggest” but not “impose” rules. In this case, the rule forbidding recursions in fragments could be strongly suggested, but the feature would still be accepted.</p>
<p>Now, this solution would change the defaut condition of recursive fragments from “mandatory” to “optional”, which would produce two negative consequences:</p>
<ul>
<li>The API would be unsafe by default (the scenario that Lee Byron wants to avoid)</li>
<li>It would produce a breaking change, since a forbidden query would then be allowed</li>
</ul>
<p>Then, it would be better to revert the option on its head, by having recursions in fragments still banned by default but give the possibility to toggle a feature-flag that disables this behavior. Since the feature must be explicitly disabled, it will be done only by admins who know what they are doing.</p>
<p>As the feature is most valuable under certain set-ups, GraphQL servers and frameworks could decide if/how/when to offer the configuration. For instance, Gatsby could prominently display the option via some UI whenever creating static sites, and hide it otherwise.</p>
<p>The general idea is for the GraphQL spec to support “enabled but optional features”, which can be enabled/disabled via configuration, and their default state is the one they already have in the spec.</p>
<p>Banning recursive fragments would be one of them, and there could be other such features too, such as a <a href="https://github.com/graphql/graphql-spec/issues/101"><code>Map</code> type</a>, which was not accepted for the spec by Lee Byron <a href="https://github.com/graphql/graphql-spec/issues/101#issuecomment-170170967">because</a>:</p>
<blockquote>
<p>There are significant tradeoffs to a Map type vs a list of key/value pairs. One issue is paginating over the collection. Lists of values can have clear pagination rules while Maps which often have non-ordered key-value pairs are much more difficult to paginate.</p>
<p>Another issue is usage. Most often Map is used within APIs where one field of the value is being indexed, which is in my opinion is an API anti-pattern as indexing is an issue of storage and an issue of client caching but not an issue of transport. This anti-pattern concerns me. While there are some good uses for Maps in APIs, I fear that the common usage will be for these anti-patterns so I'm suggesting proceeding with caution.</p>
</blockquote>
<p>Lee Byron expressed his fear that the feature will be used as an anti-pattern. However, he also recognized that there are good uses for it. Then, as the issue garnered plenty of support by the community (with over 150 👍), developers could be given the option of explicitly enabling the addition of a <code>Map</code> type to their schemas, and deal with the consequences.</p>
<h3>Feature-toggle by GraphQL servers</h3>
<p>If the proposal above does not gather support since it is too risky for the GraphQL spec, an alternative is to implement it at the GraphQL server level. Then, GraphQL servers could provide a custom feature that disables recursions in fragments.</p>
<p>Generalizing the idea, GraphQL servers could offer to disable certain features from the spec, and enable others which are missing from the spec. For this behavior to not produce surprises, the servers must make sure that the default state is that one required by the spec, and the admin of the API must be made fully aware of the consequences of toggling the feature. (This is the strategy followed by the GraphQL API for WordPress for its “<a href="https://gatographql.com#features">innovative features</a>”.)</p>
<h2>Wrapping up</h2>
<p>As GraphQL has been increasingly becoming more popular, new frameworks supporting new capabilities have made it part of their stack, and new stakeholders (and new types of them) have got involved. Then, a specification initially created by Facebook to define how its applications would get data from its servers needs to increasingly contend with more use cases.</p>
<p>It is inevitable for conflicts to arise, where a set of stakeholders needs a feature that is counterproductive, or even harmful, to other stakeholders, as is the case with recursive fragments. What can be done to improve the situation, and avoid that unsatisfied stakeholders don't get disappointed with GraphQL?</p>
<p>I've argued that the spec could offer the chance to “disable” a feature, allowing admins who know what they are doing to remove some limitations as to satisfy their own requirements. Now, I myself don't agree with this solution, but I bring it out into the open nevertheless because this discussion needs to be had. Since this idea is controversial, a better alternative is for GraphQL servers to provide this behavior via custom features, which must be explicitly enabled.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🙅‍♀️ Why GraphQL should not be in WordPress core
      
    </title>
    <link href="https://gatographql.com/blog/why-graphql-should-not-be-in-wordpress-core/"/>
    <updated>2021-08-09T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/why-graphql-should-not-be-in-wordpress-core/</id>
    <content type="html"><![CDATA[
      <p>Yep, you read that title correctly. Even though I am myself the creator of a GraphQL server for WordPress, I've changed my mind concerning if WordPress should ship with GraphQL or not.</p>
<p>Until not long ago, I believed that <a href="/blog/why-wordpress-should-have-a-graphql-api-in-core/">GraphQL should be in WordPress core</a>. The logic was that contributors were spending time and effort on implementing functionality for the WP REST API (batch operations) which is native to GraphQL.</p>
<p>However, I have lately learnt some new information which made me think again, and now I believe WordPress should not ship with GraphQL, because of the added risks.</p>
<p><img src="/images/graphql-wordpress-threat.jpg" alt="GraphQL in WordPress core? 😁" title="GraphQL in WordPress core? 😁"></p>
<p>These are my reasons.</p>
<h2>1. It doesn't satisfy the 80/20 rule</h2>
<p>Historically, a certain functionality is added to WordPress core only if it satisfies <a href="https://wordpress.org/about/philosophy/">the 80/20 rule</a>, meaning that 80% or more of the users will use it.</p>
<p>Would that be the case with GraphQL? I think the answer is &quot;no&quot;, based on the precedent from the introduction of the WP REST API to WordPress 4.7.</p>
<p>In his talk <a href="https://youtu.be/OBVg5x8uQ6M">WordPress as Data, 5 Years In</a>, K. Adam White (main lead of the initial development and release of the WP REST API) described that the contributors expected the REST API to be widely used once it was released with core. But that didn't happen: developers kept creating WordPress sites the same way as before, paying little attention to &quot;headless&quot; or the REST API.</p>
<p>Fortunes changed only later, with the introduction of the Gutenberg editor in WordPress 5.0, which was based on the REST API. Could Gutenberg then justify the addition of GraphQL to WordPress core?</p>
<p><img src="/images/society-if-wp-had-a-rest-api-video.png" alt="Expected future with the REST API. Screenshot from K. Adam White's talk" title="Expected future with the REST API. Screenshot from K. Adam White's talk"></p>
<h2>2. Headless is already satisfied via the REST API</h2>
<p>The WordPress editor can be enhanced with a native GraphQL server, allowing block developers to use GraphQL (in addition to the existing REST API) to fetch data for their blocks. In addition, themes and plugins could make use of GraphQL to power their own internal functionality. These are strong reasons to add GraphQL to WordPress core.</p>
<p>However, WordPress already has the REST API, and <a href="https://stepzen.com/blog/are-rest-and-graphql-different">whatever you can do with GraphQL can also be done with REST</a>. Introducing GraphQL in addition to REST is akin to buying a BMW when you're already driving a Toyota. You will reach your destination faster, and the driving experience will be more appealing. But both cars will take you to where you want to go.</p>
<p>Because GraphQL will not provide a previously-unavailable functionality, then its inclusion in core is not fully justified. GraphQL would certainly enhance the experience of interacting with the API, but this could be perfectly considered plugin-land.</p>
<p><img src="/images/graphiql.gif" alt="GraphQL improves the experience of interacting with the API, but it doesn't create anything new" title="GraphQL improves the experience of interacting with the API, but it doesn't create anything new"></p>
<h2>3. WordPress themes and plugins can use <code>webonyx/graphql-php</code></h2>
<p>Public plugins cannot require a website to install either WPGraphQL or the GraphQL API for WP in order to use the plugin, since that will diminish their potential reach. As such, <a href="https://www.smashingmagazine.com/2021/04/making-graphql-work-in-wordpress/#use-graphql-api-if-distributing-blocks-via-a-plugin">public plugins cannot rely on GraphQL</a>, and that's a real pity.</p>
<p>I thought hard about this issue, and I came up with a potential solution: the <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/519">GraphQL API Private</a>, a self-contained GraphQL engine that plugins can embed for their own use, distributed as a Composer package. (I haven't started working on this project yet.)</p>
<p>But then, a few weeks ago, a GraphQL-powered WordPress plugin <a href="https://twitter.com/swashata/status/1418387987511996418">was released</a>. I wondered how the author did it: would it be using WPGraphQL or the GraphQL API for WP under the hood? So I checked <a href="https://plugins.trac.wordpress.org/browser/wpeform-lite/trunk/inc/GraphQL/Schema.php?rev=2570462">its source code</a> and, as it turns out, it's directly using <a href="https://github.com/webonyx/graphql-php"><code>webonyx/graphql-php</code></a>!</p>
<p>This is an interesting solution, which demonstrates that, with a bit of effort, developers currently do have access to GraphQL for their themes and plugins.</p>
<p>This plugin uses GraphQL to fetch its own data entities, and not those of WordPress (posts, users, comments, etc). Then, it doesn't need to recreate the GraphQL schema containing the WordPress data model, as done by WPGraphQL and the GraphQL API for WP (and eventually the GraphQL API Private). As such, relying on <code>webonyx/graphql-php</code> makes sense.</p>
<p><img src="/images/webonyx-graphql-php.png" alt="webonyx/graphql-php is a 'PHP port of GraphQL reference implementation'" title="webonyx/graphql-php is a 'PHP port of GraphQL reference implementation'"></p>
<h2>4. GraphQL presents additional risks</h2>
<p>All three issues above suggest that GraphQL would enhance WordPress, even though it's not extremely compelling. In this light, we could still add GraphQL to WordPress core, and either benefit from it or nothing happens.</p>
<p>But this 4th issue suggests that, if GraphQL will not add much value to WordPress, then it should not be added, because of its added risks.</p>
<p>GraphQL is susceptible to the following attack vectors (among others):</p>
<ul>
<li>The single endpoint provides access to all information from the website, so we could have private data unintentionally exposed.</li>
<li>The queries can be very complex and may overwhelm the web and database servers.</li>
<li>The same mutation can be executed multiple times in a single query, and multiple queries can be executed together in a single request, allowing attackers to attempt gaining access to the back-end by providing many combinations of user/passwords.</li>
</ul>
<p>These attacks can be really damaging. In his presentation <a href="https://www.youtube.com/watch?v=EVRf708-zq4">Damn GraphQL - Defending and Attacking APIs</a>, the cybersecurity researcher Dolev Farhi managed to bring down a WordPress site in less than 30 seconds, by attacking the WPGraphQL endpoint with a batch of complex queries.</p>
<p>The WPGraphQL team <a href="https://github.com/wp-graphql/wp-graphql/releases/tag/v1.3.6">fixed the issue immediately</a>. But how can we be sure that no other exploit can take place? (I mean not only WPGraphQL, but <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/865">the GraphQL API for WP too</a>.)</p>
<p>These attacks can happen with GraphQL, and not with REST, because GraphQL is more powerful than REST. While in REST the query is defined in advance and stored in the server, in GraphQL it is provided on runtime by the client (unless using <a href="/guides/special-features/persisted-queries">persisted queries</a>).</p>
<p>If website admins are sloppy configuring who can access the endpoint, or which data gets exposed, then bad things can happen. And due to the popularity of WordPress, which is used by millions of people who are not tech-savvy, then bad things will most likely happen.</p>
<p><img src="/images/damn-graphql-video.png" alt="Attacking the GraphQL endpoint to bring a WordPress site down. Screenshot from Dolev Farhi's talk" title="Attacking the GraphQL endpoint to bring a WordPress site down. Screenshot from Dolev Farhi's talk"></p>
<h2>Wrapping up</h2>
<p>Just to be sure: I am not advocating to not use GraphQL in WordPress (of course I am not!), but to use GraphQL responsibly. GraphQL is powerful, which means it is dangerous. When using GraphQL, we need to be sure we know what we are doing.</p>
<p>Shipping GraphQL in WordPress core would put it in the hands a lot of people, many of which will not be aware of its risks, and not take appropriate measures. It's a recipe for potential disaster. And as such, it is now my opinion, it should be avoided.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🚀 Released new version 0.8 of the GraphQL API for WordPress!
      
    </title>
    <link href="https://gatographql.com/blog/released-graphql-api-v08/"/>
    <updated>2021-07-21T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/released-graphql-api-v08/</id>
    <content type="html"><![CDATA[
      <p>Version <code>0.8</code> of the GraphQL API for WordPress is now <a href="/download">available for download</a>! 🎉</p>
<p>This is a huge release, which focuses on three areas:</p>
<ol>
<li>Refactoring the codebase to enable extensions</li>
<li>Further satisfying the GraphQL specification</li>
<li>Completing the GraphQL schema</li>
</ol>
<p>In addition, it supports the new WordPress 5.8, and contains plenty of bug fixes and improvements.</p>
<p>Please notice that this release <strong>contains breaking changes</strong>!</p>
<p>Below are the release notes. Quicklinks:</p>
<ul>
<li><a href="#heading-support-for-wordpress-5.8">Support for WordPress 5.8</a></li>
<li><a href="#heading-improved-support-for-php-8.0">Improved support for PHP 8.0</a></li>
<li><a href="#heading-simplified-the-codebase-using-container-services-everywhere">Simplified the codebase, using container services everywhere</a></li>
<li><a href="#heading-cache-is-saved-under-wp-content">Cache is saved under <code>wp-content</code></a></li>
<li><a href="#heading-a-fixed-schema-graphql-endpoint-was-introduced-to-power-the-wordpress-editor">A &quot;fixed schema&quot; GraphQL endpoint was introduced to power the WordPress editor</a></li>
<li><a href="#heading-further-support-of-field-types-in-the-schema">Further support of field types in the schema</a></li>
<li><a href="#heading-input-coercion-accept-a-single-value-when-a-list-is-expected">Input coercion: accept a single value when a list is expected</a></li>
<li><a href="#heading-further-completed-the-wordpress-schema">Further completed the WordPress schema</a>
<ul>
<li><a href="#heading-categories">Categories</a></li>
<li><a href="#heading-meta">Meta</a></li>
<li><a href="#heading-menus">Menus</a></li>
<li><a href="#heading-settings">Settings</a></li>
<li><a href="#heading-user-posts">User posts</a></li>
</ul>
</li>
<li><a href="#heading-added-unrestricted-admin-fields-to-the-graphql-schema">Added &quot;unrestricted&quot; admin fields to the GraphQL schema</a></li>
<li><a href="#heading-introduced-scalar-type-anyscalar">Introduced scalar type <code>AnyScalar</code></a></li>
<li><a href="#heading-settings-in-long-format">Settings in long format</a></li>
<li><a href="#heading-breaking-changes">Breaking changes</a>
<ul>
<li><a href="#heading-configuration-breaking-changes">Configuration breaking changes</a></li>
<li><a href="#heading-removed-non-standard-directives">Removed non-standard directives</a></li>
<li><a href="#heading-removed-modules">Removed modules</a></li>
</ul>
</li>
<li><a href="#heading-upcoming-roadmap">Upcoming Roadmap</a></li>
<li><a href="#heading-run-into-issues">Run into issues?</a></li>
</ul>
<hr>
<h2>Support for WordPress 5.8</h2>
<p>WordPress 5.8 <a href="https://github.com/WordPress/wordpress-develop/pull/1118">deprecates several filter hooks</a>, including <code>allowed_block_types</code> and <code>block_categories</code> (used by this plugin).</p>
<p>The affected hooks have been replaced:</p>
<ol>
<li><code>allowed_block_types</code> =&gt; <code>allowed_block_types_all</code></li>
<li><code>block_categories</code> =&gt; <code>block_categories_all</code></li>
</ol>
<h2>Improved support for PHP 8.0</h2>
<p>This release fixes a few issues when using PHP 8.0.</p>
<h2>Simplified the codebase, using container services everywhere</h2>
<p>The codebase for the GraphQL server has been refactored, to use a service container for registering all elements for the schema (type resolvers, field resolvers, interface resolvers, custom scalar resolvers, and others).</p>
<p>This is a milestone, which introduces a single approach for developing the plugin and its extensions, greatly simplifying their code and documentation.</p>
<p>Docs on how to create custom extensions for the GraphQL API can finally be written. Work on them will start soon, and will be published on the <a href="/guides">guides</a> section.</p>
<h2>Cache is saved under <code>wp-content</code></h2>
<p>The plugin caches results to disk to optimize performance.</p>
<p>The cached files were previously stored under a system folder, out of view to the admin user. From now on, they are stored under <code>wp-content/graphql-api/cache/</code>.</p>
<h2>A &quot;fixed schema&quot; GraphQL endpoint was introduced to power the WordPress editor</h2>
<p>Now, there are 2 endpoints in the <code>wp-admin</code>:</p>
<ol>
<li><code>GRAPHQL_API_ADMIN_CONFIGURABLESCHEMA_ENDPOINT</code></li>
<li><code>GRAPHQL_API_ADMIN_FIXEDSCHEMA_ENDPOINT</code></li>
</ol>
<p>With <code>GRAPHQL_API_ADMIN_CONFIGURABLESCHEMA_ENDPOINT</code>, the GraphQL schema is modified by user preferences, such as being namespaced or not, having types/directives enabled or not, and others.</p>
<p>With <code>GRAPHQL_API_ADMIN_FIXEDSCHEMA_ENDPOINT</code>, the GraphQL schema is not modified by user preferences, always exposing all types, fields and directives, including the &quot;unrestricted&quot; admin fields.</p>
<p>The fixed endpoint enables Gutenberg blocks to query all fields, independently of those being enabled or not by the user, and with unrestricted access.</p>
<h2>Further support of field types in the schema</h2>
<p>Support for lists as field types has been expanded, now supporting the following features:</p>
<ul>
<li>Lists with non-null items: <code>[String!]</code></li>
<li>Lists of lists: <code>[[String]]</code></li>
<li>Any combination of them: <code>[[String!]!]</code></li>
</ul>
<h2>Input coercion: accept a single value when a list is expected</h2>
<p>We can now input a single value in the GraphQL query where a list is expected, as <a href="https://spec.graphql.org/draft/#sec-List.Input-Coercion">defined in the GraphQL spec</a>.</p>
<p>For instance, these queries are now equivalent:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> InputSingleValue <span class="token punctuation">{</span></span><br><span class="highlight-line">  posts<span class="token punctuation">(</span><span class="token attr-name">filter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">ids</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">query</span> InputListOfSingleItem <span class="token punctuation">{</span></span><br><span class="highlight-line">  posts<span class="token punctuation">(</span><span class="token attr-name">filter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">ids</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Further completed the WordPress schema</h2>
<p>Additional entities from the WordPress data model have been added to the GraphQL schema:</p>
<p><img src="/images/releases/v08/graphql-schema-v08.png" alt="GraphQL schema" title="GraphQL schema"></p>
<p>Let's see what new elements have been added.</p>
<h3>Categories</h3>
<p>Categories have been mapped, via the new <code>PostCategory</code> type, and the new fields:</p>
<ul>
<li><code>Root.postCategories: [PostCategory]</code></li>
<li><code>Root.postCategory: PostCategory</code></li>
<li><code>Post.categories: [PostCategory]</code></li>
</ul>
<p>For instance, this query retrieves the categories for the posts:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    categories <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      name</span><br><span class="highlight-line">      url</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>A mutation field, to assign categories to posts, has also been added:</p>
<ul>
<li><code>MutationRoot.setCategoriesOnPost: Post</code></li>
</ul>
<p>And an input <code>categories</code> has been added to the mutation fields for posts:</p>
<ul>
<li><code>MutationRoot.createPost</code></li>
<li><code>MutationRoot.updatePost</code></li>
<li><code>Post.update</code> (when nested mutations are enabled)</li>
</ul>
<h3>Meta</h3>
<p>Custom post, user, comment and taxonomy meta values can now be queried, via the new fields:</p>
<ul>
<li><code>Post.metaValue: AnyScalar</code></li>
<li><code>Post.metaValues: [AnyScalar]</code></li>
<li><code>User.metaValue: AnyScalar</code></li>
<li><code>User.metaValues: [AnyScalar]</code></li>
<li><code>Comment.metaValue: AnyScalar</code></li>
<li><code>Comment.metaValues: [AnyScalar]</code></li>
<li><code>PostCategory.metaValue: AnyScalar</code></li>
<li><code>PostCategory.metaValues: [AnyScalar]</code></li>
<li><code>PostTag.metaValue: AnyScalar</code></li>
<li><code>PostTag.metaValues: [AnyScalar]</code></li>
</ul>
<p>For instance, this query retrieves the meta <code>last_name</code> for the users:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  users <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    <span class="token attr-name">lastName</span><span class="token punctuation">:</span> metaValue<span class="token punctuation">(</span><span class="token attr-name">key</span><span class="token punctuation">:</span> <span class="token string">"last_name"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Since meta values can be anything (string, integer, float, or boolean) they have been mapped via the newly-introduced generic scalar type <code>AnyScalar</code>.</p>
<p>Meta values may be public or private. Which meta keys can be queried must be explicitly configured in the settings page:</p>
<div class="img-width-1024" markdown=1>
<p><img src="/assets/guides/upstream/settings-custompost-meta-entries.png" alt="Defining the entries" title="Defining the entries"></p>
</div>
<p>By default, the list of allowed meta keys is empty.</p>
<h3>Menus</h3>
<p>Menus have been mapped, via the new <code>Menu</code> type, and the new field <code>Root.menu</code>.</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  menu<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">176</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    itemDataEntries</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Settings</h3>
<p>The settings from the site (stored in table <code>wp_options</code>) can be queried via the new field <code>Root.option: AnyScalar</code>.</p>
<p>For instance, this query retrives the site's name:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">siteName</span><span class="token punctuation">:</span> optionValue<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"blogname"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Which options can be accessed must be explicitly configured in the settings page:</p>
<p><img src="/images/releases/v08/schema-configuration-settings-entries.jpg" alt="Defining the entries for the Settings" title="Defining the entries for the Settings"></p>
<p>By default, only the following options can be queried:</p>
<ul>
<li><code>&quot;home&quot;</code></li>
<li><code>&quot;blogname&quot;</code></li>
<li><code>&quot;blogdescription&quot;</code></li>
</ul>
<h3>User posts</h3>
<p>Logged-in users can retrieve their own posts, for any status (<code>publish</code>, <code>pending</code>, <code>draft</code> or <code>trash</code>), via the new fields:</p>
<ul>
<li><code>Root.myPosts: [Post]</code></li>
<li><code>Root.myPostCount: Int</code></li>
<li><code>Root.myPost: Post</code></li>
</ul>
<p>For instance, we can now run this query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token comment"># Log yourself in first</span></span><br><span class="highlight-line"><span class="token keyword">mutation</span> LogIn <span class="token punctuation">{</span></span><br><span class="highlight-line">  loginUser<span class="token punctuation">(</span><span class="token attr-name">usernameOrEmail</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token string">"pass"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    name</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment"># Then retrieve your posts</span></span><br><span class="highlight-line"><span class="token keyword">query</span> GetMyPosts <span class="token punctuation">{</span></span><br><span class="highlight-line">  myPosts <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    url</span><br><span class="highlight-line">    status</span><br><span class="highlight-line">    author <span class="token punctuation">{</span></span><br><span class="highlight-line">      name</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Added &quot;unrestricted&quot; admin fields to the GraphQL schema</h2>
<p>The GraphQL schema must strike a balance between public and private fields, as to avoid exposing private information in a public API.</p>
<p>The new module <code>Schema for the Admin</code> adds &quot;unrestricted&quot; admin fields to the GraphQL schema, which may expose private data:</p>
<p><strong>Root:</strong></p>
<ul>
<li><code>unrestrictedPost</code></li>
<li><code>unrestrictedPosts</code></li>
<li><code>unrestrictedPostCount</code></li>
<li><code>unrestrictedCustomPost</code></li>
<li><code>unrestrictedCustomPosts</code></li>
<li><code>unrestrictedCustomPostCount</code></li>
<li><code>unrestrictedGenericCustomPost</code></li>
<li><code>unrestrictedGenericCustomPosts</code></li>
<li><code>unrestrictedGenericCustomPostCount</code></li>
<li><code>unrestrictedPage</code></li>
<li><code>unrestrictedPages</code></li>
<li><code>unrestrictedPageCount</code></li>
<li><code>unrestrictedUsers</code></li>
<li><code>roles</code></li>
<li><code>capabilities</code></li>
</ul>
<p><strong>User:</strong></p>
<ul>
<li><code>unrestrictedPosts</code></li>
<li><code>unrestrictedPostCount</code></li>
<li><code>unrestrictedCustomPosts</code></li>
<li><code>unrestrictedCustomPostCount</code></li>
<li><code>roles</code></li>
<li><code>capabilities</code></li>
</ul>
<p><strong>PostCategory:</strong></p>
<ul>
<li><code>unrestrictedPosts</code></li>
<li><code>unrestrictedPostCount</code></li>
</ul>
<p><strong>PostTag:</strong></p>
<ul>
<li><code>unrestrictedPosts</code></li>
<li><code>unrestrictedPostCount</code></li>
</ul>
<p>For instance, to access post data, currently we have field <code>posts</code>, which exposes public data only, by fetching published posts.</p>
<p>From now on, we can also access post data via field <code>unrestrictedPosts</code>, which exposes public and private data, by fetching posts with any status (<code>&quot;publish&quot;</code>, <code>&quot;draft&quot;</code>, <code>&quot;pending&quot;</code>, <code>&quot;trash&quot;</code>).</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  unrestrictedPosts<span class="token punctuation">(</span><span class="token attr-name">status</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>draft<span class="token punctuation">,</span> pending<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    status</span><br><span class="highlight-line">    author <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      name</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Introduced scalar type <code>AnyScalar</code></h2>
<p>Scalar type <code>AnyScalar</code> represents any of the built-in scalars (<code>String</code>, <code>Int</code>, <code>Boolean</code>, <code>Float</code> or <code>ID</code>).</p>
<p>It is used on the newly-introduced <code>option</code> and <code>metaValue(s)</code> field, because we do not know in advance the type of their returned data, and the union of scalar types is not yet supported by the GraphQL spec.</p>
<h2>Settings in long format</h2>
<p>Options in the Settings page are divided by tabs. From <code>v0.8</code> it is also possible to visualize them all together in a single long page.</p>
<p>To enable this behavior, uncheck item <code>&quot;Have all options in this Settings page be organized under tabs, one tab per module.&quot;</code> on the Settings, and press on <code>&quot;Save Changes&quot;</code>:</p>
<p><img src="/images/releases/v08/settings-without-tabs-checkbox.png" alt="Checkbox to enable/disable tabs in Settings" title="Checkbox to enable/disable tabs in Settings"></p>
<p>Then, all settins will be shown together in long form:</p>
<p><img src="/images/releases/v08/settings-without-tabs.png" alt="Settings in long format" title="Settings in long format"></p>
<hr>
<h2>Breaking changes</h2>
<p>Release <code>v0.8</code> produces breaking changes with the previous version.</p>
<h3>Configuration breaking changes</h3>
<p>The following CPTs have had their &quot;Options&quot; block rebuilt:</p>
<ul>
<li>Schema Configurations</li>
<li>Custom Endpoints</li>
<li>Persisted Queries</li>
</ul>
<p>In the previous <code>v0.7</code>, a single Options block for these entities contained many configuration items. Since <code>v0.8</code>, this block has been decoupled into several independent blocks, each containing its own configuration.</p>
<p>For instance, in <code>v0.7</code>, (in addition to enabling/disabling the endpoint) the Custom Endpoint Options block allowed to configure the GraphiQL and Interactive Schema clients:</p>
<p><img src="/images/releases/v08/legacy/v07/custom-endpoint.png" alt="Options in Custom Endpoint" title="Options in Custom Endpoint"></p>
<p>Since <code>v0.8</code>, this configuration is added through the GraphiQL and Interactive Schema blocks:</p>
<p><img src="/images/releases/v08/custom-endpoint.png" alt="Options in Custom Endpoint" title="Options in Custom Endpoint"></p>
<p>The configuration stored in the Options blocks for all 3 CPTs is not automatically migrated to the new format. Hence, before upgrading to <code>v0.8</code>, please write down your stored configuration, and replicate it after upgrading to the new version.</p>
<p>Sorry for this inconvenience.</p>
<p>In addition, you will need to click on the &quot;Reset the template&quot; button shown in the WordPress editor, for all entries for the 3 CPTs.</p>
<p><img src="/images/releases/v08/legacy/v07/reset-template.png" alt="Reset the template in the WordPress editor" title="Reset the template in the WordPress editor"></p>
<h3>Removed non-standard directives</h3>
<p>The non-standard directives have been removed from the plugin:</p>
<ul>
<li><code>@default</code></li>
<li><code>@removeIfNull</code></li>
<li><code>@export</code></li>
</ul>
<h3>Removed modules</h3>
<p>The following modules have been removed from the plugin:</p>
<ul>
<li>Field Deprecation</li>
<li>Configuration Cache</li>
<li>Schema Cache</li>
<li>Multiple Query Execution</li>
<li>Proactive Feedback</li>
<li>Schema Editing Access</li>
<li>Embeddable fields</li>
</ul>
<hr>
<h2>Upcoming Roadmap</h2>
<p>Now that <code>v0.8</code> has shipped, we can start planning the road ahead.</p>
<p>The current plan is the following:</p>
<p>Ship <code>v0.9</code> in September 2021, including:</p>
<ul>
<li>Custom scalars</li>
<li>An updated GraphQL schema, using custom scalars whenever appropriate (eg: <code>Post.date</code> will return type <code>Date</code> instead of <code>String</code>)</li>
<li>Further enhancements to support extensions</li>
</ul>
<p>And then, ship <code>v1.0</code> around year-end or early 2022, including:</p>
<ul>
<li>A demo of an extension plugin</li>
<li>Complete documentation guides on creating extensions</li>
<li>Launch of the GraphQL API plugin in <code>wp.org</code></li>
</ul>
<p>To receive notifications on the current status, you can <a href="/newsletter/">subscribe to the newsletter</a>.</p>
<hr>
<h2>Run into issues?</h2>
<p>If you have any problem installing or running <code>v0.8</code>, please <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues">create an issue in the repo</a>.</p>
<p><span style="font-size: 70px;">👋</span></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      ❓ When to use WPGraphQL, and when the GraphQL API for WordPress?
      
    </title>
    <link href="https://gatographql.com/blog/when-to-use-wpgraphql-and-when-the-graphql-api-for-wordpress/"/>
    <updated>2021-04-24T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/when-to-use-wpgraphql-and-when-the-graphql-api-for-wordpress/</id>
    <content type="html"><![CDATA[
      <p>A few days ago, I published an article on Smashing Magazine: <a href="https://www.smashingmagazine.com/2021/04/making-graphql-work-in-wordpress/">Making GraphQL Work In WordPress</a>.</p>
<p>This article answers, from my own point of view (but objectively, I believe), the following questions:</p>
<p>❓ When should we use WPGraphQL, and when the GraphQL API for WordPress?<br/>
❓ Is there some advantage of one over the other, or some particular task that is easier to accomplish with one of them?</p>
<p>My conclusion (among a few others) is the following:</p>
<p>🤜🏽 When building a static site, use WPGraphQL<br/>
🤜🏽 When exposing a live GraphQL API, use GraphQL API for WordPress</p>
<p>The differences exposed in this article are from a bird-eye's view, broadly exposing a guide to decide when to use each plugin.</p>
<p>Sounds interesting? Please <a href="https://www.smashingmagazine.com/2021/04/making-graphql-work-in-wordpress/">check it out</a>.</p>
<p>If you'd also like to understand the technical differences between the two plugins, some time ago I wrote another blog post: <a href="/blog/graphql-api-vs-wpgraphql-the-fight/">🥊 GraphQL API vs WPGraphQL: the fight!</a>.</p>
<p>Enjoy!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🕸 How and Where can GraphQL improve WordPress, complementing the REST API
      
    </title>
    <link href="https://gatographql.com/blog/how-and-where-can-graphql-improve-wordpress-complementing-the-rest-api/"/>
    <updated>2021-04-17T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/how-and-where-can-graphql-improve-wordpress-complementing-the-rest-api/</id>
    <content type="html"><![CDATA[
      <p>Last weekend I published blog post <a href="/blog/the-plugin-is-now-transpiled-from-php-80-to-71/">🦸🏿‍♂️ The GraphQL API for WordPress is now transpiled from PHP 8.0 to 7.1</a>.</p>
<p>After <a href="https://www.reddit.com/r/PHP/comments/mo7gwm/the_graphql_api_for_wordpress_is_now_transpiled/">sharing the post on Reddit's /r/php</a>, the community started a lively discussion on how worth it is using GraphQL in WordPress, how different it is from the WP REST API, and how justified it is bringing yet another API to WordPress.</p>
<p>I think most comments are spot on, and others are missing some key information. GraphQL is not just an interface, but also an implementation. This means that different GraphQL servers, from different providers, may have been designed to prioritize different characteristics. As such, we can't always have a unified expectation of what GraphQL offers, or a complete understanding of how a GraphQL engine works.</p>
<p>For instance, the GraphQL experience in WordPress and in Laravel will be different, as well as the experience provided by the different servers, WPGraphQL or the GraphQL API for WP.</p>
<p>This article is my take on the matter, addressing several of the comments from the Reddit post.</p>
<h2>GraphQL vs WP REST API</h2>
<blockquote>
<p>[Such a bad idea] to have a GraphQL API on top of WordPress which already uses its own REST API. Just use the REST API.
<a href="https://www.reddit.com/r/PHP/comments/mo7gwm/the_graphql_api_for_wordpress_is_now_transpiled/gu2ydp3?utm_source=share&amp;utm_medium=web2x&amp;context=3">[Source]</a></p>
</blockquote>
<p>Both the REST API and GraphQL serve the same purpose: to provide the application with the data it needs. However, they behave differently in how they achieve this: while REST has pre-defined endpoints providing a specific set of data, GraphQL can provide exactly the data that is needed.</p>
<p>This different behavior can have a direct impact on the performance of the application. With REST, if we need to fetch a list of posts plus some data from each author of the post, that will need sending extra requests. Possibly 1 extra request for all author data, or 1 extra request per author. In the meantime, the website's visitor may be waiting for the page to be rendered.</p>
<p>GraphQL improves this situation, since we can directly fetch all post and author data in a single request, and the rendering of the webpage will be faster:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    excerpt</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">    url</span><br><span class="highlight-line">    author <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      name</span><br><span class="highlight-line">      url</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Then, even if we already have the REST API in WordPress, it doesn't mean it's always the most suitable tool for every task. Sure, we can always use it, but if we also have access to GraphQL, then we can decide to use this API whenever it provides an advantage over REST, and we'll be better off.</p>
<h2>Difficult initial setup for GraphQL + Having to write resolvers</h2>
<blockquote>
<p>There is definitely an argument to be made that initial setup for GraphQL is exponentially higher than for REST; you're correct that the associations have to be set up.
<a href="https://www.reddit.com/r/PHP/comments/mo7gwm/the_graphql_api_for_wordpress_is_now_transpiled/gu6d6dm?utm_source=share&amp;utm_medium=web2x&amp;context=3">[Source]</a></p>
</blockquote>
<p>And...</p>
<blockquote>
<p>What you and almost everyone else on the web is leaving out is that in order for this API format to work, you have to write the parser (resolvers + types) which brings in a slew of issues that aren't present with REST.
<a href="https://www.reddit.com/r/PHP/comments/mo7gwm/the_graphql_api_for_wordpress_is_now_transpiled/gu3fbfi?utm_source=share&amp;utm_medium=web2x&amp;context=3">[Source]</a></p>
</blockquote>
<p>These comments are not completely accurate, because both WPGraphQL and the GraphQL API for WordPress have already mapped the WordPress data model into the GraphQL schema (WPGraphQL fully, my plugin most of it).</p>
<p>Then, after you install any of these plugins, you can immediately start fetching data for your application, without the need to create any resolver, or having to set up associations among entities.</p>
<p>It is true that, in order to fetch custom data from the application's own entities (such as from CPTs), these need to be mapped via resolvers, and you will need to do it. But this is no different than in REST: if you need custom data from your CPT, you will need to create a REST endpoint to fetch that custom data. A custom endpoint is also a resolver.</p>
<p>Hence, concerning the need for resolvers, REST and the GraphQL API are pretty much the same.</p>
<p>Now, from browsing websites and documentation, it does give the impression that GraphQL requires more effort to set-up. So there's truthfulness to this presumption.</p>
<p>I believe there are a few reasons for this. For one, GraphQL involves (at least) two parts:</p>
<ol>
<li>the concept of what it is, and how it works</li>
<li>the servers providing some actual implementation</li>
</ol>
<p>When browsing documentation for GraphQL, such as the official site <a href="https://graphql.org/">graphql.org</a>, it focuses on the concepts behind GraphQL, going into detail into resolvers, what they are and why they are needed.</p>
<p>This is useful when you are building an application from scratch, such as if using Laravel and <a href="https://lighthouse-php.com/">Lighthouse</a>. In that case, you do need to code your resolvers (but so you'd also need to create your REST endpoints).</p>
<p>However, WordPress is already the application, and WPGraphQL and GraphQL API for WP are solutions. These two plugins have already created the resolvers for us, so we don't need to worry about them (similarly to the WP REST API also providing an initial set of endpoints, so we don't need to worry about them).</p>
<p>In addition, GraphQL is more developer-centric, and its documentation seems to talk straight to developers. Developers create the resolvers in the server-side, and developers consume those resolvers with custom queries in the client-side. Since building resolvers is a task for developers, it just shows up naturally and often.</p>
<p>For REST, the expectation (I believe) is that the endpoint providing the required data will already exist (as shipped by the WP REST API). If it doesn't, only then we need to worry about setting-up a custom endpoint. Hence, there is less emphasis on creating resolvers for REST.</p>
<p>Hence, both REST and GraphQL provide the required data. But while REST encourages a static approach, where endpoints should already exist, and only whenever they do not we worry about them, GraphQL encourages a dynamic approach, where every query is custom made, and then we can code the perfect resolver for it.</p>
<p>So, in the end, there are no fundamental differences between REST and GraphQL, just different interpretations on how they must satisfy their requirements.</p>
<h2>Vulnerabilities + Security considerations in GraphQL</h2>
<blockquote>
<p>We are gonna see a huge vulnerability from GraphQL some day because writing secure interpreters is really hard.
<a href="https://www.reddit.com/r/PHP/comments/mo7gwm/the_graphql_api_for_wordpress_is_now_transpiled/gu34viu?utm_source=share&amp;utm_medium=web2x&amp;context=3">[Source]</a></p>
</blockquote>
<p>And...</p>
<blockquote>
<p>WordPress is already so massive that it already has a huge target on its back; bolting on ANY plugin adds a lot of risk, and a plugin offering to expose literally all of WordPress, including <a href="https://www.wpgraphql.com/recipes/making-menus-and-menu-items-public/">lots</a> of <a href="https://www.wpgraphql.com/recipes/make-all-users-public/">code</a> samples for <a href="https://www.wpgraphql.com/recipes/showing-post-type-labels-in-public-queries/">bypassing the security model</a>, is a big no for me. Non-theme-driven output should be as restricted as possible (non-existent unless I ask) beyond what is absolutely necessary to expose. I hope this never makes it into core.
<a href="https://www.reddit.com/r/PHP/comments/mo7gwm/the_graphql_api_for_wordpress_is_now_transpiled/gu3iwfa?utm_source=share&amp;utm_medium=web2x&amp;context=3">[Source]</a></p>
</blockquote>
<p>GraphQL does impose additional security risks that we need to tackle. I fully agree with this feeling.</p>
<p>But I don't think it is such a blocking issue, as to prevent a potential inclusion of GraphQL in WP core. Moreover, I do not even think it's really hard to address.</p>
<p>What is needed is for the GraphQL server to tap on the existing security mechanisms by WordPress, and then for the developer to use these mechanisms, making sure that some field can only be accessed by the appropriate users only:</p>
<ul>
<li>is the user logged in?</li>
<li>is the user the admin?</li>
<li>does the user have some role or capability?</li>
<li>is the user the author of the post?</li>
</ul>
<p>To satisfy this proposition, the GraphQL API for WP offers <a href="/guides/special-features/access-control">Access Control Lists</a>, so we can define who can access each field and directive, and by configuration.</p>
<p>Now, sometimes using an ACL alone does not cut it, and the GraphQL server needs to provide extra security measures. I'll describe what I'm working on right now for the upcoming v0.8 of the GraphQL API for WP.</p>
<p>Field <code>posts</code> (to retrieve post data) does not require authorization, any user can access it, either logged-in or not. Hence, for security reasons, it only fetches published posts.</p>
<p>But there are situations when we need to retrieve draft/pending/trashed posts also, such as:</p>
<ul>
<li>For building a static website, which is executed by the admin, with access to all data from the site</li>
<li>For authors of the post, to list all draft posts so they can keep editing them</li>
</ul>
<p>Then, I came up with the following scheme. To fetch posts, there will be 3 fields:</p>
<ul>
<li><code>posts</code>: open to anyone, can only fetch published posts</li>
<li><code>myPosts</code>: open to anyone, it only fetches posts from the logged-in user, with any status (published/draft/pending/trashed)</li>
<li><code>postsForAdmin</code>: only the admin can access it, fetches any post with any status</li>
</ul>
<p>And then, <code>postsForAdmin</code> is by default disabled, so it doesn't even show up on the GraphQL schema, unless the admin explicitly enables it (and, most likely, it will be enabled for building static sites only).</p>
<p>Another situation is when some field can retrieve both public and private data. For  instance, the <code>option</code> field retrieves data from table <code>wp_options</code>. Some entries are public (such as <code>blogname</code>), while others are not (such as <code>admin_email</code>).</p>
<p>A similar situation is for retrieving meta values, through fields <code>Post.metaValue</code>, <code>User.metaValue</code>, and others. For instance, user meta includes entry <code>wp_capabilities</code>, which is certainly private, while <code>description</code> is public. And then there is <code>last_name</code>, which may be public or private depending on the application.</p>
<p>To make accessing this data secure, the plugin will enable to specify which entries can be queried via an allow/denylist in the settings page, accepting both the full entry or a regex:</p>
<p><img src="/images/schema-configuration-settings.png" alt="Defining allowed/denied entries for the 'option' field" title="Defining allowed/denied entries for the 'option' field"></p>
<p>Then, querying the allowed option will work, while the denied option will just return <code>null</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment"># This option is allowed</span></span><br><span class="highlight-line">  <span class="token attr-name">siteName</span><span class="token punctuation">:</span> optionValue<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"blogname"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token comment"># This optionValue is not allowed</span></span><br><span class="highlight-line">  <span class="token attr-name">adminEmail</span><span class="token punctuation">:</span> optionValue<span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token string">"admin_email"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>With proper security measures provided by the GraphQL server, and common sense by the developer, creating a secure GraphQL API should not be difficult.</p>
<h2>GraphQL bringing the DB down</h2>
<blockquote>
<p>GraphQL is a rich syntax allowing for deep relational queries to be expressed, so for an ecosystem like WordPress, where the extensibility of the data model comes from the <a href="https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model">entity-attribute-value pattern</a>, this translates to unbelievable amounts of wear and tear on a database, which may cause your site to become unresponsive if the GraphQL query is deep, complicated, or recursive. WordPress is already famous for being able to bring a MySQL/MariaDB instance to its knees, so adding GraphQL could make this so much worse if the queries aren't properly written, authenticated and rate limited.
<a href="https://www.reddit.com/r/PHP/comments/mo7gwm/the_graphql_api_for_wordpress_is_now_transpiled/gu3efu0?utm_source=share&amp;utm_medium=web2x&amp;context=3">[Source]</a></p>
</blockquote>
<p>Bringing the DB down is a serious concern for GraphQL servers. I will describe how GraphQL by PoP (the CMS-agnostic GraphQL server in PHP over which the GraphQL API for WP is based) attempts to avoid this scenario.</p>
<p>GraphQL by PoP <a href="https://graphql-by-pop.com/docs/architecture/suppressing-n-plus-one-problem.html">avoids the N+1 problem from ever taking place</a>, already by architectural design. It accomplishes it by having the engine be responsible for loading the entities from the database, <strong>not the developer</strong>.</p>
<p>When resolving connections in a resolver, the returned value is the ID (or list of IDs) of the object(s), and not the object itself. For instance, retrieving the custom post's author is <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/717701efb9dfc87276a598938ba31889099ef4cd/layers/Schema/packages/users/src/Conditional/CustomPosts/FieldResolvers/CustomPostFieldResolver.php">done like this</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">class</span> CustomPostFieldResolver <span class="token keyword">extends</span> <span class="token class-name">AbstractDBDataFieldResolver</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">private</span> <span class="token class-name type-declaration">CustomPostUserTypeAPIInterface</span> <span class="token variable">$customPostUserTypeAPI</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getClassesToAttachTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token class-name static-context">CustomPostFieldInterfaceResolver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSchemaFieldType</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token keyword">match</span><span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'author'</span> <span class="token operator">=></span> <span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token keyword">default</span> <span class="token operator">=></span> <span class="token constant">null</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resolveValue</span><span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token keyword type-hint">object</span> <span class="token variable">$customPost</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token keyword type-hint">array</span> <span class="token variable">$fieldArgs</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token keyword">case</span> <span class="token string single-quoted-string">'author'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">customPostUserTypeAPI</span><span class="token operator">-></span><span class="token function">getAuthorID</span><span class="token punctuation">(</span><span class="token variable">$customPost</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resolveFieldTypeResolverClass</span><span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token keyword">case</span> <span class="token string single-quoted-string">'author'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token class-name static-context">UserTypeResolver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Having the DB entity's ID from <code>resolveValue</code>, and the type of the object from <code>resolveFieldTypeResolverClass</code> (represented via class <code>UserTypeResolver</code>), the GraphQL engine can then load the data for the object.</p>
<p>To load the data, the engine <a href="https://graphql-by-pop.com/docs/architecture/dataloading-engine.html#analyzing-the-time-complexity-of-the-solution">uses an algorithm that is super efficient</a>: it has <a href="https://en.wikipedia.org/wiki/Time_complexity">time complexity</a> <code>O(n)</code>, where <code>n</code> is the number of types in the query, not the number of nodes.</p>
<p>The algorithm achieves this efficiency because it does not traverse a graph, but it <a href="https://graphql-by-pop.com/docs/architecture/using-components-instead-of-graphs.html">converts the data structure to a stack of components</a>, which is much simpler to resolve. (The &quot;graph&quot; in GraphQL is a concept, not an actual implementation.)</p>
<p>Then, even if the query has multiple levels, each retrieving many entities, the algorithm can still withstand it pretty well. For instance, there's no big impact when running the following query, which has a depth of 10 levels:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    excerpt</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    url</span><br><span class="highlight-line">    author <span class="token punctuation">{</span></span><br><span class="highlight-line">      name</span><br><span class="highlight-line">      url</span><br><span class="highlight-line">      posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        title</span><br><span class="highlight-line">        tags<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          slug</span><br><span class="highlight-line">          url</span><br><span class="highlight-line">          posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            title</span><br><span class="highlight-line">            comments<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">              content</span><br><span class="highlight-line">              date</span><br><span class="highlight-line">              author <span class="token punctuation">{</span></span><br><span class="highlight-line">                name</span><br><span class="highlight-line">                posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                  title</span><br><span class="highlight-line">                  url</span><br><span class="highlight-line">                  comments<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                    content</span><br><span class="highlight-line">                    date</span><br><span class="highlight-line">                    author <span class="token punctuation">{</span></span><br><span class="highlight-line">                      name</span><br><span class="highlight-line">                      username</span><br><span class="highlight-line">                      url</span><br><span class="highlight-line">                    <span class="token punctuation">}</span></span><br><span class="highlight-line">                  <span class="token punctuation">}</span></span><br><span class="highlight-line">                <span class="token punctuation">}</span></span><br><span class="highlight-line">              <span class="token punctuation">}</span></span><br><span class="highlight-line">            <span class="token punctuation">}</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The exception to this efficiency is when retrieving meta values, through <code>Post.metaValue</code>, <code>User.metaValue</code>, <code>Comment.metaValue</code>, <code>PostTag.metaValue</code> and <code>PostCategory.metaValue</code> (and also their <code>metaValues</code> field). That's because the WordPress functions (<code>get_post_meta</code>, <code>get_user_meta</code>, etc) fetch data for 1 ID at a time, meaning that each entity will require a database call to fetch its meta value. As a result, resolving meta values scales up based on the number of nodes, not the number of types (the OP's comment hits the nail on the head, in this regard).</p>
<p>To avoid bad actors using and abusing the meta fields, the GraphQL API for WordPress (in v0.8) will ship with these fields disabled by default. Then, the admin has to explicitly enable them and, while doing so, can place these fields under some Access Control List, so at no time should the DB be at risk of attack.</p>
<p>Rate limiting is a great idea too, I plan to <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/220">support it for some upcoming release</a>.</p>
<p>And then there's analyzing and imposing limitations on the complexity of the query (such as how many levels deep it is). The GraphQL server resolves the query with time complexity <code>O(n)</code>, so there's not much harm that can be done concerning looping. However, a single query could still retrieve unlimited amounts of data from the DB, and that's something we may want to avoid.</p>
<p>For instance, this simple query will bring a huge amount of data in a single request (my demo site barely has a few hundred records, so I can afford to demonstrate executing the query):</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">posts000</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts100</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts200</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts300</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts400</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts500</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">500</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts600</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts700</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">700</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts800</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">800</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">posts900</span><span class="token punctuation">:</span> posts<span class="token punctuation">(</span><span class="token attr-name">pagination</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">limit</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">900</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span><span class="token fragment function">PostFields</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">fragment</span> <span class="token fragment function">PostFields</span> <span class="token keyword">on</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  id</span><br><span class="highlight-line">  title</span><br><span class="highlight-line">  content</span><br><span class="highlight-line">  date</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>As it can be appreciated, the query doesn't even need be nested to create trouble. So analyzing the complexity of a query is a tricky business, which will require fine-tuning to be useful.</p>
<p>I hope to support query analysis too, but it's not on my list of high priorities, because with a combination of the other features (such as <a href="/guides/special-features/persisted-queries">persisted queries</a> or <a href="/guides/special-features/custom-endpoints">custom endpoints</a>, coupled with Access Control Lists) we can already keep out the bad actors, and we ourselves will not (should not!) abuse our own GraphQL service.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🦸🏿‍♂️ The GraphQL API for WordPress is now transpiled from PHP 8.0 to 7.1
      
    </title>
    <link href="https://gatographql.com/blog/the-plugin-is-now-transpiled-from-php-80-to-71/"/>
    <updated>2021-04-10T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/the-plugin-is-now-transpiled-from-php-80-to-71/</id>
    <content type="html"><![CDATA[
      <p>Some time ago, I wrote about the art of transpiling PHP code:</p>
<ul>
<li><a href="https://blog.logrocket.com/transpiling-php-code-from-8-0-to-7-x-via-rector/">Transpiling PHP code from 8.0 to 7.x via Rector</a></li>
<li><a href="https://blog.logrocket.com/coding-in-php-7-4-and-deploying-to-7-1-via-rector-and-github-actions/">Coding in PHP 7.4 and deploying to 7.1 via Rector and GitHub Actions</a></li>
</ul>
<p>Transpiling PHP code enables to use the latest PHP features for development, yet release the plugin with its code converted to an older PHP version for production, as to target a bigger user base.</p>
<p>I spent the past few weeks further tuning this process for the <a href="https://gatographql.com">GraphQL API for WordPress</a> plugin.</p>
<p>I'm happy to announce that, from now on, it's required PHP version has been upgraded, to PHP 8.0:</p>
<p><img src="/images/merged-codebase-min-php-80.jpg" alt="Upgrading to min PHP version 8.0" title="Upgrading to min PHP version 8.0"></p>
<p>Since the plugin can now count on PHP 8.0, I've been able to complete adding a type to all properties for all PHP classes across the code base, now also including union types.</p>
<p>Awesome!</p>
<p>Here is the summary of all the new PHP 8.0 features available when developing the plugin.</p>
<h2>New PHP 8.0 features</h2>
<p>When developing the GraphQL API plugin, the following PHP 8.0 features are now available:</p>
<ul>
<li><a href="https://php.watch/versions/8.0/union-types">Union types</a></li>
<li><a href="https://php.watch/versions/8.0/mixed-type"><code>mixed</code> pseudo type</a></li>
<li><a href="https://php.watch/versions/8.0/static-return-type"><code>static</code> return type</a></li>
<li><a href="https://php.watch/versions/8.0/class-constant-on-objects"><code>::class</code> magic constant on objects</a></li>
<li><a href="https://php.watch/versions/8.0/match-expression"><code>match</code> expressions</a></li>
<li><a href="https://php.watch/versions/8.0/catch-exception-type"><code>catch</code> exceptions only by type</a></li>
<li><a href="https://php.watch/versions/8.0/null-safe-operator">Null-safe operator</a></li>
<li><a href="https://php.watch/versions/8.0/constructor-property-promotion">Class constructor property promotion</a></li>
<li><a href="https://php.watch/versions/8.0/trailing-comma-parameter-use-list">Trailing commas in parameter lists and closure <code>use</code> lists</a></li>
</ul>
<p>Let's see an example of each, how they are used in the plugin for development, and what they get transpiled down to when generating <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/download/0.10.0/graphql-api.zip"><code>graphql-api.zip</code></a>.</p>
<h3>Union types</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/b9d379dc34195701e3afac2be4c132da6728ab75/layers/Schema/packages/custompost-mutations/src/TypeAPIs/CustomPostTypeAPIInterface.php#L18">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">interface</span> CustomPostTypeAPIInterface</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCustomPost</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span> <span class="token operator">|</span> <span class="token keyword type-declaration">int</span> <span class="token operator">|</span> <span class="token keyword type-declaration">null</span> <span class="token operator">|</span> <span class="token class-name">Error</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">interface</span> CustomPostTypeAPIInterface</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createCustomPost</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3><code>mixed</code> pseudo type</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/21a2c0bc2102068f76e9f42594c2d2f47df90760/layers/Engine/packages/engine/src/CMS/CMSServiceInterface.php#L9">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">interface</span> CMSServiceInterface</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$option</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">interface</span> CMSServiceInterface</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$option</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3><code>::class</code> magic constant on objects</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/a546b2769958b385e86a20f74900f8d5349b9736/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/src/Services/SchemaConfigurators/AbstractGraphQLQueryConfigurator.php#L119">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$directiveResolvers</span> <span class="token keyword">as</span> <span class="token variable">$directiveResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$directiveResolverName</span> <span class="token operator">=</span> <span class="token variable">$directiveResolver</span><span class="token operator">-></span><span class="token function">getDirectiveName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">directiveNameClasses</span><span class="token punctuation">[</span><span class="token variable">$directiveResolverName</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$directiveResolver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$directiveResolvers</span> <span class="token keyword">as</span> <span class="token variable">$directiveResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$directiveResolverName</span> <span class="token operator">=</span> <span class="token variable">$directiveResolver</span><span class="token operator">-></span><span class="token function">getDirectiveName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">directiveNameClasses</span><span class="token punctuation">[</span><span class="token variable">$directiveResolverName</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$directiveResolver</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3><code>match</code> expressions</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/0b73acc0d59bb74cb5e6dab9ec8061401c26526a/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/src/ConditionalOnEnvironment/Admin/SchemaServices/FieldResolvers/CPTFieldResolver.php#L66">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSchemaFieldType</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'accessControlLists'</span> <span class="token operator">=></span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'cacheControlLists'</span> <span class="token operator">=></span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'fieldDeprecationLists'</span> <span class="token operator">=></span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'schemaConfigurations'</span> <span class="token operator">=></span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token keyword">default</span> <span class="token operator">=></span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">getSchemaFieldType</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSchemaFieldType</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">case</span> <span class="token string single-quoted-string">'accessControlLists'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">case</span> <span class="token string single-quoted-string">'cacheControlLists'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">case</span> <span class="token string single-quoted-string">'fieldDeprecationLists'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">case</span> <span class="token string single-quoted-string">'schemaConfigurations'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token class-name static-context">TypeCastingHelpers</span><span class="token operator">::</span><span class="token function">makeArray</span><span class="token punctuation">(</span><span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">getSchemaFieldType</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3><code>catch</code> exceptions only by type</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/145aad0ecfbfc9c2edbd54960a943cb154ecb0a8/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/src/ModuleResolvers/HasMarkdownDocumentationModuleResolverTrait.php#L53">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment">// ...</span></span><br><span class="highlight-line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidArgumentException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token function">sprintf</span><span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'&lt;p>%s&lt;/p>'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    \<span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Oops, the documentation for this module is not available'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'graphql-api'</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment">// ...</span></span><br><span class="highlight-line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidArgumentException</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token function">sprintf</span><span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'&lt;p>%s&lt;/p>'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    \<span class="token function">__</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Oops, the documentation for this module is not available'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'graphql-api'</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Null-safe operator</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/6dd729a67ab8952df8a69f6f8898ece141ff3843/layers/Engine/packages/component-model/src/DirectiveResolvers/AbstractDirectiveResolver.php#L513">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSchemaDirectiveDeprecationDescription</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getSchemaDefinitionResolver</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">)</span><span class="token operator">?-></span><span class="token function">getSchemaDirectiveDeprecationDescription</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSchemaDirectiveDeprecationDescription</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getSchemaDefinitionResolver</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getSchemaDefinitionResolver</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getSchemaDirectiveDeprecationDescription</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">null</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Class constructor property promotion</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/57a7a21a378f718e1ecfd378fe34ea99fa62c168/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/src/Services/EndpointResolvers/AbstractEndpointResolver.php#L12">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractEndpointResolver</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token class-name type-declaration">EndpointHelpers</span> <span class="token variable">$endpointHelpers</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractEndpointResolver</span></span><br><span class="highlight-line"> <span class="token punctuation">{</span></span><br>  <span class="token comment">/**<br><span class="highlight-line">   * @var \GraphQLAPI\GraphQLAPI\Services\Helpers\EndpointHelpers</span><br>   */</span><br><span class="highlight-line">  <span class="token keyword">protected</span> <span class="token variable">$endpointHelpers</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">EndpointHelpers</span> <span class="token variable">$endpointHelpers</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">endpointHelpers</span> <span class="token operator">=</span> <span class="token variable">$endpointHelpers</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Trailing commas in parameter lists and closure <code>use</code> lists</h3>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/fe5c96e2d936f9da3fb0015ed76e393d51b4e2e0/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/src/ConditionalOnEnvironment/Admin/SchemaServices/FieldResolvers/CPTFieldResolver.php#L222">Code example</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resolveFieldTypeResolverClass</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">case</span> <span class="token string single-quoted-string">'accessControlLists'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">            <span class="token keyword">return</span> <span class="token class-name static-context">CustomPostTypeResolver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">resolveFieldTypeResolverClass</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token variable">$typeResolver</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token variable">$fieldName</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Transpiled to:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resolveFieldTypeResolverClass</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">case</span> <span class="token string single-quoted-string">'accessControlLists'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">            <span class="token keyword">return</span> <span class="token class-name static-context">CustomPostTypeResolver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">resolveFieldTypeResolverClass</span><span class="token punctuation">(</span><span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      💁🏽‍♂️ Why to support CMS-agnosticism, the GraphQL API was split to ~90 packages, and benefits and drawbacks of this approach
      
    </title>
    <link href="https://gatographql.com/blog/why-to-support-cms-agnosticism-the-graphql-api-split-to-around-90-packages/"/>
    <updated>2021-04-03T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/why-to-support-cms-agnosticism-the-graphql-api-split-to-around-90-packages/</id>
    <content type="html"><![CDATA[
      <p>Last week I published article <a href="/blog/extending-the-monorepo-builder/">💁🏻‍♀️ Why the GraphQL API needs a Monorepo, and How it's optimized</a>, explaining how and why the <code>GatoGraphQL/GatoGraphQL</code> monorepo, which hosts the code for the GraphQL API for WordPress, can manage the plugin's codebase efficiently.</p>
<p>I shared my article on Reddit, and I got the <a href="https://www.reddit.com/r/programming/comments/mh5ds3/i_wrote_about_why_my_project_with_php_packages/gswsrw2?utm_source=share&amp;utm_medium=web2x&amp;context=3">following comment</a>:</p>
<blockquote>
<p>The article from the OP and the articles it links to, kind of read like a monorepo is the greatest thing since sliced bread.</p>
<p>A more interesting article would be to explain why you thought CMS-agnosticism requires splitting up everything into its own little package, and why you thought each of the over 200 packages needed to be in its own repo to begin with.</p>
</blockquote>
<p>This is an interesting question. So I decided to write this article, to address it a bit further.</p>
<p>But first, I'll address two related topics: how many packages are actually required by the plugin, and why do I claim that the underlying GraphQL server is CMS-agnostic.</p>
<h2>How many packages make-up the plugin</h2>
<p>Even though I've mentioned 200-over PHP packages, that is for the monorepo; for the plugin, it is actually way less than that.</p>
<p>The <a href="https://github.com/GatoGraphQL/GatoGraphQL"><code>GatoGraphQL/GatoGraphQL</code> monorepo</a> encompasses 5 projects:</p>
<ol>
<li>PoP, a server-side component model library (like React, but for the back-end)</li>
<li><a href="https://graphql-by-pop.com/">GraphQL by PoP</a>, a CMS-agnostic GraphQL server for PHP</li>
<li>the <a href="https://gatographql.com">GraphQL API for WordPress</a></li>
<li>a site builder (WIP)</li>
<li>Wassup, a website theme based on the site builder (WIP)</li>
</ol>
<p>Hosting these projects in a monorepo simplifies working with them, because of their interdependencies:</p>
<ul>
<li>GraphQL by PoP is based on PoP</li>
<li>GraphQL API for WordPress is based on GraphQL by PoP</li>
<li>The site builder uses the component model library as its engine (similar to Gatsby using GraphQL)</li>
<li>Wassup is based on the site builder</li>
</ul>
<p>It is concerning the code for all 5 projects that <code>GatoGraphQL/GatoGraphQL</code> contains over 200 PHP packages. Concerning the GraphQL API for WordPress, it is &quot;only&quot; 91 packages. And GraphQL by PoP, the underlying GraphQL server, contains &quot;only&quot; 98 packages.</p>
<p>(The GraphQL API for WordPress plugin requires fewer packages than its underlying GraphQL server, because some packages, such as the <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/Schema/packages/google-translate-directive">Google Translate <code>@strTranslate</code> directive</a>, haven't been added to the plugin yet.)</p>
<h2>How is GraphQL by PoP CMS-agnostic? How is it different than webonyx?</h2>
<p>I have been saying that <a href="https://graphql-by-pop.com/docs/architecture/cms-agnosticism.html">GraphQL by PoP is CMS-agnostic</a>. But what does that mean?</p>
<p>For that matter, <a href="https://github.com/webonyx/graphql-php"><code>webonyx/graphql-php</code></a> also is CMS-agnostic. So how are they different?</p>
<p><code>webonyx/graphql-php</code> is CMS-agnostic, in that it is a package distributed via Composer, containing only &quot;vanilla&quot; PHP code. However, it is not a GraphQL server all by itself; instead, it is an implementation in PHP of the GraphQL specification, to be embedded within some GraphQL server in PHP.</p>
<p>Now, these implementing GraphQL servers, such as <a href="https://github.com/nuwave/lighthouse">Lighthouse</a> or <a href="https://github.com/wp-graphql/wp-graphql">WPGraphQL</a>, are not CMS-agnostic. We can't run Lighthouse on WordPress, or WPGraphQL on Laravel.</p>
<p>It is in this sense that GraphQL by PoP is CMS-agnostic: it is the &quot;almost-final&quot; GraphQL server, almost ready to run with any CMS or framework, whether Laravel, WordPress, or any other. (For sake of brevity, from now on, whenever I say &quot;CMS&quot;, it means &quot;CMS or framework&quot;.)</p>
<p>To make it final for some CMS, the GraphQL server will still need some custom code for that CMS, via some corresponding package.</p>
<p>I'll now address the questions in the comment.</p>
<h2>Why each package needed to be in its own repo</h2>
<p>Because <a href="https://packagist.org/">Packagist</a> (Composer's registry of PHP packages) requires to provide a repository URL for publishing/distributing a package.</p>
<p>(Btw, my article <a href="https://blog.logrocket.com/hosting-all-your-php-packages-together-in-a-monorepo/">Hosting all your PHP packages together in a monorepo</a>, also published last week, talks about this issue.)</p>
<h2>Why CMS-agnosticism requires splitting up everything into its own little package</h2>
<p>There are a few reasons.</p>
<h3>Have the CMS inject its own code</h3>
<p>It is impossible to make a GraphQL server that works everywhere, using 100% the same PHP code.</p>
<p>For instance, to enable any piece of code to modify the value of some variable somewhere else, WordPress relies on <a href="https://developer.wordpress.org/plugins/hooks/filters/">filter hooks</a>, Symfony uses the <a href="https://symfony.com/doc/current/components/event_dispatcher.html">EventDispatcher component</a>, and Laravel has its own system of <a href="https://laravel.com/docs/8.x/events">events and listeners</a>. The PHP code for these 3 different methods will also be different.</p>
<p>This is where the approach of splitting the code into granular packages comes in. Instead of having a solution for events and listeners be part of the application, it is injected into the application via a package, and this package will contain code that is specific to the CMS.</p>
<p>For this to work, every functionality must be split into 2 packages:</p>
<ul>
<li>a CMS-agnostic package, containing all business logic, using only &quot;vanilla&quot; PHP code. This package will include the contracts to be satisfied by the CMS-specific package</li>
<li>a CMS-specific package, satisfying the contracts for that CMS</li>
</ul>
<p>For instance, GraphQL by PoP has a package <code>hooks</code> containing the <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/9aadcea277b0b3d9a2a3ba5427dee07b4a96f47e/layers/Engine/packages/hooks/src/HooksAPIInterface.php">following contract</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">interface</span> HooksAPIInterface</span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$accepted_args</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">removeFilter</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_remove</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">mixed</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addAction</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$accepted_args</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">removeAction</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_remove</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">mixed</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And then, package <code>hooks-wp</code> <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/9aadcea277b0b3d9a2a3ba5427dee07b4a96f47e/layers/Engine/packages/hooks-wp/src/HooksAPI.php">satisfies the contract for WordPress</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">class</span> HooksAPI <span class="token keyword">implements</span> <span class="token class-name">HooksAPIInterface</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$accepted_args</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    \<span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token variable">$priority</span><span class="token punctuation">,</span> <span class="token variable">$accepted_args</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">removeFilter</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_remove</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> \<span class="token function">remove_filter</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token variable">$function_to_remove</span><span class="token punctuation">,</span> <span class="token variable">$priority</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">applyFilters</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">mixed</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> \<span class="token function">apply_filters</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addAction</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$accepted_args</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    \<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token variable">$priority</span><span class="token punctuation">,</span> <span class="token variable">$accepted_args</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">removeAction</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_remove</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> \<span class="token function">remove_action</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token variable">$function_to_remove</span><span class="token punctuation">,</span> <span class="token variable">$priority</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">mixed</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    \<span class="token function">do_action</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now, even though the concept of hooks comes from WordPress, it can work with other CMSs also (for instance, using events and listeners to implement hooks). Then, we can replace <code>hooks-wp</code> with <code>hooks-laravel</code>, <code>hooks-symfony</code>, <code>hooks-drupal</code>, <code>hooks-octobercms</code>, or any other, to satisfy the contracts using the code specific to each CMS.</p>
<h3>Allow the CMS to discard functionality it can't support</h3>
<p>Not all CMSs can support all functionality. For instance, WordPress enables to <a href="https://developer.wordpress.org/reference/classes/wp_query/#order-orderby-parameters">sort posts by some <code>meta_value</code> entry</a>, but OctoberCMS does not.</p>
<p>That's why GraphQL by PoP contains package <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/Schema/packages/metaquery"><code>metaquery</code></a> (satisfied for WordPress via <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/Schema/packages/metaquery-wp"><code>metaquery-wp</code></a>). Then, the GraphQL server implemented for WordPress will include this package, but the one for OctoberCMS will not.</p>
<h2>Benefits of this approach</h2>
<p>Splitting our packages granularly offers a few advantages.</p>
<h3>Decouple business logic from CMS-specific code</h3>
<p>Instead of coding the application based on the opinionatedness (way of coding, features, limitations, and others) from a CMS, we can abstract our code and use business logic only.</p>
<p>For instance, to obtain a list of posts, the application can execute the method <code>getPosts</code> from some interface on a CMS-agnostic package <code>posts</code>. Then, posts will be retrieved always the same way, independently from the implementation by the underlying CMS.</p>
<h3>Bypass technical debt, and use the latest standards</h3>
<p>Following the example above, we retrieve our posts executing method <code>getPosts</code>, which follows the <code>PSR-4</code> convention, instead of calling <code>get_posts</code>, as defined by WordPress.</p>
<p>Similarly, we can execute <code>getCustomPost</code> to retrieve a custom post, instead of the inaccurate <code>get_post</code> (this is part of WordPress' technical debt).</p>
<h3>It's easy to scope</h3>
<p>Using <a href="https://github.com/humbug/php-scoper">PHP-Scoper</a> to scope a WordPress plugin <a href="https://github.com/humbug/php-scoper#wordpress">is not easy</a>, and even when doable, it is prone to bugs.</p>
<p>Keeping the CMS-specific code and the application's business logic thoroughly decoupled, enables to apply PHP-Scoper on one set of packages only (the ones with the business logic), and avoid it on the others (the ones containing WordPress code). I have described this strategy in detail, <a href="/blog/graphql-api-for-wp-is-now-scoped-thanks-to-php-scoper/">here</a>.</p>
<p>In addition, similar to PHP-Scoper, there may be other tools which fail when applied on some CMS-specific code (such as WordPress). In those cases, splitting the packages granularly can save the day.</p>
<h3>We can produce different applications, each containing only the code it needs</h3>
<p>We can reuse our packages to produce more applications, containing only those packages it needs and nothing else.</p>
<p>For instance, a personal blog may need only <code>posts</code>, <code>tags</code> and <code>categories</code>, so it can avoid dealing with functionality for <code>users</code> or <code>user-login</code>.</p>
<p>Indeed, I plan to benefit from this feature soon: I'm currently <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/519">working on the &quot;Private GraphQL API&quot;</a>, a self-contained GraphQL engine, to be made available to WordPress plugin developers to bundle it within their plugins, granting a GraphQL API for their Gutenberg blocks.</p>
<p>I can effortlessly create the &quot;Private GraphQL API&quot; simply by removing those packages from the GraphQL API for WordPress plugin which are not needed (those dealing with UI, clients, custom endpoints, HTTP caching, persisted queries, and a few others).</p>
<p>Finally, since it's easy to scope (as seen above), I can prefix all the required packages, so the Private GraphQL API will work without conflict (which could happen when 2 different plugins bundle different versions of the Private GraphQL API).</p>
<h2>Drawbacks of this approach</h2>
<p>Needless to say, this approach is far from perfect.</p>
<h3>Greater effort, code becomes more verbose</h3>
<p>Normally, if our application runs on WordPress, to retrieve a list of posts we just execute <code>get_posts</code>. Simple and easy.</p>
<p>Making it CMS-agnostic complicates matters significantly. To retrieve a list of posts, we must:</p>
<ul>
<li>Create packages <code>posts</code> and <code>posts-wp</code></li>
<li>Create a contract with function <code>getPosts</code> in package <code>posts</code></li>
<li>Satisfy the contract via <code>get_posts</code> in package <code>posts-wp</code></li>
<li>Always make sure to invoke the functionality via the contract, never directly</li>
</ul>
<h3>It (quite likely) requires dependency injection</h3>
<p>We need to bind every contract from the CMS-agnostic package, and its implementation from the CMS-specific package. In my case, I'm using a service container, provided by Symfony's <a href="https://symfony.com/doc/current/components/dependency_injection.html">DependencyInjection component</a>.</p>
<p>I love this approach, I believe it greatly simplifies the application. However, I understand that not every application would otherwise require dependency injection, adding complexity to it.</p>
<h3>It (most likely) requires a monorepo</h3>
<p>The GraphQL API for WordPress ended up containing 91 packages. In the past, I hosted each of them on its own repository, making it very difficult to create PRs. So I have been &quot;forced&quot; to switch to the monorepo approach.</p>
<p>To be clear: I really like the monorepo. But I understand that not everyone likes it, and it also requires its own effort to maintain.</p>
<h2>Useful links</h2>
<p>I have previously written about my motivations and strategy for abstracting my WordPress website, rendering it CMS-agnostic. It is this same strategy that I applied to split up the codebase for the GraphQL API for WordPress:</p>
<ul>
<li><a href="https://www.smashingmagazine.com/2019/11/abstracting-wordpress-code-cms-concepts/">Abstracting WordPress Code To Reuse With Other CMSs: Concepts (Part 1)</a></li>
<li><a href="https://www.smashingmagazine.com/2019/11/abstracting-wordpress-code-reuse-with-other-cms-implementation/">Abstracting WordPress Code To Reuse With Other CMSs: Implementation (Part 2)</a></li>
</ul>
<h2>Addendum: List of the 91 packages making up the plugin</h2>
<p>The GraphQL API for WordPress contains the following 91 packages.</p>
<p>Engine functionality:</p>
<pre><code>getpop/access-control
getpop/cache-control
getpop/component-model
getpop/definitions
getpop/engine
getpop/engine-wp
getpop/field-query
getpop/guzzle-helpers
getpop/hooks
getpop/hooks-wp
getpop/loosecontracts
getpop/mandatory-directives-by-configuration
getpop/modulerouting
getpop/query-parsing
getpop/root
getpop/routing
getpop/routing-wp
getpop/translation
getpop/translation-wp
graphql-api/markdown-convertor
</code></pre>
<p>API functionality:</p>
<pre><code>getpop/api
getpop/api-clients
getpop/api-endpoints
getpop/api-endpoints-for-wp
getpop/api-graphql
getpop/api-mirrorquery
</code></pre>
<p>GraphQL server functionality:</p>
<pre><code>graphql-by-pop/graphql-clients-for-wp
graphql-by-pop/graphql-endpoint-for-wp
graphql-by-pop/graphql-parser
graphql-by-pop/graphql-query
graphql-by-pop/graphql-request
graphql-by-pop/graphql-server
</code></pre>
<p>Data model:</p>
<pre><code>pop-schema/basic-directives
pop-schema/categories
pop-schema/categories-wp
pop-schema/comment-mutations
pop-schema/comment-mutations-wp
pop-schema/commentmeta
pop-schema/commentmeta-wp
pop-schema/comments
pop-schema/comments-wp
pop-schema/custompost-mutations
pop-schema/custompost-mutations-wp
pop-schema/custompostmedia
pop-schema/custompostmedia-mutations
pop-schema/custompostmedia-mutations-wp
pop-schema/custompostmedia-wp
pop-schema/custompostmeta
pop-schema/custompostmeta-wp
pop-schema/customposts
pop-schema/customposts-wp
pop-schema/generic-customposts
pop-schema/media
pop-schema/media-wp
pop-schema/menus
pop-schema/menus-wp
pop-schema/meta
pop-schema/metaquery
pop-schema/metaquery-wp
pop-schema/pages
pop-schema/pages-wp
pop-schema/post-categories
pop-schema/post-categories-wp
pop-schema/post-mutations
pop-schema/post-tags
pop-schema/post-tags-wp
pop-schema/posts
pop-schema/posts-wp
pop-schema/queriedobject
pop-schema/queriedobject-wp
pop-schema/schema-commons
pop-schema/tags
pop-schema/tags-wp
pop-schema/taxonomies
pop-schema/taxonomies-wp
pop-schema/taxonomymeta
pop-schema/taxonomymeta-wp
pop-schema/taxonomyquery
pop-schema/taxonomyquery-wp
pop-schema/user-roles
pop-schema/user-roles-access-control
pop-schema/user-roles-wp
pop-schema/user-state
pop-schema/user-state-access-control
pop-schema/user-state-mutations
pop-schema/user-state-mutations-wp
pop-schema/user-state-wp
pop-schema/usermeta
pop-schema/usermeta-wp
pop-schema/users
pop-schema/users-wp
</code></pre>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      💁🏻‍♀️ Why the GraphQL API needs a Monorepo, and How it&#39;s optimized
      
    </title>
    <link href="https://gatographql.com/blog/extending-the-monorepo-builder/"/>
    <updated>2021-03-27T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/extending-the-monorepo-builder/</id>
    <content type="html"><![CDATA[
      <p>A few days ago I published article <a href="https://blog.logrocket.com/hosting-all-your-php-packages-together-in-a-monorepo/">Hosting all your PHP packages together in a monorepo</a>, explaining why we may want to use a monorepo to manage our PHP codebase, and how to do it via the <a href="https://github.com/symplify/monorepo-builder">Monorepo Builder</a>.</p>
<p>Here I'd like to complement that article, explaining a bit more in detail why the <a href="https://github.com/GatoGraphQL/GatoGraphQL"><code>GatoGraphQL/GatoGraphQL</code> codebase</a> (which hosts the GraphQL API for WordPress, its underlying engine <a href="https://graphql-by-pop.com/">GraphQL by PoP</a>, and the component-model architecture over which it is based) needs to be hosted on a monorepo, and the optimizations I've made for it.</p>
<h2>Why the GraphQL API needs a monorepo</h2>
<p>In order to <a href="https://graphql-by-pop.com/docs/architecture/cms-agnosticism.html">support CMS-agnosticism</a>, the codebase for the GraphQL API and associated projects was split into a multitude of packages, managed via Composer. In total, over 100 packages were created! (Currently, the number is over 200.)</p>
<p>The big number of packages adds no extra complexity for assembling them all together via Composer: we just run <code>composer install</code>, and everything works. However, it does become problematic for development when each single package lives on its own repository, because of versioning.</p>
<p>Each package must be versioned, and every version of a package will depend on some version of another package. With so many packages, configuring how all versions depend on each other when creating PRs would become a nightmare, resembling a plate of spaghetti code, where you can see the tip of one noodle, but you don't know where it ends.</p>
<p><img src="/images/spaghetti-the-other-end.jpg" alt="Searching for the other end" title="Searching for the other end"></p>
<p>Truth is, it became so difficult to link all the versions of the multiple branches from all the involved repositories, that I'd directly skip this process altogether, pushing the code straight to the <code>master</code> branch on each repo, and then depend on the <code>dev-master</code> version across each.</p>
<p>It was not proper. Switching to the monorepo model, hosting all code in <code>GatoGraphQL/GatoGraphQL</code>, has effectively solved the problem.</p>
<h3>Welcome side-effect: Lower barrier for contributions</h3>
<p>As I mentioned in the article, back in the day when the project used one repo per package, one contributor abandoned the project before even joining, from his inability to set-up the working environment.</p>
<p>Before switching to the monorepo, setting-up the development environment was very difficult. Since I was the author, I could manage to clone all the repos, and add them all together under a single VSCode workspace, so it kind-of-worked for me.</p>
<p>I tried to make it easier for potential contributors to set-up the same environment, via <a href="https://github.com/GraphQLAPI/graphql-api-for-wp/blob/9eacd84a90030bd7f281a73217cf088fe71e23f7/dev-helpers/scripts/clone-all-dependencies-from-github.sh">this bash script</a>. But seriously, that could never work, it was a lost battle from the very beginning, and nobody could start contributing to the project.</p>
<p>With the monorepo, I can sleep at night soundly, knowing that I won't be rejecting contributors with unreasonable bureaucracy, if they ever want to become involved.</p>
<h2>Optimizing the monorepo</h2>
<p>As I mentioned in the article, the advantage of using the Monorepo Builder library over the alternatives, is that it is built with PHP, and that we can extend it.</p>
<p>For instance, when doing a push to <code>master</code> and splitting the monorepo, the matrix in the GitHub Action will normally spawn one runner instance per package, to synchronize its code with its own repository (for distribution via Packagist).</p>
<p>Because <code>GatoGraphQL/GatoGraphQL</code> contains over 200 packages, that meant that over 200 runner instances were being launched.</p>
<p><img src="/images/github-action-over-200-packages.png" alt="Processing over 200 packages" title="Processing over 200 packages"></p>
<p>The issue here is that <a href="https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration#usage-limits">GitHub gives you a limit of 20 jobs running in parallel</a>. Because all actions are placed in a queue, I needed to wait for them to finish, to continue executing other actions.</p>
<p>In addition, every so often GitHub will not provision a runner immediately, and make you wait until some later time:</p>
<p><img src="/images/github-action-waiting-for-runner-instance.png" alt="Waiting for runners to become available" title="Waiting for runners to become available"></p>
<p>All of this translates into waiting time. With over 200 packages, merging a single PR could take up to 1 hour! This is an issue that needed solving.</p>
<p>Extending the monorepo with custom commands can solve the problem.</p>
<h3>Extending the Monorepo builder</h3>
<p>Normally, when executing the following command, we will obtain the list of all packages in the repo:</p>
<pre class="language-bash"><code class="language-bash"><span class="highlight-line">vendor/bin/monorepo-builder packages-json</span></code></pre>
<p><img src="/images/monorepo-builder-packages-json-command.png" alt="Retrieving the list of all packages in the repo" title="Retrieving the list of all packages in the repo"></p>
<p>But then I thought: there is no need to synchronize all packages, but only those containing code that was modified in the PR.</p>
<p>If we can find out the list of modified files, we can calculate which are the modified packages that contain them. In other words: execute <code>git diff</code>, and feed the results to command <code>packages-json</code>, via a <code>filter</code> input, like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="highlight-line">vendor/bin/monorepo-builder packages-json --filter<span class="token operator">=</span>modified_file_1 --filter<span class="token operator">=</span>modified_file_2 --filter<span class="token operator">=</span><span class="token punctuation">..</span>.</span></code></pre>
<p>Now, the <code>packages-json</code> command shipped with the Monorepo Builder does not accept a <code>filter</code> input. So this is where we must extend it with our custom commands.</p>
<p>The Monorepo builder uses <a href="https://symfony.com/doc/current/service_container.html">Symfony's DependencyInjection</a>, so it can be extended by injecting new services into its container. Indeed, the configuration file <code>monorepo-builder.php</code> is already a <a href="https://symfony.com/doc/current/service_container/configurators.html#using-the-configurator">service configurator</a>.</p>
<p>So I extended the Monorepo builder with a <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/5377cfb540a9c8c7baf632912a3504c65097fa5f/src/Extensions/Symplify/MonorepoBuilder/Command/PackageEntriesJsonCommand.php">new command named <code>package-entries-json</code></a>, which supports the <code>filter</code> input:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PackageEntriesJsonCommand</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSymplifyCommand</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">private</span> <span class="token class-name type-declaration">PackageEntriesJsonProvider</span> <span class="token variable">$packageEntriesJsonProvider</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">PackageEntriesJsonProvider</span> <span class="token variable">$packageEntriesJsonProvider</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">packageEntriesJsonProvider</span> <span class="token operator">=</span> <span class="token variable">$packageEntriesJsonProvider</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Provides package entries in json format. Useful for GitHub Actions Workflow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">addOption</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">FILTER</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token constant">null</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token class-name static-context">InputOption</span><span class="token operator">::</span><span class="token class-name">VALUE_OPTIONAL</span> <span class="token operator">|</span> <span class="token class-name">InputOption</span><span class="token operator">::</span><span class="token constant">VALUE_IS_ARRAY</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'Filter the packages to those from the list of files. Useful to split monorepo on modified packages only'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">[</span><span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name type-declaration">InputInterface</span> <span class="token variable">$input</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">OutputInterface</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token comment">/** @var string[] $fileFilter */</span></span><br><span class="highlight-line">    <span class="token variable">$fileFilter</span> <span class="token operator">=</span> <span class="token variable">$input</span><span class="token operator">-></span><span class="token function">getOption</span><span class="token punctuation">(</span><span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">FILTER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token variable">$packageEntries</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">packageEntriesJsonProvider</span><span class="token operator">-></span><span class="token function">providePackageEntries</span><span class="token punctuation">(</span><span class="token variable">$fileFilter</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// must be without spaces, otherwise it breaks GitHub Actions json</span></span><br><span class="highlight-line">    <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token class-name static-context">Json</span><span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$packageEntries</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">symfonyStyle</span><span class="token operator">-></span><span class="token function">writeln</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token class-name static-context">ShellCode</span><span class="token operator">::</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It is injected into the service container <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/ba20f72ef087f743962bb315003022924bf60a8c/monorepo-builder.php#L100">like this</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">return</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ContainerConfigurator</span> <span class="token variable">$containerConfigurator</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$services</span> <span class="token operator">=</span> <span class="token variable">$containerConfigurator</span><span class="token operator">-></span><span class="token function">services</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token variable">$services</span><span class="token operator">-></span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">autowire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">autoconfigure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token variable">$services</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">PackageEntriesJsonCommand</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now, the new command named <code>package-entries-json</code> will be available to the GitHub Action workflow.</p>
<h3>Obtaining the list of modified files in the GitHub Action</h3>
<p>Let's now see how to update the workflow.</p>
<p>I conveniently use action <a href="https://github.com/technote-space/get-diff-action"><code>technote-space/get-diff-action</code></a>, which provides the <code>git diff</code> of all <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/8dd917acef21c0d393fa2f461dfdc1349e26c8ea/.github/workflows/split_monorepo.yaml#L29-L32">modified files in the PR</a>:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token comment"># git diff to generate matrix with modified packages only</span></span><br><span class="highlight-line"><span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> technote<span class="token punctuation">-</span>space/get<span class="token punctuation">-</span>diff<span class="token punctuation">-</span>action@v4</span><br><span class="highlight-line">  <span class="token key atrule">with</span><span class="token punctuation">:</span></span><br><span class="highlight-line">    <span class="token key atrule">PATTERNS</span><span class="token punctuation">:</span> layers/<span class="token important">*/*/*/**</span></span></code></pre>
<p>From these results (stored under <code>${{ env.GIT_DIFF }}</code>) I then generate the call to the custom command <code>package-entries-json</code>, and <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/8dd917acef21c0d393fa2f461dfdc1349e26c8ea/.github/workflows/split_monorepo.yaml#L40">set it as an output</a>:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> output_data</span><br><span class="highlight-line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> Calculate matrix for packages</span><br>  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br><span class="highlight-line">    quote=\'</span><br><span class="highlight-line">    clean_diff="$(echo "${{ env.GIT_DIFF }}" | sed -e s/$quote//g)"</span><br><span class="highlight-line">    packages_in_diff="$(echo $clean_diff | grep -E -o 'layers/[A-Za-z0-9_\-]*/[A-Za-z0-9_\-]*/[A-Za-z0-9_\-]*/' | sort -u)"</span><br><span class="highlight-line">    echo "[Packages in diff] $(echo $packages_in_diff | tr '\n' ' ')"</span><br><span class="highlight-line">    filter_arg="--filter=$(echo $packages_in_diff | sed -e 's/ / --filter=/g')"</span><br>    echo "::set-output name=matrix::$(vendor/bin/monorepo-builder package-entries-json $(echo $filter_arg))"</span></code></pre>
<p>The resulting packages are then used to <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/8dd917acef21c0d393fa2f461dfdc1349e26c8ea/.github/workflows/split_monorepo.yaml#L51-L52">create the matrix</a>:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token key atrule">outputs</span><span class="token punctuation">:</span></span><br><span class="highlight-line">  <span class="token key atrule">matrix</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.output_data.outputs.matrix <span class="token punctuation">}</span><span class="token punctuation">}</span></span></code></pre>
<p>It works great! In <a href="https://github.com/GatoGraphQL/GatoGraphQL/runs/2191625393?check_suite_focus=true#step:6:13">this instance</a>, only two packages were modified, and so only 2 instances were launched in the matrix:</p>
<p><img src="/images/monorepo-git-diff.jpg" alt="Obtaining the list of modified packages" title="Obtaining the list of modified packages"></p>
<p>Now, merging the PR might take just a few minutes (down from 1 hour), so I'm a happy developer once again.</p>
<h2>Further Optimizations/Challenges</h2>
<p>There is another instance in which I can reduce time from GitHub Action: when executing the PHPUnit tests.</p>
<p>Currently, whenever a new piece of code is uploaded, the whole battery of tests for all packages is executed. But once again, this can be optimized.</p>
<p>Let's say that the monorepo contains 3 packages: A, B and C, where B depends on A, and C depends on B.</p>
<p>Then, if we modify code from a single package alone, the tests that require execution will vary:</p>
<ul>
<li>Modify code from A: must test A, B and C</li>
<li>Modify code from B: must test B and C</li>
<li>Modify code from C: must test C</li>
</ul>
<p>The optimization will then depend on obtaining the list of modified packages (as in the previous optimization), and execute tests for them and for all packages that depend on them.</p>
<p>However, I currently do not possess the information of how every package in the monorepo depends on each other.</p>
<p>Even though the root <code>composer.json</code> contains all the local packages, I can't obtain their dependencies via Composer by executing <code>composer info ${ package_name }</code>, because they have been defined in the <a href="https://getcomposer.org/doc/04-schema.md#replace"><code>replace</code> section</a>, instead of <code>require</code>.</p>
<p>Alternatively, I could step into every package's subfolder, execute <code>composer install</code>, and then do <code>composer info</code>. But executing <code>composer install</code> over 200 times would be sheer madness.</p>
<p>Hence, I have not optimized this scenario yet. I've so far <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/273">created the issue</a>, and hope to eventually find a solution.</p>
<h2>Wrapping up</h2>
<p>I must say I'm extremely happy from discovering the Monorepo Builder. I don't think I could be able to manage the codebase for the GraphQL API otherwise.</p>
<p>I'm not saying that every project should use it. But when you have over 200 packages, like in my case, or possibly even over 20, then it absolutely simplifies your life.</p>
<p>Managing the monorepo does take a bit time and effort to set-up and maintain, but I save that time and effort multiple times every day, just from ongoing development.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🎙 WPMRR Podcast: Growing a Powerful Decoupled WordPress Solution
      
    </title>
    <link href="https://gatographql.com/blog/wpmrr-podcast-growing-a-powerful-decoupled-wordpress-solution/"/>
    <updated>2021-03-20T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/wpmrr-podcast-growing-a-powerful-decoupled-wordpress-solution/</id>
    <content type="html"><![CDATA[
      <p>Joe Howard, host from the WPMRR podcast, interviewed me (Leonardo Losoviz) for his show. We talked about many things, mostly concerning decoupled WordPress (and GraphQL in particular), and the ongoing challenges of the business of building a plugin.</p>
<p>I think it came out great. The questions were really good, and I made my best to provide honest responses, showing the picture as it is (or, at least, as I'm experiencing it while building the GraphQL API). I'll encourage you to <a href="https://wpmrr.com/podcast/leonardo-losoviz-graphql-api/">check out the podcast</a>.</p>
<p>The interview is also on Youtube:</p>
<iframe width="1141" height="642" src="https://www.youtube.com/embed/0Ob_iAxUXHY?start=48" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>Timestamps:</p>
<p>⏱️ 00:00 -​ Intro by WP Buffs<br/>
⏱️ 00:48 -​ Welcome to the pod, Leonardo!<br/>
⏱️ 01:31 -​ The freedom of building websites as a hobby<br/>
⏱️ 03:42 -​ What is GraphQL API?<br/>
⏱️ 11:26 -​ Security issues on open source API<br/>
⏱️ 16:22 -​ Pulling SEO data on a decoupled site<br/>
⏱️ 21:05 -​ The struggles of promoting a product<br/>
⏱️ 25:44 -​ How do you rate success?<br/>
⏱️ 29:45 -​ Coming soon: a behind-the-scene monthly newsletter on plugin development<br/>
⏱️ 33:03 -​ The building-in-public strategy<br/>
⏱️ 37:02 -​ Strategies to eventually compete in the plugin market<br/>
⏱️ 42:43 -​ Find Leonardo online!</p>
<p>I hope you enjoy it!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      💬 Proposing a new approach for &#39;Gutenberg and Decoupled Applications&#39;
      
    </title>
    <link href="https://gatographql.com/blog/proposing-a-new-approach-for-gutenberg-and-decoupled-applications/"/>
    <updated>2021-03-13T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/proposing-a-new-approach-for-gutenberg-and-decoupled-applications/</id>
    <content type="html"><![CDATA[
      <p>A few days ago, WPGraphQL's creator Jason Bahl published <a href="https://www.wpgraphql.com/2021/03/09/gutenberg-and-decoupled-applications/">Gutenberg and Decoupled Applications</a>, analyzing the benefits and shortcomings of 3 approaches to integrating GraphQL with Gutenberg.</p>
<p>A week earlier, he had also <a href="https://twitter.com/jasonbahl/status/1365713792412184576">said on Twitter</a> that the GraphQL API for WordPress's approach to modeling Gutenberg is inappropriate:</p>
<blockquote>
<p>This isn’t something to brag about, in my opinion. One thing GraphQL tries to solve with a Typed Schema is providing predictability and consistency for clients, and giving clients control to ask for what they want, down to the field.</p>
<p>Returning a wildcard “Object” Type with no predictable shape means client applications can break at any time because there’s no longer a contract between the Server and the client. The server now has taken away control from the client.</p>
</blockquote>
<p>Through this article, I join the conversation. I'll address Jason's criticism and, in doing so, describe my plugin's approach, and show why I believe it can actually suit Gutenberg very well.</p>
<h2>Using COPE to extract Gutenberg metadata</h2>
<p>My solution could be considered the 4th approach, and it's the following:</p>
<p>To obtain the Gutenberg data to power GraphQL, do not create an additional schema on the PHP side, or duplicate any existing data. Instead, extract the data from the blocks' stored content, using the COPE (&quot;Create Once, Publish Everywhere&quot;) strategy.</p>
<p>(COPE is a strategy that enables to have a single source of truth of content, and expose it to different applications. In our case, the single source of truth is the Gutenberg block data, as it is stored in the database. I have described COPE, and its implementation for WordPress, in <a href="https://www.smashingmagazine.com/2019/10/create-once-publish-everywhere-wordpress/">this article</a>.)</p>
<p>Finally, we can use GraphQL to retrieve the extracted data, for any Gutenberg block, by mapping all blocks to a single <code>Block</code> type.</p>
<h2>This strategy is a trade-off, not a definitive solution</h2>
<p>This strategy does not solve the issue that Jason is pointing out: the lack of a schema on the server-side, which would enable the creation of a contract between the server and the client.</p>
<p>COPE can't solve this issue because, solely from the stored content, we can't recreate the schema:</p>
<ul>
<li>The stored content does not indicate the type of the field</li>
<li>The stored content does not indicate what restrictions the field has (is it nullable? is it a positive integer? is the string for an email or an URL?)</li>
<li>Nullable fields can have a default value, which won't be present on the stored content</li>
</ul>
<p>However, using the COPE strategy, and a single <code>Block</code> type to represent all blocks, the GraphQL API plugin can build a very decent integration with Gutenberg, that overcomes the existing limitations.</p>
<p>I'll explain throughout this article.</p>
<h2>GraphQL API's integration with Gutenberg</h2>
<p>This solution is a work in progress, but I can already explain how it will behave.</p>
<p>Instead of depending on a different type per block (as WPGraphQL does when relying on the <a href="https://github.com/pristas-peter/wp-graphql-gutenberg">WPGraphQL for Gutenberg</a> plugin), the GraphQL API plugin will provide a single <code>Block</code> type to represent all blocks.</p>
<p>In this query, the field <code>Post.blockDataItems</code> retrieves a list of <code>Block</code> elements from the post (for different Gutenberg blocks, including paragraphs, images, lists, and others):</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1499</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    blockDataItems</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>If we want to retrieve data for a specific block, we can filter based on the block's name (<code>core/paragraph</code>, <code>core/quote</code>, etc).</p>
<p>In this query, we only retrieve the image blocks:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1177</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    blockDataItems<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">filterBy</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">include</span><span class="token punctuation">:</span> <span class="token string">"core/image"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Inspecting the single <code>Block</code> type</h2>
<p>With this approach, the response can vary depending on the stored content, not on a schema. This quality is both its advantage (since it makes the API flexible) and its disadvantage (we can't enforce server-client contracts).</p>
<p>Every <code>Block</code> element contains two properties:</p>
<ul>
<li><code>name</code>: The name of the block (<code>core/paragraph</code>, <code>core/quote</code>, etc)</li>
<li><code>meta</code>: The metadata contained in the block</li>
</ul>
<p>Every Gutenberg block is different, containing different data (a paragraph content, a Youtube video, an image source URL and dimensions, etc). Hence, the data contained in the response for the <code>meta</code> field will also be different.</p>
<p>As such, the <code>meta</code> field has been mapped simply as a JSON object (which can contain &quot;raw&quot; data), via a corresponding <code>JSONObject</code> type in the GraphQL schema.</p>
<p>It produces this response:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"post"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"COPE with WordPress: Post demo containing plenty of blocks"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"blockDataItems"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"core/paragraph"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"Lorem ipsum dolor sit amet"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"core/image"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"https://ps.w.org/gutenberg/assets/banner-1544x500.jpg"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"core/quote"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"quote"</span><span class="token operator">:</span> <span class="token string">"Etiam tempor orci eu lobortis elementum nibh tellus molestie"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token property">"cite"</span><span class="token operator">:</span> <span class="token string">"Aristoteles"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"core/heading"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"size"</span><span class="token operator">:</span> <span class="token string">"xl"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token property">"heading"</span><span class="token operator">:</span> <span class="token string">"Welcome to my site"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"core/list"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"attributes"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">              <span class="token string">"First element"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">              <span class="token string">"Second element"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">              <span class="token string">"Third element"</span></span><br><span class="highlight-line">            <span class="token punctuation">]</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>As we can see, we have different blocks retrieving different properties:</p>
<ul>
<li><code>core/paragraph</code> has property <code>content</code></li>
<li><code>core/image</code> has property <code>src</code>, and optionally properties <code>width</code>, <code>height</code> and <code>caption</code> (not appearing in the response above)</li>
<li><code>core/quote</code> has properties <code>quote</code> and <code>cite</code> (for the quoted person)</li>
<li><code>core/heading</code> has properties <code>header</code> and <code>size</code> (value <code>xl</code> represents <code>&lt;h2&gt;</code>, because COPE decouples the value from the target application, in this case a website)</li>
<li><code>core/list</code> has property <code>items</code>, which is a list of elements</li>
</ul>
<h2>Why the <code>JSONObject</code> type is not part of the spec</h2>
<p>The <code>JSONObject</code> type I described above allows GraphQL to retrieve &quot;dynamic&quot; fields (such as fields that we don't know of), or fields which can have multiple configurations (as may be the case with Gutenberg blocks).</p>
<p>Now, the <a href="https://spec.graphql.org/">GraphQL spec</a> currently does not support the <code>JSONObject</code> or <code>Map</code> types. Adding support <a href="https://github.com/graphql/graphql-spec/issues/101">has been requested</a>, for reasons <a href="https://github.com/graphql/graphql-spec/issues/101#issuecomment-386836767">such as</a>:</p>
<blockquote>
<p>[...] the lack of this feature is particularly problematic because it's supported in many of the type systems and services that GraphQL interfaces with.</p>
<p>This leads to implementing custom resolvers on the server, followed by custom transforms on the client, to deal with situations where my server is sending a Map, and my client wants a Map, and GraphQL is in the middle with no support for Maps. Yes, <strong>it is possible, and I have done it</strong>, but it is fair bit of boilerplate and abstraction that seems to defeat the purpose of <strong>writing the API spec in GraphQL</strong>.</p>
</blockquote>
<p>This feature is not supported by the spec because dealing with dynamic fields goes against GraphQL's strong typing behavior, which breaks the contract between the server and the client.</p>
<p>Still, this type can be benefitial to Gutenberg, as I will show later on.</p>
<h2>Problems when using a different type per block, and a server-side registry</h2>
<p>If creating a new GraphQL type per block, then all plugins must have their blocks be added to the GraphQL schema. This could be automatically accomplished by having all blocks define their properties on the <a href="https://www.wpgraphql.com/2021/03/09/gutenberg-and-decoupled-applications/#whats-next">proposed new server-side registry</a>.</p>
<p>If they don't, their blocks will be unavailable to the API, and this can have additional consequences. In some circumstances, the whole queried post's content may become unreliable.</p>
<p>This may be the case when GraphQL interacts with an external cloud-based service, which applies some function to all the blocks in the post (think of translation, fixing grammar, SEO suggestions, analytics, etc).</p>
<p>Let's see an example of this.</p>
<p>Since multilingual capabilities will be added to Gutenberg in phase 4, let's model how to translate all blocks in the plugin, via a call to the Google Translate API executed via a <code>@strTranslate</code> directive.</p>
<p>(After this initial API-based translation, the user can keep editing the blog post, in the translated language, always within the WordPress editor.)</p>
<p>Different blocks contain different pieces of information that must be translated:</p>
<ul>
<li><code>core/paragraph</code>: the text</li>
<li><code>core/image</code>: the caption</li>
<li><code>core/quote</code>: the quote, and the quoted person (since it could be the person's title, such as &quot;The school headmaster&quot;)</li>
<li><code>core/heading</code>: the header</li>
<li><code>core/list</code>: all the items in the list</li>
</ul>
<p>Using a different type per block, the resulting query may be something like this:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    blocks <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">CoreParagraphBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        content <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">CoreImageBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        caption <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">CoreQuoteBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        quote <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">        cite <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">CoreHeadingBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        heading <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">CoreListBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        items <span class="token directive function">@strTranslateList</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">EmbedTwitterBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        caption <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">EmbedYoutubeBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        caption <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token operator">...</span> <span class="token keyword">on</span> <span class="token class-name">EmbedVimeoBlock</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        caption <span class="token directive function">@strTranslate</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And so on and on. The more blocks we have, the longer this query will be, easily spanning a hundred lines and even more.</p>
<p>The obvious problem is that the query becomes a wild beast that we need to maintain.</p>
<p>Also, we need to introduce custom functionality to make it work for every block. For instance, <code>@strTranslate</code> doesn't work with <code>CoreListBlock.items</code>, which returns a list of strings (i.e. it returns <code>[String]</code>, while the directive expects <code>String</code>), and so we have to create <code>@strTranslateList</code>.</p>
<p>And then <code>core/table</code> would need its own custom directive (<code>@strTranslateTable</code>?).</p>
<p>And custom 3rd-party blocks may need their own custom directives.</p>
<p>And then, I see a couple more issues.</p>
<h3>It's all or nothing</h3>
<p>A blog post may contain any block installed in the WordPress editor. And we don't know in advance (when coding the query) what blocks does the post consume.</p>
<p>Then, at one type per block, the number of types to handle in the query will not be equivalent to the number of blocks in the post. Instead, it will be equivalent to the <strong>number of blocks installed in the WordPress editor</strong>.</p>
<p>What happens if we have 100 blocks on our site, including both from WordPress core and plugins? Then we need to have 100 types mapped to the GraphQL schema. A single one that is not mapped can break the &quot;content contract&quot;, resulting in some blocks being translated from English to French, while others remain in English.</p>
<p>As a result, we won't be able to trust the translated posts anymore, whether they contain the offending block or not. So if not all blocks are added to the registry, then the application may become unreliable.</p>
<h3>The query must be updated every time a new block is installed</h3>
<p>Likewise, every block must be handled on the GraphQL query. That means that, whenever installing a new block, we need to go to our application's code, update it, and re-deploy it.</p>
<p>This is not just extra bureaucracy: We won't be able to install a block on a live site, without the fear of breaking the application (until all queries are updated).</p>
<h2>GraphQL must serve WordPress, not the other way around</h2>
<p>Considering again why the <code>JSONObject</code> was not added to the GraphQL spec, it is because it doesn't suit the GraphQL way of doing things.</p>
<p>However, here we are not truly concerned with GraphQL. We only care about WordPress and, more specifically in this case, Gutenberg.</p>
<p>When integrating GraphQL with Gutenberg, GraphQL will operate within the context of WordPress. That means that WordPress will need to satisfy the requirements from GraphQL. But more importantly, it is GraphQL that needs to satisfy the requirements from WordPress.</p>
<p>And in case of conflict, <strong>WordPress has priority</strong>.</p>
<p>If a feature does not suit GraphQL, but it nevertheless suits Gutenberg, should it considered?</p>
<p>I think it should.</p>
<p>Let's see how a single <code>Block</code> type can better serve Gutenberg.</p>
<h2>Solving the previous problems via a single <code>Block</code> type</h2>
<p>Following the previous example, translating all the blocks in a post from English to French, using a single <code>Block</code> type, will be done like this (or something around this concept):</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    blocks <span class="token punctuation">{</span></span><br><span class="highlight-line">      name</span><br><span class="highlight-line">      meta</span><br><span class="highlight-line">        <span class="token directive function">@advancePointersInArray</span><span class="token punctuation">(</span><span class="token attr-name">paths</span><span class="token punctuation">:</span> <span class="token string">"{{ translatablePaths }}"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">          <span class="token directive function">@underEachArrayItem</span></span><br><span class="highlight-line">            <span class="token directive function">@strTranslate</span><span class="token punctuation">(</span><span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token attr-name">to</span><span class="token punctuation">:</span> <span class="token string">"fr"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>That's it? The whole query? To translate all blocks? Yes.</p>
<p>Will it work for all blocks, from both core and plugins, already existing or yet-to-be-created? Yes.</p>
<p>Does this query look a bit strange to you? If it does, it's because it uses non-standard GraphQL features, supported only by the GraphQL API plugin:</p>
<ul>
<li><code>{{ translatablePaths }}</code> is an embeddable field, to input the value of a field as argument to another field or directive (in this case, the <code>Block</code> type will have a field <code>translatableFields</code>, whose value is injected to directive <code>@advancePointersInArray</code>)</li>
<li>directives can <a href="/guides/special-features/composable-directives/">be composed by other directives</a></li>
</ul>
<p>Now, if a feature satisfies exactly what the CMS needs, but the feature is non-standard, should we still use it? I think we should.</p>
<p>I have also requested these features for the GraphQL spec (even though, they will not be accepted):</p>
<ul>
<li><a href="https://github.com/graphql/graphql-spec/issues/682">#682: [RFC] Composable fields</a></li>
<li><a href="https://github.com/graphql/graphql-spec/issues/683">#683: [RFC] Composable directives</a></li>
</ul>
<h2>How the single <code>Block</code> type works</h2>
<p>Warning: technical section ahead.</p>
<p>The <code>Block</code> type will have a field <code>translatablePaths</code>, returning an array of the properties from the <code>JSONObject</code> that must be translated:</p>
<ul>
<li><code>core/paragraph</code> returns <code>[&quot;content&quot;]</code></li>
<li><code>core/image</code> returns <code>[&quot;caption&quot;]</code></li>
<li><code>core/quote</code> returns <code>[&quot;quote&quot;, &quot;cite&quot;]</code></li>
<li><code>core/heading</code> returns <code>[&quot;header&quot;]</code></li>
<li><code>core/list</code> returns <code>[&quot;items.0&quot;, &quot;items.1&quot;, &quot;items.2&quot;, ...]</code></li>
</ul>
<p><a href="/guides/schema/using-composable-directives/#heading-@advancepointerinarray"><code>@advancePointersInArray</code></a> is a meta-directive: it modifies the context for a subsequent directive. It makes the subsequent directive receive a sub-element from within the queried <code>JSONObject</code>, such as the <code>content</code> property from the paragraph block. The list of paths is obtained via field <code>translatablePaths</code>, evaluated on the same queried entity.</p>
<p>Then, <a href="/guides/schema/using-composable-directives/#heading-@foreach"><code>@underEachArrayItem</code></a> is another meta-directive, which iterates over a list of elements from the queried entity, and passes a reference to the iterated element to the next directive. In this case, it gets all the list of the properties to translate for all entities, each of them of type <code>String</code>, and passes individual <code>String</code> elements down the line.</p>
<p>Finally, directive <code>@strTranslate</code> receives an element of type <code>String</code> contained within the <code>JSONObject</code>, and it translates it right there, within the <code>JSONObject</code> itself.</p>
<p>Please notice how flexible this solution is. Just providing the path to the string within the <code>JSONObject</code> is enough to access the value, modify it with <code>@strTranslate</code> (or any other directive), and possibly even store the value again on the DB (work to accomplish this is currently in progress).</p>
<p>It already works for <code>core/list</code>, since all the elements in the list can be reached under their own path (<code>items.0</code> is the 1st element in the array, and so on). Then, it can access the <code>String</code> value from each, and pass it down to <code>@strTranslate</code>, so there is no need to create <code>@strTranslateList</code>.</p>
<p>Similarly, it will also work with <code>core/table</code>. We just need to expose the data via property <code>cells</code>, which will be an array of 2 dimensions (one for rows, containing one for columns). Then, <code>translatablePaths</code> can reach all elements as <code>[&quot;cells.0.0&quot;, &quot;cells.0.1&quot;, &quot;cells.1.0&quot;, ...]</code>.</p>
<p>And it will work for any 3rd-party block too. For that, we must pay attention how the block data is stored, and from there we can deduce the path to its properties.</p>
<h2>A single <code>Block</code> requires configuration, based on PHP code</h2>
<p>Mapping the blocks, so that we know where to find their metadata properties, can be accomplished through configuration. So we can deal with it in a very flexible way.</p>
<p>In Gutenberg, there are two places where a property from the block can be stored: as an attribute, or inside the rendered content.</p>
<p>For instance, this is how the <code>core/image</code> block is stored:</p>
<pre class="language-html"><code class="language-html"><span class="highlight-line"><span class="token comment">&lt;!-- wp:image {"id":1670,"sizeSlug":"large","linkDestination":"none"} --></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wp-block-image size-large<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://newapi.getpop.org/wp/wp-content/uploads/2021/01/dynamic-include-first-query.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wp-image-1670<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><br><span class="highlight-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></span><br><span class="highlight-line"><span class="token comment">&lt;!-- /wp:image --></span></span></code></pre>
<p>In this case, we have:</p>
<ol>
<li>Properties <code>id</code>, <code>sizeSlug</code> and <code>linkDestination</code> are stored as attributes</li>
<li>Property <code>src</code> is stored inside the rendered content</li>
</ol>
<p>Now, when querying the API, the response for the <code>core/image</code> block will be the following:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"blocks"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"core/image"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1670</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"sizeSlug"</span><span class="token operator">:</span> <span class="token string">"large"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"linkDestination"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">          <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"https://newapi.getpop.org/wp/wp-content/uploads/2021/01/dynamic-include-first-query.png"</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The API knows how to retrieve the properties by parsing the stored block in Gutenberg (that is the COPE strategy). This process can be done automatically up to some degree, and then some manual input via hooks, or through some user interface.</p>
<p>To obtain the properties directly mapped as attributes is trivial. The GraphQL server can already retrieve all attributes from the block, and make them available as properties. Or, if we want to explicitly define which ones to expose, we can do it via filter hooks:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token variable">$attrs</span> <span class="token operator">=</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"blockPropsAsAttr:core/image"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"blockPropsAsAttr:core/image"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$attrs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$attrs</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sizeSlug'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'linkDestination'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>The properties stored in the content can be extracted via some regex:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token variable">$propRegexes</span> <span class="token operator">=</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"blockPropsAsRegex:core/image"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"blockPropsAsRegex:core/image"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$propRegexes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$propRegexes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'src'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/&lt;img src="(.*?)"/'</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token variable">$propRegexes</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Finally, we indicate which are the block's translatable properties, for <code>@strTranslate</code> to act upon:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token variable">$propRegexes</span> <span class="token operator">=</span> <span class="token function">apply_filters</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"translatableProperties:core/image"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"translatableProperties:core/image"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$properties</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$properties</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'caption'</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token variable">$properties</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></code></pre>
<p>Now, these properties must still be satisfied by somebody, most likely the plugin developer. Hence, having the server-side registry will help achieve this goal.</p>
<p>But what if the WordPress community does not want to add the proposed server-side registry? Well, this strategy can easily adapt, because the mapping can be done via PHP code, as just shown.</p>
<p>If any block has not been mapped, the user can also do it, just knowing a bit about Gutenberg, and nothing about GraphQL or schemas.</p>
<p>In addition, we can have GraphQL alert the user when there is block that has not been mapped (and so it can't be translated). We can do this by adding an <code>@if</code> meta-directive which, if the condition applies, executes the <code>@sendEmail</code> directive:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    blocks <span class="token punctuation">{</span></span><br><span class="highlight-line">      name</span><br><span class="highlight-line">      meta</span><br><span class="highlight-line">        <span class="token directive function">@advancePointersInArray</span><span class="token punctuation">(</span><span class="token attr-name">paths</span><span class="token punctuation">:</span> <span class="token string">"{{ translatablePaths }}"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">          <span class="token directive function">@underEachArrayItem</span></span><br><span class="highlight-line">            <span class="token directive function">@strTranslate</span><span class="token punctuation">(</span><span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token attr-name">to</span><span class="token punctuation">:</span> <span class="token string">"fr"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token directive function">@if</span><span class="token punctuation">(</span><span class="token attr-name">condition</span><span class="token punctuation">:</span> <span class="token string">"{{ isTranslatablePathsUnmapped }}"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">          <span class="token directive function">@sendEmail</span><span class="token punctuation">(</span></span><br><span class="highlight-line">            <span class="token attr-name">to</span><span class="token punctuation">:</span> <span class="token string">"{{ root.adminEmail }}"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token attr-name">subject</span><span class="token punctuation">:</span> <span class="token string">"Block with name {{ name }} has 'translatablePaths' unmapped"</span></span><br><span class="highlight-line">          <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This solution is flexible and simple, and has GraphQL serving WordPress, without requiring developers to learn a new technology, or changing how Gutenberg works.</p>
<h2>Conclusion</h2>
<p>When thinking of how a possible integration between GraphQL and Gutenberg will look like (from a potential inclusion in WordPress core), we must make sure that GraphQL can handle all the future requirements by Gutenberg, including full support for:</p>
<ul>
<li>multilingual blocks</li>
<li>Full Site Editing</li>
<li>collaborative editing</li>
<li>interacting with 3rd-party services on a live site</li>
</ul>
<p>All of this must be accomplished hopefully without needing to change Gutenberg (at least, not in a considerable way), and reducing the new tasks required from plugin developers.</p>
<p>Taking these into account, I believe that the 4th approach I'm here suggesting can indeed work very well.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      👷🏽‍♂️ Building the GraphQL API in the Open #1 (March &#39;21)
      
    </title>
    <link href="https://gatographql.com/blog/building-in-the-open-episode-1/"/>
    <updated>2021-03-06T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/building-in-the-open-episode-1/</id>
    <content type="html"><![CDATA[
      <p>Welcome to the very first &quot;Building in the Open&quot; newsletter!</p>
<p>This is a channel to share news concerning the development of the GraphQL API for WordPress with the community, sent the first week of each month.</p>
<p>Through this space, we will learn everything that happened during the last month, including:</p>
<p>✅ What we've been working on, what new features we released<br/>
✅ What we will be working on the upcoming month<br/>
✅ Amount of traffic we got on the site<br/>
✅ How did the plugin do: Number of downloads, newsletter subscriptions, GitHub stars<br/>
✅ Progress on achieving financial sustainability<br/>
✅ Newly published guides<br/>
✅ Summary of our recently published blog posts<br/>
✅ Reaching out / Plugin mentions<br/>
✅ General news</p>
<p>If you enjoy this newsletter, please invite your friends to <a href="/newsletter/">subscribe</a>.</p>
<p>Let's start!</p>
<p><strong>Heads up:</strong> This newsletter is a two-way communication channel. If there's anything you'd like to say, be welcome to <a href="#comments">add a comment</a> (at the bottom of the blog post).</p>
<p><img src="/images/building-in-the-open-episode-1/welcome.png" alt="A welcome to the newsletter, by your host"></p>
<h2>What we've been coding on</h2>
<p>If you notice the <a href="/guides/">Guides</a>, section &quot;Extending the GraphQL API&quot; is still pretty empty:</p>
<p><img src="/images/building-in-the-open-episode-1/guides-extending-section.jpg" alt="Guides for &quot;Extending the plugin&quot; are not yet complete" title="Guides for 'Extending the plugin' are not yet complete"></p>
<p>My priority is to complete these guides. But before I do that, I want the plugin's code to be as simple as possible. The simpler it is, the less documentation is required, and the more anyone and everyone is able to understand it.</p>
<p>With this in mind, I've decided to refactor the code, to have it be fully based on <a href="https://symfony.com/doc/current/components/dependency_injection.html">Symfony's DependencyInjection Component</a>.</p>
<p>The idea is that any extension to the plugin (such as a custom <code>TypeResolver</code>, <code>FieldResolver</code> or <code>DirectiveResolver</code>) is simply defined as a service in the container, and the service is automatically configured via <a href="https://symfony.com/doc/current/service_container/compiler_passes.html">Compiler passes</a>.</p>
<p>Fully relying on Symfony's dependency injection has several advantages:</p>
<p>✅ There is a single, consistent way to create extensions<br/>
✅ Just creating a PHP class implementing some interface does the whole job, and the developer needs not be aware of the nitty-gritty details<br/>
✅ Symfony's documentation is very extensive. By pointing developers to it, that is documentation that <strong>I do not need to write</strong></p>
<p>Interested in the code? Check out my latest merged PRs (<a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/453">#453</a>, <a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/452">#452</a>, <a href="https://github.com/GatoGraphQL/GatoGraphQL/pull/449">#449</a> and several others).</p>
<p>I will keep working on this code for the upcoming weeks, until the migration is 100% complete, and I get to write the missing guides.</p>
<h2>Traffic to gatographql.com</h2>
<p>Let me be clear on something: I care about how many people visit the plugin's website, as a proxy to know how many people know about the plugin.</p>
<p>I don't have deep pockets to publicize my plugin. And even if I did, I wouldn't spend my money on promoting it, since that goes against the spirit of open source. (This would be different if open source were just a channel to sell some product or service, but that's not my case.)</p>
<p>That means that I rely fully on word of mouth to promote it. For that, I've been devoting plenty of effort in writing high-quality content for <a href="/blog/">the plugin's blog</a>, hoping this content would get shared around, reaching people who would otherwise not know about the plugin.</p>
<p>And so far, I'm pretty happy with the results.</p>
<p>During the past month, I've had 4.5k visitors, with 6k page views:</p>
<p><img src="/images/building-in-the-open-episode-1/traffic.jpg" alt="Show me the money!" title="Show me the money!"></p>
<p>Let's break down these stats.</p>
<p>Most of my visitors come from Hacker News, where I managed to pull a few &quot;Show HN&quot; front pages, and Reddit, mostly from <a href="https://www.reddit.com/r/PHP/">/r/PHP</a> and <a href="https://www.reddit.com/r/graphql/">/r/graphql</a> (where I always share my articles).</p>
<p>I managed to <a href="https://twitter.com/losoviz/status/1365873932675391488">rank #1 on Google when searching &quot;wordpress core graphql&quot;</a>, and that brought plenty of traffic. Unfortunately, it was a one time-off: after 24hs it went away as suddenly as it arrived. Otherwise, on a typical day I get between 3 and 10 visitors from Google.</p>
<p>Twitter and Facebook bring a sizable amount of traffic, but I don't know from who (not from me, since I am extremely bad at social media). I do share my articles on Twitter, but they seldom get retweeted. And I do not use 👎🏾 Facebook.</p>
<p>(Btw, for those of you who share my articles on social media, thanks ❤️)</p>
<p>I get some modest but consistent traffic from the <a href="https://graphql.org/code/#php">listing of GraphQL servers in PHP on graphql.org</a>, and from <a href="https://dev.to/leoloso/executing-multiple-queries-in-a-single-operation-in-graphql-goe">an article I've published on dev.to</a>, which ranks #1 when <a href="https://www.google.com/search?q=graphql+execute+multiple+queries">googling &quot;graphql execute multiple queries&quot;</a>.</p>
<p>Finally, my articles consistently appear in WordPress' main newsletters (including <a href="https://wpowls.co">WP Owls</a>, <a href="https://wpmail.me/">wpMail.me</a>, <a href="https://poststatus.com/newsletter/">Post Status</a>, <a href="https://wpbuilds.com/">WP Builds</a>, and <a href="https://thewpweekly.com/">The WP Weekly</a>). I don't know exactly how much traffic each of them brings, since the referrer will appear as Gmail and similar others. However, when taken together, these newsletters produce a sizable number of visitors.</p>
<p>My blog posts are by far my most popular content, with the last three (<a href="/blog/why-wordpress-should-have-a-graphql-api-in-core/">this one</a>, <a href="/blog/graphql-api-vs-wpgraphql-the-fight/">this one</a> and <a href="/blog/rejuvenating-wordpress-through-graphql/">this one</a>) bringing over 1k visitors each.</p>
<p>These numbers look pretty good, more since I barely launched the website less than 2 months ago. However, not everything looks good: At 88%, the bounce rate is quite high. I need to work on that.</p>
<h2>Metrics</h2>
<p>Traffic to the site is only a decorative metric, to estimate awareness of the plugin. But far more important to ask is: How many people started using the plugin during the past month?</p>
<p><img src="/images/building-in-the-open-episode-1/multiply.png" alt="My reputation precedes me" title="My reputation precedes me"></p>
<p>During the past month, the plugin fared like this:</p>
<p>🎯 Number of plugin downloads: 170<br/>
⭐️ GitHub stars: 27</p>
<p>The number of downloads can be retrieved from the GitHub API, passing param <code>per_page=3</code> to include only the 3 releases created during the last month:</p>
<pre class="language-bash"><code class="language-bash"><span class="highlight-line"><span class="token function">curl</span> -H <span class="token string">"Accept: application/vnd.github.v3+json"</span> https://api.github.com/repos/GatoGraphQL/GatoGraphQL/releases?per_page<span class="token operator">=</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"download_count"</span></span></code></pre>
<p>I am neither happy nor unhappy about these numbers. They are not great (and I wish they were better), but they are a good start.</p>
<p>Concerning <strong>downloads</strong>, it is said that getting the first user is the most difficult task. Only after a few people start using the plugin, and start talking about it, that its use will become more widespread. I am still within this initial stage of finding the first batch of commited users.</p>
<p>Concerning <strong>GitHub stars</strong>, I must say it looks pretty flat: around 1 star per day on average. This is certainly nothing great. If you like what I'm building with the GraphQL API for WordPress, and you don't mind showing some ❤️ love, then please consider <a href="https://github.com/GatoGraphQL/GatoGraphQL">giving it a ⭐️ star on GitHub</a>.</p>
<h2>Financial Sustainability</h2>
<p>This one is the tough issue: the project must be financially sustainable. It either generates a bit of money, or it won't make it for long.</p>
<p><img src="/images/building-in-the-open-episode-1/cheese.png" alt="In this goes my life" title="In this goes my life"></p>
<p>If I am able to make an income for myself, then I can keep working on it, for as long as needed. That's all I need: an income. Not investors knocking on my door looking for millions. Just a couple thousands per month, to pay for the roof above my head.</p>
<p>My goal is to keep the plugin fully open source. For that, I'm currently reaching out to a couple of potential sponsors, asking if they'd like to help fund the development of the plugin. It will be a win-win situation.</p>
<p>Why am I resorting to some &quot;big guns&quot; sponsors, instead of relying on regular sponsorship, by anyone from the community?</p>
<p>Yes, I've been trying that too: I am on <a href="https://github.com/sponsors/leoloso">GitHub Sponsors</a>. However, it doesn't really work, unless you already have thousands of users, followers, or people subscribed to your mailing list, to whom you can reach out to, expecting many of them to fund you.</p>
<p>For instance, asking for a standard u$d 5 or 10 per month, I'd need several hundred funders for this approach to fund my work. And I'm nowhere near that stage.</p>
<p>But even more, who can really succeed with this approach? I know that Caleb Porzio (creator of Livewire) <a href="https://calebporzio.com/i-just-hit-dollar-100000yr-on-github-sponsors-heres-how-i-did-it">has made it</a>, and has now <a href="https://github.com/sponsors/calebporzio#sponsors">reached over 1350 sponsors</a>! But that's more the exception than the norm.</p>
<p>Take Composer, for instance. Composer has fundamentally changed how we develop PHP applications, yet <a href="https://github.com/sponsors/composer">they barely have 90 sponsors</a>. How could I ever expect to get more sponsors than Composer?</p>
<p>That's why my current approach is to create a win-win situation for my project and the few companies willing to sponsor it. Let's hope it will work out, and the GraphQL API is free for everyone, for all the features, and I don't need to lock the good stuff behind a paywall.</p>
<p>(If you'd like to find out how it's a win-win, please <a href="/contact/">send me an email</a> or <a href="https://twitter.com/losoviz">DM</a>. Maybe your company may be interested too?)</p>
<p>I'll give this approach a few months, hopefully I will make it happen. If I don't succeed, only then I will need to consider building a PRO version of the plugin, and restricting some of the features for the paid version. (Yeah, that would suck, so I hope I can avoid that stage.)</p>
<p>In the upcoming newsletters, I will keep you updated if I managed to get sponsors or not.</p>
<h2>Blog posts</h2>
<p>The blog posts have been my absolute pride and joy.</p>
<p><strong>Heads up:</strong> Did you know there's an <a href="/feed.xml">RSS feed on the site</a>? You can subscribe to receiving all my blog posts, read them on your favorite reader.</p>
<p>During the past month, I've managed to publish a high-quality blog post every week:</p>
<p><a href="/blog/why-wordpress-should-have-a-graphql-api-in-core/">🛠 Should WordPress have a GraphQL API in core?</a> makes the case that WordPress could benefit from GraphQL, since the WP REST API was given a new functionality in WordPress 5.6 (batch operations), that a GraphQL API can deliver natively.</p>
<p><a href="/blog/graphql-api-vs-wpgraphql-the-fight/">🥊 GraphQL API vs WPGraphQL: the fight!</a> compares my plugin with <a href="https://www.wpgraphql.com/">WPGraphQL</a>, on a clash to be remembered for ages to come, and which will keep boxing fans asking for more.</p>
<p><a href="/blog/rejuvenating-wordpress-through-graphql/">👶🏻 Rejuvenating WordPress through GraphQL</a> demonstrates how a headless WordPress can be decoupled from the WordPress codebase, providing an opportunity to fix (or, at least, bypass) the accumulated technical debt.</p>
<p><a href="/blog/graphql-api-for-wp-is-now-scoped-thanks-to-php-scoper/">🍾 GraphQL API for WordPress is now scoped, thanks to PHP-Scoper!</a> describes a strategy to scope a WordPress plugin using <a href="https://github.com/humbug/php-scoper">PHP-Scoper</a>, as to avoid conflicts with other plugins.</p>
<h2>Reaching out / Plugin mentions</h2>
<p>I'm delighted that the plugin has been featured in a few places.</p>
<p>✅ I have given talk &quot;Intro to the GraphQL API for WordPress&quot; in WordCamp India 2021, doing a demo of the plugin, and (surprisingly from doing a demo) it all came out perfectly! Check out <a href="https://www.youtube.com/watch?v=LnyNyT2RwwI">the Youtube video</a>.</p>
<p>✅ Joe Howard has interviewed me for the <a href="https://wpmrr.com/podcast/">WPMRR podcast</a>. The recording will come out soon.</p>
<p>✅ Chris Coyier featured my plugin in the <a href="https://css-tricks.com/newsletter/239-new-css-tricks-and-design-engineers/">CSS-Tricks newsletter #239</a>!</p>
<p><img src="/images/building-in-the-open-episode-1/css-tricks-newsletter.jpg" alt="This made my day" title="This made my day"></p>
<h2>A bit of everything</h2>
<p>Some general news, about anything taking place during the last month.</p>
<h3>Jason Bahl goes to WP Engine</h3>
<p>Congrats to <a href="https://www.wpgraphql.com/2021/02/07/whats-next-for-wpgraphql/">Jason for joining WP Engine</a>! I hope he'll keep rocking, as he's been doing so far for WPGraphQL.</p>
<p>Btw, the fact that we're competitors (well, I'm the one competing with him, he's way far ahead) doesn't mean that we can't be friends, or collaborate to improve each other's projects. Indeed, we both share the same goal: to bring GraphQL to WordPress (even though we have different ideas on how that should happen).</p>
<p>But I believe that competition is good, and it will benefit everyone.</p>
<p><img src="/images/building-in-the-open-episode-1/elephant.gif" alt="Yeah, competition is good, as long as you're the one on top" title="Yeah, competition is good, as long as you're the one on top"></p>
<h3>WP Engine launches Atlas, and claims to know everything about headless (do they?)</h3>
<p>I also congratulate WP Engine for <a href="https://wpengine.com/blog/wp-engine-launches-atlas-the-future-of-headless-wordpress/">launching Atlas</a>, their new headless WordPress solution.</p>
<p>Unfortunately, they state some inaccurate information:</p>
<blockquote>
<p>Companies that use an entirely headless solution will typically host a separate JavaScript application for the front end, which pulls specific WordPress data via APIs—the <a href="https://developer.wordpress.org/rest-api/">WordPress REST API</a> or the <a href="https://www.wpgraphql.com/">WPGraphQL</a> plugin.</p>
</blockquote>
<p>Yeah, the GraphQL API for WordPress does not exist, right?</p>
<p><img src="/images/building-in-the-open-episode-1/invisible.png" alt="Hey there, I'm here, or am I not?" title="Hey there, I'm here, or am I not?"></p>
<p>I would normally not be troubled about this, since I don't expect everyone to know about my plugin. But I do believe that they know about my project, and they seem to be wilfully ignoring it.</p>
<p>After they launched <a href="https://developers.wpengine.com/">developers.wpengine.com</a> (the &quot;one-stop hub for best practices, tutorials, blogs, and documentation for headless WordPress&quot;), I did reach out to them:</p>
<ul>
<li>Matt Landers, Developer Relations at WP Engine for Headless WordPress, <a href="https://twitter.com/losoviz/status/1359686315004993536">on Twitter</a></li>
<li>Their development team, <a href="https://github.com/wpengine/headless-framework/discussions/59">on their headless framework GitHub repo</a></li>
<li>Somebody from Torque (the magazine owned by WP Engine), via DMs with <a href="https://twitter.com/TheTorqueMag">@TheTorqueMag</a>.</li>
</ul>
<p>I guess they haven't taken my project seriously. Or well, maybe they just didn't care about it, since they are fully invested in WPGraphQL.</p>
<p>Now, I'm OK if they don't want to mention my plugin. However, stating that the WP REST API and WPGraphQL are the <strong>only</strong> two options is very misleading. As a consequence, my plugin gets harmed, and the community of developers gets confused.</p>
<p>So then yeah, I must admit I'm annoyed. This is not cool at all. I hope they will rectify their inaccurate information (I sent them an email already).</p>
<h2>Wrapping up</h2>
<p>So this is the end of the first ever &quot;Building the GraphQL API in the open&quot;.</p>
<p>How did you like it? Be welcome to share your thoughts in the comments.</p>
<p>If you did like it, I will appreciate if you can share the newsletter with your friends (or, even better, invite them to <a href="/newsletter/">subscribe</a>).</p>
<p>See you next month!</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🛠 Should WordPress have a GraphQL API in core?
      
    </title>
    <link href="https://gatographql.com/blog/why-wordpress-should-have-a-graphql-api-in-core/"/>
    <updated>2021-02-27T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/why-wordpress-should-have-a-graphql-api-in-core/</id>
    <content type="html"><![CDATA[
      <p>WordPress 5.7 is <a href="https://make.wordpress.org/core/2021/02/23/wordpress-5-7-field-guide/">coming out soon</a>. As it has been for many releases now, the WP REST API will also be <a href="https://make.wordpress.org/core/2021/02/23/rest-api-changes-in-wordpress-5-7/">shipping several new features</a>.</p>
<p>Among the new features, one caught my attention: &quot;Image Editor Accepts a List of Modifiers&quot;.</p>
<blockquote>
<p>The <code>/wp/v2/media/&lt;id&gt;/edit</code> endpoint introduced in WordPress 5.5 came with a limited API that accepted top-level rotation and crop declarations. In <a href="https://core.trac.wordpress.org/changeset/50124">50124</a> this API was made more powerful and flexible by accepting an array of modifications in the new <code>modifiers</code> request parameter.</p>
</blockquote>
<pre class="language-js"><code class="language-js"><span class="highlight-line"><span class="token keyword">import</span> apiFetch <span class="token keyword">from</span> <span class="token string">'@wordpress/api-fetch'</span><span class="token punctuation">;</span></span><br><span class="highlight-line"> </span><br><span class="highlight-line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  modifiers<span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      type<span class="token operator">:</span> <span class="token string">'crop'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      args<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        left  <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        top   <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        width <span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        height<span class="token operator">:</span> <span class="token number">80</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      type<span class="token operator">:</span> <span class="token string">'rotate'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      args<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        angle<span class="token operator">:</span> <span class="token number">90</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token function">apiFetch</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">'/wp/v2/media/5/edit'</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>This development has been a while on the making.</p>
<p>First, on WordPress 5.5, the <a href="https://make.wordpress.org/core/2020/07/16/new-and-modified-rest-api-endpoints-in-wordpress-5-5/#image-editing">image editing endpoint</a> was introduced.</p>
<p>This endpoint was initially a bit rigid, requiring to pass all the data together concerning all operations to apply on the image. For instance, to rotate the image, and modify its size, we would pass this data:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"x"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"y"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"width"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"rotate"</span><span class="token operator">:</span> <span class="token number">90</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Then, in WordPress 5.6, <a href="https://make.wordpress.org/core/2020/11/20/rest-api-batch-framework-in-wordpress-5-6/">batch operations</a> were introduced to the WP REST API.</p>
<p>Finally, in the upcoming WordPress 5.7, the operations to apply on the image have been decoupled, so we have operations <code>&quot;crop&quot;</code> and <code>&quot;rotate&quot;</code>. These operations can be executed on their own, but also together on the same request via batching.</p>
<p>As seen earlier on, passing data to the endpoint now looks much more elegant:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"modifiers"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"crop"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"left"</span>  <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"top"</span>   <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"width"</span> <span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">80</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"rotate"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"angle"</span><span class="token operator">:</span> <span class="token number">90</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Re-doing what already exists?</h2>
<p>The WP REST API is not the only API for WordPress. There are (at least) two alternatives:</p>
<ul>
<li>GraphQL, via <a href="https://www.wpgraphql.com/">WPGraphQL</a></li>
<li>GraphQL + persisted queries, via the <a href="https://gatographql.com">GraphQL API for WordPress</a><br/>(☝🏽 This is me, your host for this blog post ☝🏽)</li>
</ul>
<p><a href="https://graphql.org">GraphQL</a> is a newish type of API, which excels at batching operations. If using GraphQL, there is no need to spend time and energy developing a custom solution for them, as is the case for REST.</p>
<p>Indeed, REST could be seen as &quot;copying&quot; this feature from GraphQL.</p>
<p><img src="/images/rest-copying-graphql-meme.jpg" alt="REST copying GraphQL?" title="REST copying GraphQL?"></p>
<p>Supporting batch operations in the WP REST API took at least 2, possibly 3, release cycles to accomplish. This is not an insignificant amount of time, and it required the <a href="https://core.trac.wordpress.org/ticket/50244">contribution from several people</a>.</p>
<p>If WordPress could also make use of GraphQL, and the image editing endpoint was based on GraphQL instead of REST, then these contributors could instead work on other developments.</p>
<p>Wouldn't WordPress be better off, and be developed much faster, if it could use the best qualities from each API, whenever convenient?</p>
<h2>Batch operations in GraphQL</h2>
<p>I'll show not one, but several ways in which the GraphQL API for WordPress supports batch operations.</p>
<p>The first one is the simplest one: adding several fields to the root of the query. For instance, this query logs the user in, and then adds a comment:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> LogUserInAndAddCommentToPost <span class="token punctuation">{</span></span><br><span class="highlight-line">  loginUser<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">credentials</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">usernameOrEmail</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token string">"pass"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    name</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  addCommentToCustomPost<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> <span class="token number">1459</span></span><br><span class="highlight-line">      <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Adding a comment: bla bla bla"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>(Btw, this is the GraphiQL client. <a href="/guides/intro/intro-to-the-graphiql-client/">Here is a tutorial</a> on using it.)</p>
<p>Now, these two operations were applied on different objects, but we want to apply several operations to the same object.</p>
<p>Let's do that next: this query adds two comments to the same post.</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddTwoCommentsToPost <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">firstComment</span><span class="token punctuation">:</span> addCommentToCustomPost<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> <span class="token number">1459</span></span><br><span class="highlight-line">      <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"This is my first response"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token attr-name">secondComment</span><span class="token punctuation">:</span> addCommentToCustomPost<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> <span class="token number">1459</span></span><br><span class="highlight-line">      <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"This is my second response"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>These two comments were added to an already-existing post. But what would happen if the post also needs be created in first place?</p>
<p>In that case, the simple query will not work anymore, because we don't know the ID of the post-yet-to-be-created, which is needed as argument to the other operations (notice the <code>?</code> in the field argument):</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> CreatePostAndAddTwoCommentsToPost <span class="token punctuation">{</span></span><br><span class="highlight-line">  createPost<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token string">"Some post"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id  <span class="token comment"># &lt;= I don't know what this value will be</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  addCommentToCustomPost<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> ?<span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Blah blah blah"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>But despair not, that the GraphQL API has your back covered. It provides not one, but two solutions!</p>
<p><img src="/images/count-on-you-meme.jpg" alt="The GraphQL API cares about you" title="The GraphQL API cares about you"></p>
<p>The first one is to use the <a href="/guides/special-features/multiple-query-execution/">multiple-query execution</a> feature.</p>
<p>In this query, we execute the first operation, export its result via directive <code>@export</code>, and then inject this value as input to the second query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddComment <span class="token punctuation">{</span></span><br><span class="highlight-line">  addCommentToCustomPost<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> <span class="token number">1459</span></span><br><span class="highlight-line">    <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Some insightful comment"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id <span class="token directive function">@export</span><span class="token punctuation">(</span><span class="token attr-name">as</span><span class="token punctuation">:</span> <span class="token string">"newCommentID"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">mutation</span> AddResponseToComment <span class="token directive function">@depends</span><span class="token punctuation">(</span><span class="token attr-name">on</span><span class="token punctuation">:</span> <span class="token string">"AddComment"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  replyComment<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">parentCommentID</span><span class="token punctuation">:</span> <span class="token variable">$newCommentID</span></span><br><span class="highlight-line">    <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Debunking your insightful comment"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    parent <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>More elegant still, we can use <a href="/guides/special-features/nested-mutations/">nested mutations</a>.</p>
<p>In this query, we execute the first operation, and nest the second operation within, so it will be applied on the object created during the first operation (and then repeat, nesting a 3rd operation, and so on):</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddCommentAndResponseAndResponse <span class="token punctuation">{</span></span><br><span class="highlight-line">  addCommentToCustomPost<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> <span class="token number">1459</span></span><br><span class="highlight-line">      <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Some insightful comment"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">    reply<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Debunking your insightful comment"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      date</span><br><span class="highlight-line">      content</span><br><span class="highlight-line">      parent <span class="token punctuation">{</span></span><br><span class="highlight-line">        id</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">      reply<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"No, it was right!"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        id</span><br><span class="highlight-line">        date</span><br><span class="highlight-line">        content</span><br><span class="highlight-line">        parent <span class="token punctuation">{</span></span><br><span class="highlight-line">          id</span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>As a bonus, the batch operations can be applied not just on a single entity, but on many entities at the same time, on the same request.</p>
<p>In this query, the new comments and all their responses are being added to several posts:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddCommentAndResponseToManyPosts <span class="token punctuation">{</span></span><br><span class="highlight-line">  posts<span class="token punctuation">(</span><span class="token attr-name">ids</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1657</span><span class="token punctuation">,</span> <span class="token number">1153</span><span class="token punctuation">,</span> <span class="token number">1499</span><span class="token punctuation">,</span> <span class="token number">1459</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    addComment<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Some insightful comment"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      content</span><br><span class="highlight-line">      date</span><br><span class="highlight-line">      reply<span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"Debunking your insightful comment"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        id</span><br><span class="highlight-line">        date</span><br><span class="highlight-line">        content</span><br><span class="highlight-line">        parent <span class="token punctuation">{</span></span><br><span class="highlight-line">          id</span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>And the plugin has yet one more trick under its sleeve: by using the embeddable fields feature, we can customize the content passed to each field argument, using data from the object itself!</p>
<p>In this query, the comments contain information from the object upon which they are being created:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddCustomCommentAndResponseToManyPosts <span class="token punctuation">{</span></span><br><span class="highlight-line">  posts<span class="token punctuation">(</span><span class="token attr-name">ids</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1657</span><span class="token punctuation">,</span> <span class="token number">1153</span><span class="token punctuation">,</span> <span class="token number">1499</span><span class="token punctuation">,</span> <span class="token number">1459</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    addComment<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"The post has ID {{ id }} and title {{ title }}"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      content</span><br><span class="highlight-line">      date</span><br><span class="highlight-line">      reply<span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token attr-name">commentAs</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token attr-name">html</span><span class="token punctuation">:</span> <span class="token string">"The parent comment was posted on {{ dateStr(format: \"d/m/Y\") }}. Cool, right?"</span></span><br><span class="highlight-line">          <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        id</span><br><span class="highlight-line">        date</span><br><span class="highlight-line">        content</span><br><span class="highlight-line">        parent <span class="token punctuation">{</span></span><br><span class="highlight-line">          id</span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Getting the best from REST and GraphQL whenever convenient</h2>
<p>As <a href="https://github.com/WordPress/theme-experiments">Full Site Editing</a> is developed and expanded, WordPress will increasingly depend on its API(s).</p>
<p>Concerning existing features, the REST API has so far fared very well. There is no need to rebuild what is not broken.</p>
<p>However, concerning new, yet-to-be-developed features, wouldn't WordPress benefit from using either REST or GraphQL, depending on whatever is more convenient for that specific feature?</p>
<p>The answer is yours...</p>
<p><img src="/images/rest-plus-graphql-meme.jpg" alt="What's your opinion?" title="What's your opinion?"></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🥊 GraphQL API vs WPGraphQL: the fight!
      
    </title>
    <link href="https://gatographql.com/blog/graphql-api-vs-wpgraphql-the-fight/"/>
    <updated>2021-02-20T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/graphql-api-vs-wpgraphql-the-fight/</id>
    <content type="html"><![CDATA[
      <p>Ladiessssssssssss, and gentlemen.</p>
<p><img src="/images/box/announcer.jpg" alt="Announcing the upcoming match" title="Announcing the upcoming match"></p>
<p>Welcome to the MGM Grand Garden Arena for the bout of the century! Tonight, we are making history. Two young fighters will face each other out in the ring, clashing for the prize they have worked so hard for:</p>
<p>To become the <strong>&quot;GraphQL in WordPress&quot; world champion</strong> 🏆</p>
<p>To our right, we have the current champion. Even though only 4 years old, he's already full of experience, having recently reached the 1.0 version and been published on the wp.org directory, and he is very popular among the crowds.</p>
<p>🥁 Give 🥁 the 🥁 welcome 🥁 tooooo 🥁 ...... <a href="https://www.wpgraphql.com">WPGraphQL</a>!</p>
<p><img src="/images/box/wpgraphql-boxer.jpg" alt="The current champion, WPGraphQL" title="The current champion, WPGraphQL"></p>
<p>To our left, we have the challenger. He's been barely out into the world for 1 month, but he's highly energetic and ambitious, displaying his strength from the very first day. He has been the one seeking for today's encounter. Tonight is his chance, and the world is paying attention.</p>
<p>🥁 Give 🥁 the 🥁 welcome 🥁 tooooo 🥁 ...... <a href="/">GraphQL API for WordPress</a>!</p>
<p><img src="/images/box/graphql-api-boxer.jpg" alt="The challenger, GraphQL API for WordPress" title="The challenger, GraphQL API for WordPress"></p>
<p>Tonight, our contenders will meet face to face for the first time, in a bout of 12 rounds. As they take their positions in the center of the ring, waiting for the opening bell, they study each other, trying to find each other's vulnerable points. However, they exhibit only confidence.</p>
<p><img src="/images/box/graphql-api-vs-wpgraphql-boxers.jpg" alt="The 2 glorious fighters study each other out" title="The 2 glorious fighters study each other out"></p>
<p>Who will prevail? Will WPGraphQL maintain his advantage, based on the support from his followers? Or will the newcomer GraphQL API convince an unsuspecting community of the might of his fists, leaving a trail of awe that converts the crowds to his side?</p>
<p>Tonight, ladies and gentlemen, we will find out.</p>
<p>Make your bets. And enjoy the match!</p>
<hr>
<p>🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣🤣</p>
<hr>
<p>I've been recently asked to explain the differences between my plugin, the GraphQL API for WordPress, and WPGraphQL.</p>
<p>Both plugins are GraphQL servers for WordPress, so they serve the same purpose. However, under they hood they have different characteristics, which can make one better than the other one to satisfy some required behavior.</p>
<p>Even though I'm biased towards my own plugin, I've tried to draw a comparison that is fair, based on topics which I consider important for both GraphQL and WordPress. (If readers would like a comparison on another topic, I'll be happy to comply.)</p>
<p>The comparison is not exhaustive. For instance, I'd also like to do some benchmarking, measuring the speed of resolving the same GraphQL query with both servers. (If readers find this proposal attractive, I can do it for an upcoming article.)</p>
<p>I have split my comparison into 4 main areas: Popularity, Code style and standards, Pressing matters, and Widening the scope, with 3 items for each, giving a total of 12 &quot;rounds&quot;. At the end, the judges give their verdict, to name the champion.</p>
<p>Click below to jump straight to some topic:</p>
<ul>
<li><a href="#heading-popularity">Popularity</a>
<ul>
<li><a href="#heading-round-1-who-is-using-it-and-how-complete-is-it">Round 1: <strong>Who is using it, and how complete is it</strong></a></li>
<li><a href="#heading-round-2-availability-of-extensions">Round 2: <strong>Availability of extensions</strong></a></li>
<li><a href="#heading-round-3-target-audience">Round 3: <strong>Target audience</strong></a></li>
</ul>
</li>
<li><a href="#heading-code-style-and-standards">Code style and standards</a>
<ul>
<li><a href="#heading-round-4-php-requirements">Round 4: <strong>PHP requirements</strong></a></li>
<li><a href="#heading-round-5-coding-practices">Round 5: <strong>Coding practices</strong></a></li>
<li><a href="#heading-round-6-extending-the-schema">Round 6: <strong>Extending the schema</strong></a></li>
</ul>
</li>
<li><a href="#heading-intermission">Intermission</a></li>
<li><a href="#heading-pressing-matters">Pressing matters</a>
<ul>
<li><a href="#heading-round-7-persisted-queries">Round 7: <strong>Persisted queries</strong></a></li>
<li><a href="#heading-round-8-caching">Round 8: <strong>Caching</strong></a></li>
<li><a href="#heading-round-9-integration-with-gutenberg">Round 9: <strong>Integration with Gutenberg</strong></a></li>
</ul>
</li>
<li><a href="#heading-widening-the-scope">Widening the scope</a>
<ul>
<li><a href="#heading-round-10-support-for-custom-directives">Round 10: <strong>Support for custom directives</strong></a></li>
<li><a href="#heading-round-11-support-for-rest">Round 11: <strong>Support for REST</strong></a></li>
<li><a href="#heading-round-12-support-for-novel-features">Round 12: <strong>Support for novel features</strong></a></li>
</ul>
</li>
<li><strong><a href="#heading-verdict">Verdict!</a></strong></li>
</ul>
<p>🔔 Ding 🔔 ding 🔔 diiiiiing...</p>
<p>The opening bell has sounded...</p>
<p>The match has started!</p>
<hr>
<h2>Popularity</h2>
<p>Any piece of software (or technology, for that matter) must be used by people, or otherwise its being better than the alternatives will just be an anecdote.</p>
<p>For instance, even though there are alternatives which allow to type faster, we still mainly use the QWERTY keyboard.</p>
<p>How popular are the two plugins?</p>
<h3>Round 1: Who is using it, and how complete is it</h3>
<p>WPGraphQL has been, until now, a synonym with GraphQL in WordPress. During the 4 years plus that it has been developed (starting in November, 2016), it gathered <a href="https://github.com/wp-graphql/wp-graphql">over 2.8k stars on the repo</a>, a community of <a href="https://twitter.com/wpgraphql">over 4600 followers</a>, and <a href="https://github.com/wp-graphql/wp-graphql/graphs/contributors">almost 100 contributors to the project</a>.</p>
<p>It reached version 1.0 and was <a href="https://wordpress.org/plugins/wp-graphql/">uploaded to the plugin directory in wp.org</a> in November 2020. Since then, it has gathered over 8000 active instalations. It is currently the only solution for <a href="https://www.gatsbyjs.com/plugins/gatsby-source-wordpress/">sourcing WordPress content to Gatsby</a> and, more recently, several projects have added it to their stacks, including <a href="https://github.com/wpengine/headless-framework">WPEngine's Headless framework</a> and <a href="https://github.com/WebDevStudios/nextjs-wordpress-starter">WebDevStudios' Next.js WordPress starter</a>.</p>
<p>In other words, WPGraphQL is popular.</p>
<p>Development for the GraphQL API for WordPress started in earnest around 1.5 years ago (as part of a wider project), and it reached a <a href="https://leoloso.com/posts/introducing-the-graphql-api-for-wordpress/">&quot;good enough&quot; status 6 months ago</a>, receiving <a href="https://github.com/GatoGraphQL/GatoGraphQL">150 stars on the repo</a> since then. The plugin is currently <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/download/0.7.9/graphql-api.zip">on version 0.7</a>, and it's still several months away from reaching 1.0 (for instance, it doesn't have categories on the schema yet).</p>
<p>Last month I launched this current site gatographql.com, and since then I have been promoting the plugin via <a href="/blog/">the blog</a> (like the article you are reading now), and also published an <a href="https://css-tricks.com/rendering-the-wordpress-philosophy-in-graphql/">intro article on CSS-Tricks</a>. These attempts have brought in several hundred people to the site, and over 100 visitors have downloaded the plugin.</p>
<p>In other words, the GraphQL API for WordPress is slowly but steadily getting popular, and it is a work in progress.</p>
<p>Winner of the round: WPGraphQL.</p>
<p><img src="/images/box/wpgraphql-hits.jpg" alt="It's a hit! WPGraphQL's punch reaches the GraphQL API" title="It's a hit! WPGraphQL's punch reaches the GraphQL API"></p>
<h3>Round 2: Availability of extensions</h3>
<p>Extensions enable to interact with other plugins via the GraphQL API.</p>
<p>WPGraphQL has extensions for <a href="https://github.com/wp-graphql/wp-graphql-acf">ACF</a>, <a href="https://github.com/wp-graphql/wp-graphql-woocommerce">WooCommerce</a>, <a href="https://github.com/ashhitch/wp-graphql-yoast-seo">Yoast</a> and a few others.</p>
<p>GraphQL API for WP has no extensions yet, and I don't expect there will be many before releasing version 1.0.</p>
<p>However, the GraphQL API for WP has a big emphasis on extensions in its architecture, allowing the user to manage them (enable, disable, configure, and read their documentation) from a central place, the &quot;Modules&quot; page:</p>
<p><img src="/assets/guides/downstream/modules.png" alt="Modules page in the GraphQL API for WordPress" title="Modules page in the GraphQL API for WordPress"></p>
<p>In other words, while WPGraphQL already has extensions, the GraphQL API is preparing the field for them.</p>
<p>Winner of the round: WPGraphQL.</p>
<p><img src="/images/box/wpgraphql-hits-again.jpg" alt="WPGraphQL hits again!" title="WPGraphQL hits again!"></p>
<h3>Round 3: Target audience</h3>
<p>WPGraphQL targets developers: if you want to extract data from your WordPress site, you need to store your GraphQL query somewhere in your code (most likely, in some JavaScript function). Then, to be able to use it, you need to be good enough at programming.</p>
<p>The GraphQL API for WordPress, instead, <a href="https://css-tricks.com/rendering-the-wordpress-philosophy-in-graphql/#reconciling-the-wordpress-philosophy-within-the-graphql-service">follows the WordPress philosophy that anyone should be able to use it</a>, including non-techies. To achieve this goal, it enables to create and manage a GraphQL query via the WordPress editor, so that making the WordPress site's data accessible via an API becomes as easy as creating a blog post.</p>
<p>In addition, the GraphQL API for WordPress puts more emphasis on offering clients to interact with the GraphQL service in a visual manner. While both plugins provide the <a href="https://github.com/graphql/graphiql">GraphiQL client</a>, to execute the query, only the GraphQL API for WordPress also provides the <a href="https://github.com/APIs-guru/graphql-voyager">Voyager client</a>, to interactively explore the schema:</p>
<p><img src="/assets/features/interactive-schema.gif" alt="Visualizing the GraphQL schema" title="Visualizing the GraphQL schema"></p>
<p>Winner of the round: GraphQL API for WordPress.</p>
<p><img src="/images/box/graphql-api-hits.jpg" alt="GraphQL API for WP delivers a good left blow!" title="GraphQL API for WP delivers a good left blow!"></p>
<hr>
<h2>Code style and standards</h2>
<p>Let's talk code!</p>
<p>If you are using GraphQL, chances are, you are doing headless WordPress and rendering the website using some JavaScript framework, which is a modern paradigm. Moreover, WordPress may be an old CMS, but GraphQL is a modern interface to access data from the site. Hence, I can safely assume that you're a wise developer, keen on producing elegant code, and will not accept using a suboptimal solution.</p>
<p>How elegant is the code (from their own codebase, and expected from our custom implementations) from these two plugins?</p>
<h3>Round 4: PHP requirements</h3>
<p>Both WPGraphQL and the GraphQL API for WordPress require PHP 7.1+.</p>
<p>However, there is a difference: the GraphQL API for WordPress is actually <a href="https://github.com/GatoGraphQL/GatoGraphQL#php-versions">coded using PHP 7.4</a>, and is then <a href="https://blog.logrocket.com/transpiling-php-code-from-8-0-to-7-x-via-rector/">transpiled to PHP 7.1 for production</a>.</p>
<p>Hence, coding the GraphQL API is much more pleasurable: you can use newer PHP features, including the <a href="https://www.php.net/manual/en/migration72.new-features.php#migration72.new-features.object-type"><code>object</code> type</a>, <a href="https://www.php.net/manual/en/migration74.new-features.php#migration74.new-features.core.typed-properties">typed properties</a> and <a href="https://www.php.net/manual/en/functions.arrow.php">arrow functions</a>. And once support for PHP 8.0 is added (which will happen when the new version of <a href="https://docs.lando.dev/">Lando</a> is released), you will also be able to use <a href="https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union">union types</a>, the <a href="https://www.php.net/manual/en/control-structures.match.php">match expression</a>, and others.</p>
<p>Winner of the round: GraphQL API for WordPress.</p>
<p><img src="/images/box/graphql-api-hits-again.jpg" alt="The GraphQL API is leaving his mark!" title="The GraphQL API is leaving his mark!"></p>
<h3>Round 5: Coding practices</h3>
<p>Let's start with WPGraphQL. Heading over to the <a href="https://github.com/wp-graphql/wp-graphql/"><code>wp-graphql/wp-graphql</code> repo</a>, there is something that stands out for me:</p>
<p><img src="/images/wpgraphql-comparison/vendor-folder.jpg" alt="The vendor folder stored in the repo" title="The vendor folder stored in the repo"></p>
<p>Zooming in:</p>
<p><img src="/images/wpgraphql-comparison/vendor-folder-zoom.jpg" alt="Contents of the vendor folder" title="Contents of the vendor folder"></p>
<p>Sorry, but there's only one way I can react about this:</p>
<p><img src="/images/wpgraphql-comparison/vendor-folder-in-repo-meme.jpg" alt="I can forgive you many things in life, but not this" title="I can forgive you many things in life, but not this"></p>
<p>Commiting Composer's <code>vendor</code> folder to the repo is a bad practice, and <a href="https://getcomposer.org/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md">Composer explicitly discourages it</a>.</p>
<p>Fixing this problem is not difficult (I even <a href="https://leoloso.com/posts/github-action-to-release-wp-plugin/">described a way based on GitHub actions</a>), so I wonder why it's there.</p>
<p>I'd say that, in this round, WPGraphQL is hitting himself!</p>
<p><img src="/images/box/wpgraphql-hitting-own-face.jpg" alt="Ouch!" title="Ouch!"></p>
<p>Let's continue. Developing for WPGraphQL requires knowing a super extensive collection of hooks (actions and filters). Heading to WPGraphQL's <a href="https://www.wpgraphql.com/developer-reference/">Developer reference</a>, we can appreciate the extent of this.</p>
<p>To take a screenshot to the <a href="https://www.wpgraphql.com/actions/">list of actions</a>, I had to zoom my browser out to 50%:</p>
<p><img src="/images/wpgraphql-comparison/wpgraphql-actions.jpg" alt="Action hooks for extending WPGraphQL" title="Action hooks for extending WPGraphQL"></p>
<p>For the <a href="https://www.wpgraphql.com/filters/">list of filters</a>, I zoomed out to 30% (the lowest that Firefox supports), and even then I couldn't get the whole list:</p>
<p><img src="/images/wpgraphql-comparison/wpgraphql-filters.jpg" alt="Filter hooks for extending WPGraphQL" title="Filter hooks for extending WPGraphQL"></p>
<hr>
<p>Let's switch over to the <a href="https://github.com/GatoGraphQL/GatoGraphQL"><code>GatoGraphQL/GatoGraphQL</code> repo</a>, which is the monorepo containing the GraphQL API for WordPress (among other projects).</p>
<p>These are some of the characteristics of the code:</p>
<p>✅ Compliant with standards <a href="https://www.php-fig.org/psr/psr-1"><code>PSR-1</code></a>, <a href="https://www.php-fig.org/psr/psr-4"><code>PSR-4</code></a> and <a href="https://www.php-fig.org/psr/psr-12"><code>PSR-12</code></a>.</p>
<p>✅ All code is split into multiple, atomic packages, and all of them (over 100 for the plugin, over 200 for the whole project) are hosted in the same monorepo.</p>
<p>✅ Uses <a href="https://getcomposer.org">Composer</a> to manage all dependencies.</p>
<p>✅ Uses <a href="https://symfony.com/doc/current/components/dependency_injection.html">Symfony Dependency Injection</a> to manage all services in the application. To register a new type resolver, field resolver or directive resolver, we must just register a new service in the container.</p>
<p>✅ Every class is a service, and Symfony Dependency Injection takes care of autowiring the whole application together.</p>
<p>✅ The underlying GraphQL server (called <a href="https://graphql-by-pop.com/">GraphQL by PoP</a>) <a href="https://graphql-by-pop.com/docs/architecture/cms-agnosticism.html">is CMS-agnostic</a>. The GraphQL API for WordPress implements the contracts for WordPress, and adds a bit of custom logic (for instance, to provide the clients).</p>
<p>The WordPress-specific code is only around 10% of the overall code. Replicating this 10% for another framework or CMS (Laravel/Drupal/etc) can provide an implementation of a GraphQL server for them too.</p>
<p>✅ As a consequence of being CMS-agnostic, coding a resolver implies coding its generic business logic, powered by reusable services. We never think in terms of WordPress code, and we rarely need to deal with its technical debt.</p>
<p>✅ Likewise, <a href="/blog/rejuvenating-wordpress-through-graphql/">the GraphQL schema is not a 1:1 replica of the WordPress data model</a>, bypassing the technical debt accumulated by WordPress at the data layer, and providing a clean interface.</p>
<p>✅ GraphQL's N+1 problem cannot happen, <a href="https://graphql-by-pop.com/docs/architecture/suppressing-n-plus-one-problem.html">by architectural design</a>, and without troubling the developer at all.</p>
<p>✅ The server is not only a GraphQL server: it's actually an API server, where the response can be output in other formats or specifications (eg: REST) from a single source of truth. (More on this on round 11).</p>
<p>✅ No <code>vendor</code> directory is committed. Instead, the source code is transformed to distribution code (i.e. the final plugin to install on the WordPress site) <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/6e5c89088cc94c1f9b77b0e4e0a1d1876cb159d4/.github/workflows/generate_graphql_api_for_wp_plugin.yml">via GitHub actions</a>, and deployed to <a href="https://github.com/GraphQLAPI/graphql-api-for-wp-dist">a <code>dist</code> repo</a>, where it does contain the <code>vendor</code> folder.</p>
<p>✅ When generating the code for distribution, it <a href="/blog/graphql-api-for-wp-is-now-scoped-thanks-to-php-scoper/">is scoped with PHP-Scoper</a>, and the source code, which contains PHP 7.4 code, which <a href="https://blog.logrocket.com/coding-in-php-7-4-and-deploying-to-7-1-via-rector-and-github-actions/">is transpiled to PHP 7.1</a>.</p>
<p>✅ Because it has solved scoping, the plugin can rely on any 3rd-party dependency. Currently, it makes use of Symfony's DependencyInjection, <a href="https://symfony.com/doc/current/components/cache.html">Cache</a> and <a href="https://symfony.com/components/Dotenv">Dotenv</a>, <a href="https://docs.guzzlephp.org/en/stable/">Guzzle</a> (to interact with external APIs), the League's <a href="https://github.com/thephpleague/pipeline">Pipeline</a>, and several others.</p>
<p>This is important not just for the present, but also for the future: I can have the certainty that I can use any dependency from the <a href="https://packagist.org/">Packagist</a> repository, so I don't need to reinvent the wheel.</p>
<p>✅ <a href="https://graphql-by-pop.com/docs/architecture/subscribing-fields-to-types.html">Fields are subscribed to types</a>, making the GraphQL schema easy to extend.</p>
<p>Winner of the round: GraphQL API for WordPress (by a big margin, I dare say, if you don't mind).</p>
<p><img src="/images/box/wpgraphql-needs-a-break.jpg" alt="After a tough round, WPGraphQL needs some rest" title="After a tough round, WPGraphQL needs some rest"></p>
<h3>Round 6: Extending the schema</h3>
<p>Let's add a field to the GraphQL schema.</p>
<p>We <a href="https://www.wpgraphql.com/recipes/register-graphql-field-with-argument/">follow the tutorial</a> for WPGraphQL. The suggested code is the one below. It declares an action hook to execute a function that declares an array. Both the description of the fields, and its resolution, is provided within the array:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'graphql_register_types'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">	<span class="token function">register_graphql_field</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'RootQuery'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'myNewField'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">		<span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'String'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">		<span class="token string single-quoted-string">'args'</span> <span class="token operator">=></span> <span class="token punctuation">[</span></span><br><span class="highlight-line">			<span class="token string single-quoted-string">'myArg'</span> <span class="token operator">=></span> <span class="token punctuation">[</span></span><br><span class="highlight-line">				<span class="token string single-quoted-string">'type'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'String'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token string single-quoted-string">'description'</span> <span class="token operator">=></span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Description for how the argument will impact the field resolver'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'your-textdomain'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">			<span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">		<span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">		<span class="token string single-quoted-string">'resolve'</span> <span class="token operator">=></span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token variable">$source</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$context</span><span class="token punctuation">,</span> <span class="token variable">$info</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'myArg'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">				<span class="token keyword">return</span> <span class="token string single-quoted-string">'The value of myArg is: '</span> <span class="token operator">.</span> <span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'myArg'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">			<span class="token punctuation">}</span></span><br><span class="highlight-line">			<span class="token keyword">return</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">;</span></span><br><span class="highlight-line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">	<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>This example is as simple as it can get: the resolver basically does nothing. Yet, I already have trouble looking at the code and understanding at once what it does. No, I'm not being snarky: all colors from that code in my editor are fighting for my attention. In addition, there's no separation of concerns, and the code doesn't seem to be very reusable.</p>
<p>Hence, it will be up to the developer (that is, to you) to make the code easy to read, reusable, bug-free, and many others, while developing the application; the library itself doesn't seem to help much in this regard.</p>
<p>I call this style &quot;ADD&quot;: Array-Driven Development. I can't say I'm a fan of it.</p>
<p>(To be fair to WPGraphQL, this is a standard coding practice, and is also the one <a href="https://webonyx.github.io/graphql-php/type-system/object-types/">employed by the underlying engine <code>webonyx/graphql-php</code></a>.)</p>
<hr>
<p>In the GraphQL API, all code <a href="https://graphql-by-pop.com/docs/architecture/solid.html">is SOLID</a>. To register a field in the GraphQL schema, we create a class implementing interface <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob//d2d835c8f1c1a8e0f743228fa57ac981d5a4c5ea/layers/Engine/packages/component-model/src/FieldResolvers/FieldResolverInterface.php"><code>FieldResolverInterface</code></a> (actually, extending from <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/f805ccafd6240a3467582ff73286b02c0722c25b/layers/Engine/packages/component-model/src/FieldResolvers/AbstractSchemaFieldResolver.php"><code>AbstractSchemaFieldResolver</code></a>, which has many methods already implemented), and we <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/992202c713c9857a2537c70d051173bd8bbd2e81/layers/Schema/packages/users/config/schema-services.yaml#L6">register it in the container</a>.</p>
<p>For instance, <a href="https://github.com/getpop/users/blob/4ea244c419ad21bf9297d476180acf9435d9d104/src/FieldResolvers/UserFieldResolver.php">this code</a> provides fields <code>username</code>, <code>email</code> and <code>url</code> to the <code>User</code> type:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">class</span> UserFieldResolver <span class="token keyword">extends</span> <span class="token class-name">AbstractSchemaFieldResolver</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getClassesToAttachTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token class-name static-context">UserTypeResolver</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getFieldNamesToResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'username'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'email'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'url'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSchemaFieldDescription</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$descriptions</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'username'</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">translationAPI</span><span class="token operator">-></span><span class="token function">__</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"User's username handle"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'email'</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">translationAPI</span><span class="token operator">-></span><span class="token function">__</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"User's email"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'url'</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">translationAPI</span><span class="token operator">-></span><span class="token function">__</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"URL of the user's profile in the website"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token variable">$descriptions</span><span class="token punctuation">[</span><span class="token variable">$fieldName</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getSchemaFieldType</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$types</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'username'</span> <span class="token operator">=></span> <span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'email'</span> <span class="token operator">=></span> <span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_EMAIL</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'url'</span> <span class="token operator">=></span> <span class="token class-name static-context">SchemaDefinition</span><span class="token operator">::</span><span class="token constant">TYPE_URL</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token variable">$types</span><span class="token punctuation">[</span><span class="token variable">$fieldName</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resolveValue</span><span class="token punctuation">(</span><span class="token class-name type-declaration">TypeResolverInterface</span> <span class="token variable">$typeResolver</span><span class="token punctuation">,</span> <span class="token keyword type-hint">object</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fieldName</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$fieldArgs</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token keyword">case</span> <span class="token string single-quoted-string">'username'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">usersAPI</span><span class="token operator">-></span><span class="token function">getUserLogin</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">case</span> <span class="token string single-quoted-string">'email'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">usersAPI</span><span class="token operator">-></span><span class="token function">getUserEmail</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">case</span> <span class="token string single-quoted-string">'url'</span><span class="token punctuation">:</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">usersAPI</span><span class="token operator">-></span><span class="token function">getUserURL</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>I do believe that my solution is more elegant than the one from WPGraphQL. However, that is a matter of taste. I know that many developers do not mind Array-Driven Development, and actually prefer it since, in a compact blob of code, they can implement all the logic.</p>
<p>Winner of the round: it's a draw.</p>
<p><img src="/images/box/its-a-draw.jpg" alt="A draw" title="A draw"></p>
<hr>
<h2>Intermission</h2>
<p>What a night we have, ladies and gentlemen.</p>
<p><img src="/images/box/boxing-commentator.jpg" alt="Time to analyze the match so far" title="Time to analyze the match so far"></p>
<p>We have reached the middle of the fight, so this is good time for a toilet break, and to do some commentary on what we have experienced so far.</p>
<p>(In the meantime, I should display an ad from <a href="https://github.com/sponsors/leoloso/">my sponsors</a>. Unfortunately, I don't have any yet. If you'd like your company to fund development of the GraphQL API for WordPress, and get exposure in prime media like this event, <a href="/contact/">send me a message</a>.)</p>
<p><img src="/images/box/box-arena-screen.jpg" alt="Sponsor me, to get access to prime advertising for your brand" title="Sponsor me, to get access to prime advertising for your brand"></p>
<p>What a match we have! WPGraphQL was initially all fire and fury! He started the match in great shape, dealing terribly mighty blows to the GraphQL API, who was barely able to stand on his two feet. Blow after blow after blow. I didn't want to be in the GraphQL API's shoes.</p>
<p>I must admit, I thought after the first 2 rounds, the match would soon be over. I was expecting the knock-down to come at any moment. To see a wavering towel asking for mercy. But the GraphQL API resisted. We have to give it to him. What an unshakable determination, it is truly remarkable!</p>
<p>And then, the transformation happened. Somewhere starting on the 3rd round, the GraphQL API seemed to get some energies out of nowhere, and started not just defending himself, but throwing punches back, many of which landed on WPGraphQL's face. I saw WPGraphQL quiver and shake! We had never seen anything like that, from our current world champion. What a truly remarkable transformation we have just experienced!</p>
<p>And then, having his opponent's confidence shaken, starting on the 4th round GraphQL API took it upon himself to deal a series of lethal blows. That was startling! Luckily facing him is our world champion, the WPGraphQL, and he could withstand the blows, uplifted by the cheers and compassion from the crowds. What a hero he is! Anyone else would've succumbed right on the spot, but not him, he endured the blows as the champion he is.</p>
<p>But champion, will he be for much longer? Nobody got knocked-down yet, nobody threw the towel yet. The fight could at any moment take a decisive turn. The two fighters know what they want, and I'm sure they'll come out again with all their might, and all their determination, to lash at their opponent, to prevail.</p>
<p>What a match we have!</p>
<p>And now, ladies and gentlemen, the two warriors are coming back to the ring.</p>
<p><img src="/images/box/graphql-api-back-on-ring.jpg" alt="The contenders are coming back to the ring" title="The contenders are coming back to the ring"></p>
<p>On to the rest of the fight!</p>
<hr>
<h2>Pressing matters</h2>
<p>The GraphQL server needs to pay attention to many considerations, just to satisfy the proposition &quot;retrieve the data you need, nothing more or less&quot;.</p>
<p>For instance:</p>
<ul>
<li>How secure is it? How do we make sure we are not exposing private data on a public endpoint?</li>
<li>How performant is it? How can we reduce the load on the server when sending time and again the same query, while making it as fast as possible?</li>
<li>How simple is it? How well integrated is it with WordPress, as to leverage the features provided by the CMS?</li>
</ul>
<p>And many more questions. This is just a small sample that I have chosen, and which I will deal with in the following 3 rounds.</p>
<h3>Round 7: Persisted queries</h3>
<p>Persisted queries combine the best of both GraphQL and REST: they are created using GraphQL, so it has no under/over fetching of data, but they are published on the server as an endpoint, with its own URL.</p>
<p>Persisted queries provide these benefits:</p>
<p>✅ It's safe: instead of giving access to any piece of data through the single endpoint, we can pre-define what data to expose.</p>
<p>✅ It's fast: being accessed via its own URL, it can be cached on every layer between the client and back-ends (in the server, CDN, browser) using the standard <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching">HTTP caching</a>.</p>
<p>WPGraphQL offers support for persisted queries through these two extensions:</p>
<ul>
<li><a href="https://www.wpgraphql.com/extenstion-plugins/wpgraphql-lock/">WPGraphQL Lock</a></li>
<li><a href="https://github.com/Quartz/wp-graphql-persisted-queries">WPGraphQL Persisted Queries</a></li>
</ul>
<p>In addition, Jason Bahl (creator of WPGraphQL) recently announced that in the near future <a href="https://www.wpgraphql.com/2021/02/07/whats-next-for-wpgraphql/#whats-next-for-wpgraphql">he will add support for persisted queries in WPGraphQL</a>.</p>
<p>I wonder what he has in mind, since there are the 2 extensions already. How will it be different from those? Maybe he wants to make it part of the plugin's core, as to beef up the overall plugin's security measures without depending on a 3rd party?</p>
<p>Or maybe he saw the implementation from the GraphQL API for WordPress, and wants to provide a similar experience, operating it via a visual editor instead of pure code?</p>
<p>Which brings us to the GraphQL API for WordPress. It not only <a href="/guides/special-features/persisted-queries">offers persisted queries</a>, but has strived to make it a central part of the offering:</p>
<p>✅ The plugin comes with the single endpoint <a href="/guides/special-features/security">disabled by default</a>, and users are encouraged to expose data via persisted queries only.</p>
<p>(In contrast, WPGraphQL only <a href="https://www.wpgraphql.com/docs/security/#introspection-disabled-by-default">disables introspection by default</a>, not the actual endpoint. In other words, attackers may still be able to access private data; they are just made their task harder, since they won't know in advance what private data there is.)</p>
<p>✅ It is deeply integrated with the WordPress editor, so that creating a persisted query takes the same effort as creating a blog post, and anyone can do it, not only programmers.</p>
<p>✅ Persisted queries are not static: they can use GraphQL variables, whose value can be provided through URL params when executing the endpoint.</p>
<p>Check out the experience of <a href="/guides/use/creating-a-persisted-query/">creating</a> and executing a persisted query in my plugin:</p>
<iframe title="vimeo-player" src="https://player.vimeo.com/video/490071589" width="640" height="360" frameborder="0" allowfullscreen></iframe>
<p>Winner of the round: GraphQL API for WordPress.</p>
<h3>Round 8: Caching</h3>
<p>GraphQL has a big pain point: it is not easily cacheable. The reason is that it depends on sending <code>POST</code> operations to a single endpoint. Since the single endpoint will produce different results, and since the query is sent in the body of the request instead of URL parameters, then we can't have the single endpoint being cached.</p>
<p>The standard solution offered by many GraphQL servers is to shift the caching to the client, and rely on objects' IDs as identifiers of the entity to be cached instead of an endpoint's URL. The most popular library providing this functionality is the <a href="https://github.com/apollographql/apollo-client">Apollo client</a>.</p>
<p>There is a <a href="https://github.com/wp-graphql/wp-graphql/discussions/1478">discussion on the WPGraphQL repo</a> on all options available for caching for WPGraphQL. Interestingly enough, most of them are external tools (such as the Apollo client, or the WordPress Object Cache), which means adding an extra layer to the application, increasing its complexity, and also possibly making it slower.</p>
<p>(These reasons must be partly behind the decision to implement persisted queries natively in WPGraphQL.)</p>
<p>For instance, Apollo client runs, well, on the client. If accessing the website from a low-end mobile phone, without much power, that extra JavaScript code will take a hit on the application's performance.</p>
<p>Likewise, developers working with WordPress may be proficient with PHP, but not so much with JavaScript. Now, caching their APIs will mean they need to worry about the JavaScript layer also.</p>
<p>The GraphQL API for WordPress has been smarter about this topic. Since it provides persisted queries, meaning that queries are executed on their own endpoint, it allows to <a href="/guides/special-features/http-caching">cache these endpoint URLs via HTTP caching</a>.</p>
<p>The HTTP caching header has the <code>max-age</code> value automatically calculated from all the <code>max-age</code> values for all fields in the query, and this information is <a href="/guides/use/adding-http-caching/">configured using the WordPress editor</a>, on a field-by-field basis.</p>
<p>As a consequence, the API can be cached across several layers (in the client, CDN, and server), and it's handled natively within the plugin, without the need to add another layer.</p>
<p>Check out this video showing how API endpoints are being cached:</p>
<iframe title="vimeo-player" src="https://player.vimeo.com/video/413503188" width="640" height="400" frameborder="0" allowfullscreen></iframe>
<p>Winner of the round: GraphQL API for WordPress.</p>
<h3>Round 9: Integration with Gutenberg</h3>
<p>It used to be that <a href="https://wordpress.org/gutenberg/">Gutenberg</a> would be the future of WordPress. Not anymore: Gutenberg is now the present of WordPress (so we can refer to it as the WordPress editor), and <a href="https://github.com/WordPress/theme-experiments">Full Site Editing</a> has become the new future.</p>
<p>Needless to say, our APIs need to have a good integration with the WordPress editor. This means not only for retrieving and posting data for blocks, but also to potentially power features in the WordPress editor itself.</p>
<p>For instance, because GraphQL subscriptions can have the server push data to the client in real time, it would be suitable for powering the <a href="https://github.com/WordPress/gutenberg/issues/1930">collaborative editing</a> and <a href="https://make.wordpress.org/core/tag/feature-notifications/">notifications</a> features.</p>
<p>WPGraphQL can query block data via the <a href="https://github.com/pristas-peter/wp-graphql-gutenberg">WPGraphQL Gutenberg</a> extension. This extension creates a new type to map every block, so we have <code>CoreParagraphBlock</code>, <code>CoreQuoteBlock</code>, etc.</p>
<p>GraphQL API for WordPress will soon be able to query block data (it's a work in progress). However, instead of creating a new type per block, it will have a single <code>Block</code> type to represent all blocks, and then we can extract the specific metadata for some block based on its name.</p>
<p>For instance, check out how you can translate the content inside of a paragraph block (using the <code>@strTranslate</code> directive, which connects to the Google Translate API):</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> TranslateStringsInBlocks <span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1657</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    <span class="token attr-name">paragraphBlocks</span><span class="token punctuation">:</span> blockDataItems<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">filterBy</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">include</span><span class="token punctuation">:</span> <span class="token string">"core/paragraph"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token attr-name">translatedParagraphBlocks</span><span class="token punctuation">:</span> blockDataItems<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">filterBy</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">include</span><span class="token punctuation">:</span> <span class="token string">"core/paragraph"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token directive function">@underJSONObjectProperty</span><span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">path</span><span class="token punctuation">:</span> <span class="token string">"attributes.content"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token directive function">@underEachArrayItem</span></span><br><span class="highlight-line">          <span class="token directive function">@strTranslate</span><span class="token punctuation">(</span><span class="token attr-name">from</span><span class="token punctuation">:</span> <span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token attr-name">to</span><span class="token punctuation">:</span> <span class="token string">"fr"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Winner of the round: it's a draw.</p>
<hr>
<h2>Widening the scope</h2>
<p>&quot;I have a dream.&quot;</p>
<p>Gutenberg blocks have been conceived to provide a single interface for creating content in WordPress, greatly simplifying the development of the code for the CMS, and the learning required from users.</p>
<p>While introduced for creating content, blocks are steadily taking over all other areas from the CMS, including widgets, menus and, coming soon, themes via Full Site Editing. And in the future, they will also support multilingual capabilities and collaborative editing (features that we might not even think of when thinking in blocks), and who knows what else.</p>
<p>We can think in GraphQL in the same terms: as a single interface for interacting with data. That means, not only fetching and posting data, but any interaction that involves data, including editing.</p>
<p>WordPress has a unique chance to truly become the OS of the web: a system powered by Gutenberg, that lets the user input any type of content (text, images, video, audio, etc), process it via its own tools or some cloud-based service, and publish it to its final destination, be it the WordPress site or somewhere else.</p>
<p>But behind this powerful dream, there must be a truly powerful API, to deliver whatever requirement we place on it. An API that could be based on GraphQL, but that was designed to also transcend its limitations.</p>
<h3>Round 10: Support for custom directives</h3>
<p><img src="/images/box/round-10.jpg" alt="Beginning of round 10" title="Beginning of round 10"></p>
<p>WPGraphQL does not ship with a single <a href="https://graphql.org/learn/queries/#directives">directive</a>. I'm not saying it doesn't support them (it's engine <a href="https://webonyx.github.io/graphql-php/type-system/directives/"><code>webonyx/graphql-php</code> does</a>), but that it doesn't offer an implementation of any custom directive.</p>
<p>&quot;So what?&quot; you might think. &quot;What do we need directives for? If somebody needs to modify the result of the query, they can do it on their own client!&quot;</p>
<p><img src="/images/wpgraphql-comparison/directives-what-for.jpg" alt="Why do I need directives?" title="Why do I need directives?"></p>
<p>This is a matter of opinion, and there's no right or wrong. But let me tell you something: directives are an incredibly useful feature, one that helps set GraphQL apart from REST. If you're not using them, you're most likely not making the most out of your API.</p>
<p>Directives are <a href="https://blog.logrocket.com/graphql-directives-are-underrated/#whyaredirectivesimportant">unregulated by the spec</a>, so GraphQL servers can implement them any way they like, make them as powerful as they need to. That is why plenty of new functionality in GraphQL is first introduced via directives, such as <a href="https://foundation.graphql.org/news/2020/12/08/improving-latency-with-defer-and-stream-directives/"><code>@stream</code> and <code>@defer</code></a>.</p>
<p>The GraphQL API for WordPress treats directives with reverence. They are <a href="https://graphql-by-pop.com/docs/architecture/directive-design.html">executed only once</a> with the data from all entities, for all the fields they are applied to (which explains why the <code>@strTranslate</code> directive can fetch results from the Google Translate API so quickly), and the GraphQL engine itself is based on a <a href="https://graphql-by-pop.com/docs/architecture/directive-pipeline.html">directive pipeline</a>.</p>
<p>Ahhhh, but you're scared of making all this power available to the users, right? That's a valid concern. But then, you can just remove access to the single endpoint, and provide access to data only through persisted queries, where you (the admin of the site) are the only person with access to the directives.</p>
<p>So either you benefit, or nothing happens.</p>
<p>If you love directives, great, you will love the GraphQL API for WordPress! ❤️</p>
<p>But, on the other hand, if you don't like it, nothing happens.</p>
<p>Winner of the round: the GraphQL API for WordPress.</p>
<p>(If you believe that &quot;we don't need stinky directives&quot;, please don't be angry at me... I'm just doing my job.)</p>
<h3>Round 11: Support for REST</h3>
<p>&quot;Ahhhhh? REST? What REST? Aren't we talking GraphQL here? Why do you talk about REST then? Why do you want to complicate my life?&quot;</p>
<p><img src="/images/wpgraphql-comparison/rest-meme.jpg" alt="More than this, I can't do for you" title="More than this, I can't do for you"></p>
<p>Yeah, at first sight this topic seems out of place. But I've added it in this comparison for a very simple reason: Matt Mullenweg has said that <a href="https://youtu.be/QI3qCoiuG3w?t=2268">he's checking on GraphQL for a potential inclusion in WordPress core</a>, and the one thing that contributors will worry about is having to maintain two codebases.</p>
<p>Which leads to the obvious question: can the GraphQL server also handle REST?</p>
<p>The answer is &quot;partially yes&quot; for WPGraphQL, and &quot;completely yes&quot; for the GraphQL API for WordPress.</p>
<p>Concerning WPGraphQL. It is possible to define a REST endpoint which, when being resolved, simply executes a GraphQL query containing the required fields, either as a internal call to the GraphQL engine, or as an external <code>POST</code> operation executed against the same webserver.</p>
<p>But that is not enough to satisfy the WP REST API, because it also <a href="https://developer.wordpress.org/rest-api/extending-the-rest-api/schema/">has a JSON schema</a>, and we can't do without it.</p>
<p>Concerning the GraphQL API for WordPress. I must admit I've been lucky, because work on its underlying engine (the server-side component model called <a href="https://github.com/GatoGraphQL/GatoGraphQL">PoP</a>) started circa 2013, that is several years before I knew of something called GraphQL, and this project evolved with some ideas of its own (which I documented in <a href="https://www.smashingmagazine.com/2019/01/introducing-component-based-api/">this vintage article of mine</a>).</p>
<p>Then, when I started coding the CMS-agnostic <a href="https://graphql-by-pop.com/">GraphQL by PoP</a> (on which the GraphQL API for WordPress stands) around 1.5 years ago, I merged the ideas developed for PoP, with the foundations established by GraphQL, creating a system that supports the GraphQL spec in its entirety, while being able to add a different set of features to it.</p>
<p>In this regard, the schema that PoP uses is API-agnostic, and it's a superset of the one by GraphQL. Wanna see the PoP schema? Sure? Ok, here it is: <a href="https://nextapi.getpop.org/api/graphql/?query=fullSchema">/api/graphql/?query=fullSchema</a>.</p>
<p>Then, the GraphQL by PoP layer formats the PoP schema following the GraphQL specification, which produces the GraphQL schema. And similarly, we can produce the JSON schema required by the WP REST API.</p>
<p>Generating this JSON schema hasn't been done yet, but it's doable.</p>
<p>Now, what has been done already, is to produce the response of the query in multiple formats. For instance, this GraphQL query:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">    author <span class="token punctuation">{</span></span><br><span class="highlight-line">      name</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>It is also resolved via this REST endpoint: <a href="https://nextapi.getpop.org/posts/api/rest/?query=id%7Ctitle%7Cdate%7Cauthor.name">/posts/api/rest/?query=id|title|date|author.name</a>.</p>
<p>And we don't need to stop there. Do you need to produce the results using yet a different format, such as XML? No problemo: <a href="https://nextapi.getpop.org/api/?query=posts.id%7Ctitle%7Cdate%7Cauthor.name&amp;datastructure=xml">/api/?query=posts.id|title|date|author.name&amp;datastructure=xml</a>.</p>
<p>(This could help implement the <a href="https://pento.net/2021/01/20/wordpress-importers-defining-a-schema/">proposal for a new import/export tool for WordPress, based on a schema</a>. This also makes a bit more evident what I said earlier on: a single interface can power all data interactions, both within the CMS, and also from the CMS with external APIs.)</p>
<p>Winner of the round: the GraphQL API for WordPress.</p>
<h3>Round 12: Support for novel features</h3>
<p>Is the <a href="https://spec.graphql.org/draft/">GraphQL spec</a> final? The answer is no: the spec is constantly evolving. In this moment, there are <a href="https://github.com/graphql/graphql-spec/issues">100 open issues</a>, many of them containing proposals that will be formalized some time in the future.</p>
<p>Now, among those 100 issues, there will certainly be new features from which we can benefit today, right? If so, why wait?</p>
<p>That's exactly my way of thinking.</p>
<p><img src="/images/wpgraphql-comparison/life-is-gone-meme.jpg" alt="We can't wait forever" title="We can't wait forever"></p>
<p>&quot;But if something is not in the GraphQL spec, then we should not add it to the GraphQL server, or the users will get confused!&quot;</p>
<p>Good point. However, if we make the novel features available as opt-in only, then users will necessarily be aware of it, and no issue or misunderstanding will happen.</p>
<p>Once again, that's my way of thinking. This is a matter of opinion though, so if you'd rather only use features that every single GraphQL server out there is also using, that's OK.</p>
<p>I believe this is how WPGraphQL operates. At least, I haven't seen a single feature that goes beyond what has been approved in the spec.</p>
<p>For the GraphQL API for WordPress, though, I regularly scan the list of issues in the spec and, if I find some cool feature, which can be satisfied by my server without much effort, then I implement it. (Indeed, this is one of my hobbies.)</p>
<p>These are the &quot;forward-looking&quot; features I have implemented to date:</p>
<p>✅ <a href="/guides/special-features/multiple-query-execution/">Multiple query execution</a><br/>
✅ <a href="/guides/special-features/schema-namespacing/">Schema namespacing</a><br/>
✅ <a href="/guides/special-features/nested-mutations/">Nested mutations</a><br/>
✅ <a href="/guides/special-features/composable-directives/">Composable directives</a><br/>
✅ <a href="/guides/special-features/proactive-feedback/">Proactive feedback</a><br/>
✅ <a href="/guides/special-features/field-and-directive-based-versioning/">Field and directive-based versioning</a></p>
<p>And I'm already planning to add:</p>
<p>✳️ <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/194">Subscriptions</a> (this is already part of the spec)<br/>
✳️ <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/190"><code>@stream</code> and <code>@defer</code> directives</a><br/>
✳️ <a href="https://github.com/GatoGraphQL/GatoGraphQL/issues/213">Flat chain syntax</a></p>
<p>Winner of the round: the GraphQL API for WordPress.</p>
<hr>
<h2>Verdict!</h2>
<p>Ladies, gentlemen.</p>
<p><img src="/images/box/boxing-judge.jpg" alt="It's time for the verdict" title="It's time for the verdict"></p>
<p>What an unforgettable night we've had! What a match we just experienced! Two heavy heavyweights giving their best for their dream.</p>
<p>A dream that both of them are chasing, but only one of them can catch.</p>
<p>And now, we will know who that person is. Now, it's time for the truth!</p>
<p>Who will the &quot;GraphQL in WordPress&quot; world champion be?</p>
<p>Is it going to be the widely-acclaimed, loved-by-the-masses, featured-in-big-publications current champion, WPGraphQL?</p>
<p>Or it it going to be the irreverent, step-on-your-toes-without-asking-for-forgiveness, comes-uninvited-to-the-party contender, the GraphQL API for WordPress?</p>
<p><img src="/images/box/wpgraphql-vs-graphql-api-verdict.jpg" alt="The contenders wait for the verdict" title="The contenders wait for the verdict"></p>
<p>We are waiting for the verdict by the judge. What a tension! Oh Santa Maria, make my heart resist this moment!</p>
<p>🥁 And 🥁 the 🥁 winner 🥁 iiiiiissssssssssssss 🥁 ...</p>
<p><span style="font-size: 170px;">🥁</span></p>
<p>It's a draw!</p>
<p>The 2 fighters, the 2 heavyweights, they have a draw!</p>
<p><img src="/images/box/wpgraphql-and-graphql-api-friends.jpg" alt="The contenders hug each other" title="The contenders hug each other"></p>
<p>What a wonderful moment! The two contenders hug each other, showing that we are all friends within the WordPress community, like a big family we are.</p>
<p>So, what is the justification for the draw? The judge explains:</p>
<p>👑 WPGraphQL is the more popular one, and its use is more widespread.</p>
<p>👑 The GraphQL API has a better architecture, and it could potentially better serve WordPress in the long run.</p>
<p>Ladies and gentlemen, you've had the verdict from the judge!</p>
<p>And our trophy has two gloves: one for each contender.</p>
<p><img src="/images/box/trophy.jpg" alt="The 'GraphQL in WordPress' trophy" title="The 'GraphQL in WordPress' trophy"></p>
<p>But what is <strong>your</strong> verdict?</p>
<p>Will you keep unconditionally using WPGraphQL for your headless needs?</p>
<p>Or will you give the GraphQL API for WordPress the opportunity it is claiming for, <a href="/download">download the plugin</a>, and give it a try?</p>
<hr>
<p>Ladies and gentlemen. This is all for the night.</p>
<p>We sincerely hope you have enjoyed the match.</p>
<p>And let's hope we have a new encounter soon between our two champions.</p>
<p>Good night.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      👨🏻‍💻 Demoing the GraphQL API for WordPress
      
    </title>
    <link href="https://gatographql.com/blog/demoing-the-graphql-api-for-wordpress/"/>
    <updated>2021-02-15T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/demoing-the-graphql-api-for-wordpress/</id>
    <content type="html"><![CDATA[
      <p>Yesterday I talked about GraphQL on WordPress, for WordCamp India 2021. I explored these topics:</p>
<p>👉🏽 What is GraphQL?<br/>
👉🏽 How is it different from REST?<br/>
👉🏽 How do we use it with WordPress?</p>
<p>Alongside, I did a demo of the <a href="/">GraphQL API for WordPress</a> plugin. It's all me showing how to use the plugin in the wp-admin, for some 30 min.</p>
<p>Here is the video:</p>
<iframe width="1206" height="678" src="https://www.youtube.com/embed/LnyNyT2RwwI" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>The following features were covered:</p>
<p>✅ The GraphiQL and Voyager clients<br/>
✅ Persisted queries<br/>
✅ Passing parameters by URL to the persisted query<br/>
✅ HTTP caching<br/>
✅ Access control<br/>
✅ Making the API public and private</p>
<p>We also had a Q&amp;A session, which lasted 15 min. Here is the video:</p>
<iframe width="1206" height="678" src="https://www.youtube.com/embed/-Z6PgfreTxg" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>The Q&amp;A include the following questions, and at what time they appear:</p>
<p>❓ Will the hosting provider support GraphQL, or do we need to manage it on our own? <em>(1:25)</em><br/>
❓ How extensible is it, compared to the WP REST API? <em>(1:55)</em><br/>
❓ Is multilingual search supported in GraphQL? (answer is not clear, connection problems) <em>(2:39)</em><br/>
❓ How do we secure the GraphQL API? <em>(3:48)</em><br/>
❓ Why is the GraphQL API for WordPress plugin not officially available in the WordPress plugin repository? <em>(6:48)</em><br/>
❓ What is the limit for GraphQL? <em>(8:08)</em><br/>
❓ If somebody wants to dive into GraphQL, what's your advice for them? <em>(10:21)</em><br/>
❓ What can we expect from you should you present a new talk about GraphQL in another WordCamp? <em>(12:08)</em></p>
<p>As I mentioned at the end of the Q&amp;A, if you like what you see, and you'd like to learn more, or get your hands dirty using it and need help, <a href="/contact/">send me an email</a> or <a href="https://twitter.com/losoviz">DM on Twitter</a>. I'm generally available, and always thrilled to work on the combination of WordPress and GraphQL 🙏</p>
<p>I hope you've enjoyed the demo 😀</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      👶🏻 Rejuvenating WordPress through GraphQL
      
    </title>
    <link href="https://gatographql.com/blog/rejuvenating-wordpress-through-graphql/"/>
    <updated>2021-02-05T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/rejuvenating-wordpress-through-graphql/</id>
    <content type="html"><![CDATA[
      <p>WordPress is a legacy CMS: having been invented over 17 years ago, it's filled with PHP code that, given a new chance, it would be coded in a different way.</p>
<p>GraphQL is a modern interface to access data. Please notice the word &quot;interface&quot;: it doesn't care how the underlying data system is implemented, but only how to expose the data.</p>
<p>What happens when we put these two together? How should we design the GraphQL interface to access data from WordPress?</p>
<p>There are a couple of obvious strategies that we can put in place:</p>
<ol>
<li>
<p>Respect tradition, and provide a mapping that keeps the WordPress data model as is, including the technical debt it accumulated during the years</p>
</li>
<li>
<p>Fix the technical debt, providing an interface exposing data in an abstract, not-necessarily-fixed-to-WordPress way</p>
</li>
</ol>
<p>Both approaches have benefits and drawbacks, and there is no right or wrong. It's just opinionatedness, prioritizing some behavior over another.</p>
<p>For plugin <a href="https://gatographql.com">GraphQL API for WordPress</a> I have chosen the latter approach, attempting to create a GraphQL schema that, even though it is based on WordPress and works for WordPress, it is not tied to WordPress (for instance, by removing inconsistent names and relationships).</p>
<p>The result is that GraphQL rejuvenates WordPress: while we still have WordPress as our underlying CMS, with its legacy PHP code, its data layer can be created anew, based on common sense, not tradition. The data layer goes back from being an adolescent, to become a toddler again.</p>
<p><img src="/images/own-good-together-best.jpg" alt="GraphQL + WordPress rock"></p>
<p>The result is <a href="https://newapi.getpop.org/graphql-interactive/">this GraphQL schema, representing the WordPress data model</a>, and also <a href="https://newapi.getpop.org/graphql-interactive/?mutation_scheme=nested">supporting nested mutations</a>.</p>
<p>Let's check out it was carried out.</p>
<h2>The WordPress data model</h2>
<p>WordPress has the following entities:</p>
<ul>
<li>posts</li>
<li>pages</li>
<li>custom posts</li>
<li>media elements</li>
<li>users</li>
<li>user roles</li>
<li>tags</li>
<li>categories</li>
<li>comments</li>
<li>blocks</li>
<li>meta properties</li>
<li>others (options, plugins, themes, etc)</li>
</ul>
<p>These entities can have a hierarchy. For instance, post, page and media elements are both custom post types, and tags and categories are both taxonomies.</p>
<p>This is the WordPress database diagram, showing how data for all entities is stored:</p>
<figure class="text-center"><a href="/assets/guides/downstream/wordpress/wp-data-model.png" target="_blank"><img src="/assets/guides/downstream/wordpress/wp-data-model.png" alt="The WordPress database diagram" loading="lazy"></a><figcaption>The WordPress database diagram</figcaption></figure>
<h2>Is the mapping an exact replica of the DB diagram?</h2>
<p>When mapping the WordPress database into a GraphQL schema, is the same diagrame above respected 1 to 1?</p>
<p>No, it is not. While the database diagram is an actual implementation, GraphQL is an interface to access the data from the client. These two are related, but they can be different. GraphQL doesn't care about the database: it doesn't think in SQL commands, or know there are database tables called <code>wp_posts</code> and <code>wp_users</code>.</p>
<p>So we don't need to worry too much about the database diagram when creating the GraphQL schema for WordPress. That means that we can produce a GraphQL schema that fixes some of the technical debt from the WordPress data model.</p>
<h2>Mapping the WordPress data model as a GraphQL schema</h2>
<p>Let's do the mapping. First, we map the original entities as types, as much as possible. From the list of entities in the WordPress data model, we produce the following types for the GraphQL schema:</p>
<ul>
<li><code>Post</code></li>
<li><code>Page</code></li>
<li><code>Media</code></li>
<li><code>User</code></li>
<li><code>UserRole</code></li>
<li><code>PostTag</code></li>
<li><code>PostCategory</code></li>
<li><code>Comment</code></li>
</ul>
<p>Then, we add all the expected fields to every type. To represent the schema, we can use the SDL, or Schema Definition Language. (This is used for documentation purposes only; the plugin itself does not use SDL to codify the schema: it's all PHP code).</p>
<p>These are the fields (among many others) for a <code>Post</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token attr-name">title</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">content</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">excerpt</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">date</span><span class="token punctuation">:</span> Date<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>These are the fields (among many others) for a <code>User</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token attr-name">name</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">email</span><span class="token punctuation">:</span> String<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We also create the corresponding connections, which are fields that return another entity (instead of a scalar, such as a number or a string). For instance, we represent a post having an author, and a user owning posts:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">author</span><span class="token punctuation">:</span> User<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Fields and connections can also accept arguments. For instance, we enable <code>Post.date</code> to be formatted, and <code>User.posts</code> to search entries and limit their number:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">date</span><span class="token punctuation">(</span><span class="token attr-name">format</span><span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> Date<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">posts</span><span class="token punctuation">(</span><span class="token attr-name">limit</span><span class="token punctuation">:</span> Int<span class="token punctuation">,</span> <span class="token attr-name">search</span><span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>We keep doing this for all entities in the WordPress data model. Once we are done, we'll arrive at the GraphQL schema for WordPress, as visible using the Voyager client (available as &quot;Interactive Schema&quot; on the plugin's menu):</p>
<figure><a href="/assets/guides/upstream/interactive-schema.png" target="_blank"><img src="/assets/guides/upstream/interactive-schema.png" alt="The GraphQL schema for WordPress" loading="lazy"></a><figcaption>The GraphQL schema for WordPress</figcaption></figure>
<p>This schema has similarities to the WordPress database diagram, but also many differences. Let's analyse them.</p>
<h3>Operations without entity are mapped as Root fields</h3>
<p>In the WordPress database diagram represents how data is stored, so there is no &quot;beginning&quot;. GraphQL, though, is an interface to retrieve data, hence there must be an initial stage from which to execute the query.</p>
<p>This initial stage is the <code>Root</code> type, or, to be more precise, the <code>QueryRoot</code> and <code>MutationRoot</code> types (to deal with queries and mutations, respectively).</p>
<p>In these two types, we map all operations that do not depend on an entity, such as when executing <code>get_posts()</code>, <code>get_users()</code> or <code>wp_signon()</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">QueryRoot</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Post<span class="token punctuation">]</span><span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token attr-name">users</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">MutationRoot</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">logUserIn</span><span class="token punctuation">(</span><span class="token attr-name">username</span><span class="token punctuation">:</span> String<span class="token punctuation">,</span> <span class="token attr-name">password</span><span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> User</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The fields do not need to have the same name or signature as the operation they represent. For instance, calling field <code>logUserIn</code> can be considered more suitable than <code>signOn</code>.</p>
<h3>All mutations go under MutationRoot</h3>
<p>There are operations which do depend on an entity, such as <code>wp_update_post()</code>, which is applied on some post. The corresponding mutation on the GraphQL schema must be added to the <code>MutationRoot</code> type, because that's how GraphQL works.</p>
<p>Then, this operation is mapped like this:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">MutationRoot</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">updatePost</span><span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">postID</span><span class="token punctuation">:</span> ID<span class="token operator">!</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">newTitle</span><span class="token punctuation">:</span> String<span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">newContent</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This plugin also supports nested mutations, which are offered as an opt-in feature (because this is not standad GraphQL behavior). Then, mutations can also be added under any type, not just <code>MutationRoot</code>. In this case, we obtain:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">update</span><span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token attr-name">newTitle</span><span class="token punctuation">:</span> String<span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token attr-name">newContent</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Post<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Dealing with custom posts</h3>
<p>There is no type inheritance in GraphQL. Hence, we can't have a type <code>CustomPost</code>, and declare that <code>Post</code> and <code>Page</code> extend it.</p>
<p>GraphQL offers two resources to compensate for this lack: interfaces and union types.</p>
<p>For the first one, we create an interface <code>CustomPost</code> for the schema, declaring all the fields expected from a custom post, and we define types <code>Post</code> and <code>Page</code> to implement the interface:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">interface</span> <span class="token class-name">CustomPost</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">title</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">content</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">excerpt</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">date</span><span class="token punctuation">(</span><span class="token attr-name">format</span><span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> Date<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Post</span> <span class="token keyword">implements</span> <span class="token class-name">CustomPost</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">title</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">content</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">excerpt</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">date</span><span class="token punctuation">(</span><span class="token attr-name">format</span><span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> Date<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Page</span> <span class="token keyword">implements</span> <span class="token class-name">CustomPost</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">title</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">content</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">excerpt</span><span class="token punctuation">:</span> String</span><br><span class="highlight-line">  <span class="token attr-name">date</span><span class="token punctuation">(</span><span class="token attr-name">format</span><span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> Date<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>For the second one, we create a <code>CustomPostUnion</code> type for the schema returning all the custom post types:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">union</span> <span class="token class-name">CustomPostUnion</span> <span class="token operator">=</span> Post <span class="token operator">|</span> Page</span></code></pre>
<p>And have fields return this type whenever appropriate:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">QueryRoot</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">customPost</span><span class="token punctuation">(</span><span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token punctuation">)</span><span class="token punctuation">:</span> CustomPostUnion</span><br><span class="highlight-line">  <span class="token attr-name">customPosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>CustomPostUnion<span class="token punctuation">]</span><span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">customPosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>CustomPostUnion<span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">customPost</span><span class="token punctuation">:</span> CustomPostUnion<span class="token operator">!</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>As it can be observed, in the GraphQL schema we need to explicitly assert when we are dealing with posts, and when with custom posts, since they are not the same! Calling these two interchangeably is technical debt from WordPress, which we can fix.</p>
<p>For this reason, a custom post is always called <code>CustomPost</code> and not <code>Post</code>, a field dealing with custom posts is always called <code>customPosts</code> and not <code>posts</code>, and a field argument receiving the ID for a custom post is called <code>customPostID</code> and not <code>postID</code> (even though that's how it's called in the mapped WordPress function).</p>
<p>Then, the expectation is always clear:</p>
<ul>
<li>field <code>User.customPosts</code> can return a list of any custom post, including posts and pages, and <code>User.posts</code> only returns posts</li>
<li>field <code>Root.setFeaturedImageOnCustomPost</code> can add a featured image to any custom post, that's why it's not called <code>setFeaturedImageOnPost</code></li>
</ul>
<h3>Not grouping tags (and categories) under a single type</h3>
<p>Why is type <code>PostTag</code> (and same for <code>PostCategory</code>) called like that, instead of just <code>Tag</code>?</p>
<p>Because, when executing this query (where a product is a CPT), the results from field <code>tags</code> for posts and products will always be different, non-overlapping:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">query</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  posts <span class="token punctuation">{</span></span><br><span class="highlight-line">    tags <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      name</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  products <span class="token punctuation">{</span></span><br><span class="highlight-line">    tags <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      name</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Tags added to posts will not show up when retrieving tags for products, and the other way around (unless a product also uses the <code>post_tag</code> taxonomy, but then it can also be represented with the <code>PostTag</code> type). This does not represent a big deal in WordPress, since these items can be considered different rows from the same database table. But it does matter for GraphQL, which is strongly typed.</p>
<p>Then, it's a good design decision to keep these entities separate, under their own types, and have tags for posts returned under the <code>PostTag</code> type and, if a custom plugin implements its own product CPT, it must use the <code>ProductTag</code> type for its tags.</p>
<h3>Giving media items their own identity</h3>
<p>Media entities in WordPress are custom post types, only because it was convenient from an implementation point of view. However, the GraphQL schema can avoid this technical debt, and model media elements as a distinct entity, not as custom posts.</p>
<p>This implies the following decisions for the GraphQL schema:</p>
<ul>
<li>When querying field <code>customPosts</code>, it will not fetch media elements</li>
<li>The <code>Media</code> type does not implement the <code>CustomPost</code> interface, and won't be part of the <code>CustomPostUnion</code> type</li>
<li>The <code>Media</code> type doesn't have many fields expected from a custom post type, such as <code>excerpt</code>, <code>date</code> and <code>status</code>. Instead, it only has those fields expected from a media element:</li>
</ul>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Media</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">id</span><span class="token punctuation">:</span> ID<span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token attr-name">src</span><span class="token punctuation">:</span> String<span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token attr-name">width</span><span class="token punctuation">:</span> Int</span><br><span class="highlight-line">  <span class="token attr-name">height</span><span class="token punctuation">:</span> Int</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Identifying and mapping enums</h3>
<p>In some situations, WordPress uses fixed values from a given set. For instance, the status of a post can only be <code>&quot;publish&quot;</code>, <code>&quot;draft&quot;</code>, <code>&quot;pending&quot;</code> or <code>&quot;trash&quot;</code>.</p>
<p>In GraphQL, we can treat these as enums (instead of strings), and create a corresponding enumeration type. Following the GraphQL standard, enums should be written in uppercase, like this:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">enum</span> <span class="token class-name">CUSTOM_POST_STATUS</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token constant">PUBLISH</span></span><br><span class="highlight-line">  <span class="token constant">DRAFT</span></span><br><span class="highlight-line">  <span class="token constant">PENDING</span></span><br><span class="highlight-line">  <span class="token constant">TRASH</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>However, then the query can't be directly used to interact with WordPress, since executing <code>get_posts( [ &quot;post_status&quot; =&gt; &quot;PUBLISH&quot; ] )</code> doesn't work.</p>
<p>So, as a compromise, we keep these enum values in lowercase:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">enum</span> <span class="token class-name">CUSTOM_POST_STATUS</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  publish</span><br><span class="highlight-line">  draft</span><br><span class="highlight-line">  pending</span><br><span class="highlight-line">  trash</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Mapping additional types</h3>
<p>Blocks are not directly visible in the WordPress database diagram, since they are stored in <code>wp_posts</code> (there is no table <code>wp_blocks</code>), but nevertheless thay are a distinct entity.</p>
<p>Hence, we introduce the type <code>Block</code> to map them:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">blocks</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Block<span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Block</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token attr-name">type</span><span class="token punctuation">:</span> String<span class="token operator">!</span></span><br><span class="highlight-line">  <span class="token attr-name">attributes</span><span class="token punctuation">:</span> JSONObject</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🍾 GraphQL API for WordPress is now scoped, thanks to PHP-Scoper!
      
    </title>
    <link href="https://gatographql.com/blog/graphql-api-for-wp-is-now-scoped-thanks-to-php-scoper/"/>
    <updated>2021-01-30T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/graphql-api-for-wp-is-now-scoped-thanks-to-php-scoper/</id>
    <content type="html"><![CDATA[
      <p>Plugin GraphQL API for WordPress is now scoped. This means the plugin can be finally uploaded to the <a href="https://wordpress.org/plugins/">WordPress plugin directory</a>.</p>
<p><img src="/images/talking-business.jpg" alt="Talking business"></p>
<p>To do it, I'm using the wonderful <a href="https://github.com/humbug/php-scoper">PHP-Scoper</a>. Using this library with WordPress does not go without its challenges, so I'll explain in this blog post how I managed to pull it out.</p>
<p>Sections:</p>
<ul>
<li><a href="#heading-taking-the-decision-to-scope">Taking the decision to scope</a></li>
<li><a href="#heading-checking-out-the-options">Checking out the options</a></li>
<li><a href="#heading-trying-out-mozart-and-failing">Trying out Mozart, and failing</a></li>
<li><a href="#heading-checking-php-scoper-and-coming-out-in-panic">Checking PHP-Scoper, and coming out in panic</a></li>
<li><a href="#heading-coming-back-to-php-scoper-this-time-for-good">Coming back to PHP-Scoper, this time for good</a></li>
<li><a href="#heading-php-scoper-the-easy-way">PHP-Scoper, the easy way 😎</a> 👈🏽 Here starts my solution</li>
<li><a href="#heading-show-me-the-real-stuff">Show me the real stuff</a></li>
<li><a href="#heading-testing">Testing</a></li>
<li><a href="#heading-check-out-the-results">Check out the results</a></li>
</ul>
<h2>Taking the decision to scope</h2>
<p>A few weeks ago, Matt Mullenweg announced he'll be <a href="https://youtu.be/QI3qCoiuG3w?t=2268">keeping an eye on &quot;the GraphQL plugin&quot;</a>, obviously referring to <a href="https://www.wpgraphql.com/">WPGraphQL</a>. His expression demonstrates that he believes there is only one GraphQL plugin, when in fact there are two (the one left out is, well, mine). That made me realize how little visibility my plugin has, and I felt bad about it.</p>
<p>Matt didn't know my plugin existed. Nor does most of the WordPress community, for that matter. Clearly I'm not publicizing it well enough. I know that I suck in marketing and social media; I'm just OK with technical stuff (or so I believe). So I decided to do something about it, at least within my capabilities.</p>
<p>So this is what I'm working on:</p>
<ul>
<li>I just finished coding this same website, <a href="https://gatographql.com">gatographql.com</a>, and launched it 2 weeks ago (yay! 🥳 Btw, how do you like it? Be welcome to give me feedback, via <a href="https://twitter.com/losoviz/">DM</a> or <a href="mailto:leo@getpop.org">email</a>)</li>
<li>3 days ago, I finally started scoping the plugin, and finished this task yesterday! (At 3 am, but it was worth it 😅)</li>
<li>And finally, I'm already working on the upcoming version <code>0.8</code>, which will be the first one available in the plugin repository</li>
</ul>
<p>Scoping the plugin is mandatory to upload it to the repository, because otherwise it could conflict with a different plugin, which requires the same dependency as my plugin, but with a different version. Having done it is a really big milestone; no other development is as important. For instance, I must still complete the GraphQL schema to fully match the WordPress data model, but that will be done steadily on each new release.</p>
<p>So in a few weeks from now, the plugin will show up when searching for &quot;GraphQL&quot;, and the people who are actually needing to implement a GraphQL API will get to know of my plugin's existence.</p>
<p>Indeed, I do want my plugin to be seriously considered for the future of WordPress. I've been working on it for several years now. <a href="https://github.com/GatoGraphQL/GatoGraphQL">The repo</a> was started back in August 2016; that is even before WPGraphQL existed, and at the beginning of GraphQL. But I didn't know that the project would become a GraphQL server; it took that direction only around 1.5 years ago.</p>
<p>(The project is actually a framework to build applications using server-side components, and a GraphQL server could perfectly be built using this architecture. So then I just built it).</p>
<p>WPGraphQL is an established plugin, and rightly so: it was started a few years ago, and a community was built around it. The work by <a href="https://twitter.com/jasonbahl">Jason Bahl</a> (who is employed by Gatsby) and <a href="https://github.com/wp-graphql/wp-graphql/graphs/contributors">the contributors to his project</a> has been outstanding: integrating WordPress into the Jamstack is now easier than ever.</p>
<p>But one thing is Gatsby and the Jamstack, and another thing is WordPress. WordPress is 40% of the web, not just an input to a static site generator.</p>
<p>So now, we can consider if WPGraphQL is the right option, without having this decision taken for us out of lack of alternatives. We can now analyze both plugins to see whose goals are more aligned to what's important for WordPress.</p>
<p>The GraphQL API for WordPress can also work with the Jamstack. But its main objectives are, I believe, more splendid: To &quot;democratize data publishing&quot;, so that editing an API becomes as easy as editing a post (something everyone can do), and to make WordPress become the OS of the web.</p>
<p>Once the plugin is available on the repository, I hope more people will try it out and say &quot;Hey, this is so friking awesome! How comes I didn't know about this stuff before?&quot;.</p>
<p>And then, the choice of &quot;the GraphQL plugin&quot; is not pre-determined, and the WordPress community can consider both WPGraphQL and the GraphQL API for WordPress based on their own merits.</p>
<p>Now that my motivations are out of the way, let's talk technical stuff 🤓.</p>
<h2>Checking out the options</h2>
<p>Scoping a plugin involves running some tooling, that takes the plugin code as input, and spits out the scoped plugin. No big deal, right? How hard can that be?</p>
<p><img src="/images/dog-scope-plugin.jpg" alt="Talking technical"></p>
<p>Well, depending on the codebase, just executing the scope command alone won't be enough. After that, we need to check for errors in the console, fix them, test the application thoroughly, identify errors and why they happen, fix them, and iterate. To get it completely right, it might require some time.</p>
<p>There are 2 libraries for scoping, which have different goals:</p>
<ul>
<li><a href="https://github.com/coenjacobs/mozart">Mozart</a>, for WordPress code</li>
<li><a href="https://github.com/humbug/php-scoper">PHP-Scoper</a>, for any PHP code, particularly when producing PHARs</li>
</ul>
<p>Because I have a WordPress plugin, I tried out Mozart first. Let's see how it fared.</p>
<h2>Trying out Mozart, and failing</h2>
<p>I tried Mozart around 1 year ago. For what it says in the documentation, &quot;the <code>mozart compose</code> command does all the magic&quot;. So I expected it all to be very quick and simple, and go enjoy a daiquiri for the rest of the day.</p>
<p>Alas, Mozart never worked for my codebase. It kept running into issues, so the scoping never materialized. And I couldn't get the required assistance: I submitted a PR, but <a href="https://github.com/coenjacobs/mozart/pull/36#issuecomment-633013728">it was not considered for merging</a>, and I was not even notified about it, so I kept waiting until I naturally lost interest in this project.</p>
<p>I believe that Mozart couldn't handle some of the dependencies in my plugin. I'm making use of several of Symfony's components, including <a href="https://symfony.com/doc/current/components/dependency_injection.html">DependencyInjection</a>, <a href="https://symfony.com/doc/current/components/cache.html">Cache</a> and <a href="https://github.com/symfony/dotenv">Dotenv</a>, with everything managed through Composer.</p>
<p>Scoping PHP is not just about PHP, so the scoper will have many hurdles to avoid and challenges to solve. For instance, Symfony DependencyInjection uses <code>YAML</code> files to set-up configuration, and these must be scoped too. And the <code>composer.json</code> file contains the configuration for <code>PSR-4</code> autoloading, and this must be scoped too. And, I believe, Mozart couldn't handle these complexities properly.</p>
<p>But I'm sure that my experience is not the only one, and that there are many happy users our there. Also, my failed attempt happened 1 year ago, so I wonder if the tool has been improved since then. And then, don't forget the saying: &quot;All scoped plugins are alike; each unscoped plugin is unscoped in its own way&quot;, so possibly it fails just for me.</p>
<p>If your WordPress plugin is simple, with self-contained logic, and scoping must be performed within PHP code only, then chances are that Mozart will work. You just gotta find out.</p>
<h2>Checking PHP-Scoper, and coming out in panic</h2>
<p>So I headed for PHP-Scoper. However, I never even tried to try it, because I got frightened immediately by it.</p>
<p>To start with, <a href="https://github.com/humbug/php-scoper#wordpress">this tool does not naturally support WordPress</a>. And to continue, they recommend to take a look at <a href="https://github.com/humbug/php-scoper/blob/master/Makefile">their own Makefile</a>, which looks like this:</p>
<pre class="language-bash"><code class="language-bash"><span class="highlight-line"><span class="token comment"># See https://tech.davis-hansson.com/p/make/</span></span><br><span class="highlight-line">MAKEFLAGS <span class="token operator">+=</span> --warn-undefined-variables</span><br><span class="highlight-line">MAKEFLAGS <span class="token operator">+=</span> --no-builtin-rules</span><br><span class="highlight-line"></span><br><span class="highlight-line">.DEFAULT_GOAL :<span class="token operator">=</span> <span class="token builtin class-name">help</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token assign-left variable">PHPBIN</span><span class="token operator">=</span>php</span><br><span class="highlight-line"><span class="token assign-left variable">PHPNOGC</span><span class="token operator">=</span>php -d zend.enable_gc<span class="token operator">=</span><span class="token number">0</span></span><br><span class="highlight-line"><span class="token assign-left variable">IS_PHP8</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>shell php -r <span class="token string">"echo version_compare(PHP_VERSION, '8.0.0', '>=') ? 'true' : 'false';"</span><span class="token variable">)</span></span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token assign-left variable">SRC_FILES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>shell <span class="token function">find</span> bin/ src/ -type f<span class="token variable">)</span></span></span><br><span class="highlight-line"></span><br><span class="highlight-line">.PHONY: <span class="token builtin class-name">help</span></span><br><span class="highlight-line">help:</span><br><span class="highlight-line">	@echo <span class="token string">"<span class="token entity" title="\033">\033</span>[33mUsage:<span class="token entity" title="\033">\033</span>[0m<span class="token entity" title="\n">\n</span>  make TARGET<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\033">\033</span>[32m#<span class="token entity" title="\n">\n</span># Commands<span class="token entity" title="\n">\n</span>#---------------------------------------------------------------------------<span class="token entity" title="\033">\033</span>[0m<span class="token entity" title="\n">\n</span>"</span></span><br><span class="highlight-line">	@fgrep -h <span class="token string">"##"</span> <span class="token variable"><span class="token variable">$(</span>MAKEFILE_LIST<span class="token variable">)</span></span> <span class="token operator">|</span> <span class="token function">fgrep</span> -v <span class="token function">fgrep</span> <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'s/<span class="token entity" title="\\">\\</span><span class="token variable">$$</span>//'</span> <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'s/##//'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN {FS = ":"}; {printf "<span class="token entity" title="\033">\033</span>[33m%s:<span class="token entity" title="\033">\033</span>[0m%s<span class="token entity" title="\n">\n</span>", <span class="token variable">$$</span>1, <span class="token variable">$$</span>2}'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">#</span></span><br><span class="highlight-line"><span class="token comment"># Build</span></span><br><span class="highlight-line"><span class="token comment">#---------------------------------------------------------------------------</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">.PHONY: clean</span><br><span class="highlight-line">clean:	 <span class="token comment">## Clean all created artifacts</span></span><br><span class="highlight-line">clean:</span><br><span class="highlight-line">	<span class="token function">git</span> clean --exclude<span class="token operator">=</span>.idea/ -ffdx</span><br><span class="highlight-line"></span><br><span class="highlight-line">update-root-version: <span class="token comment">## Check the lastest GitHub release and update COMPOSER_ROOT_VERSION accordingly</span></span><br><span class="highlight-line">update-root-version:</span><br><span class="highlight-line">	<span class="token function">rm</span> .composer-root-version <span class="token operator">||</span> <span class="token boolean">true</span></span><br><span class="highlight-line">	<span class="token variable"><span class="token variable">$(</span>MAKE<span class="token variable">)</span></span> .composer-root-version</span></code></pre>
<p>And 600 more lines, all like this. It looks like a riddle. Believing that I needed to understand that code just to scope my plugin, made me flee unceremoniously.</p>
<p>(Well, understanding that code is their recommendation to test the scoped application, but it is not required. We can also just run the command <code>php-scoper add-prefix</code>, let it do all the magic, and go drink our daiquiris.)</p>
<h2>Coming back to PHP-Scoper, this time for good</h2>
<p>So, 3 days ago, I took a decision to implement scoping, somehow. I had to make it happen.</p>
<p>I came back to PHP-Scoper, to try it out in earnest. I knew that WordPress could be scoped with it from reading <a href="https://deliciousbrains.com/php-scoper-namespace-composer-depencies/">PHP Scoper: How to Avoid Namespace Issues in your Composer Dependencies</a> (by the brilliant folks from Delicious Brains). It was just a matter of attitude, and perseverence.</p>
<p>I explored some of the existing solutions, including:</p>
<ul>
<li><a href="https://github.com/humbug/php-scoper/issues/442#issuecomment-736598602">This one</a> by Lucas Bustamante</li>
<li><a href="https://github.com/Yoast/wordpress-seo/blob/11.3/src/config/dependency-management.php">This one</a> by Yoast</li>
<li><a href="https://github.com/google/site-kit-wp/blob/80e3bd88317bf20bc5e5d6600428692fa8e3fc08/includes/loader.php">This one</a> by Google Site Kit</li>
<li><a href="https://github.com/google/web-stories-wp/blob/main/scoper.inc.php">This one</a> by Google Web Stories</li>
</ul>
<p>But they all look not fully satisfying to me: either the code seems hacky, or fragile and waiting to break at some time or another.</p>
<p>For instance, the Google Web Stories plugin scopes the code, and then reverts back each one of the conflicts:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">return</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">  <span class="token string single-quoted-string">'patchers'</span>                   <span class="token operator">=></span> <span class="token punctuation">[</span></span><br><span class="highlight-line">		<span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token variable">$file_path</span><span class="token punctuation">,</span> <span class="token variable">$prefix</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br>			<span class="token comment">/*<br><span class="highlight-line">			 * There is currently no easy way to simply whitelist all global WordPress functions.</span><br><span class="highlight-line">			 *</span><br><span class="highlight-line">			 * This list here is a manual attempt after scanning through the AMP plugin, which means</span><br><span class="highlight-line">			 * it needs to be maintained and kept in sync with any changes to the dependency.</span><br><span class="highlight-line">			 *</span><br><span class="highlight-line">			 * As long as there's no built-in solution in PHP-Scoper for this, an alternative could be</span><br><span class="highlight-line">			 * to generate a list based on php-stubs/wordpress-stubs. devowlio/wp-react-starter/ seems</span><br><span class="highlight-line">			 * to be doing just this successfully.</span><br><span class="highlight-line">			 *</span><br><span class="highlight-line">			 * @see https://github.com/humbug/php-scoper/issues/303</span><br><span class="highlight-line">			 * @see https://github.com/php-stubs/wordpress-stubs</span><br><span class="highlight-line">			 * @see https://github.com/devowlio/wp-react-starter/</span><br>			 */</span><br><span class="highlight-line">			<span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"\\$prefix\\_doing_it_wrong"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\_doing_it_wrong'</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">			<span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"\\$prefix\\__"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\__'</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">			<span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"\\$prefix\\esc_html_e"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\esc_html_e'</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">			<span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"\\$prefix\\esc_html"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\esc_html'</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">			<span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"\\$prefix\\esc_attr"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\esc_attr'</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">			<span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"\\$prefix\\esc_url"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\esc_url'</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">      <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"\\$prefix\\do_action"</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\do_action'</span><span class="token punctuation">,</span> <span class="token variable">$contents</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">      <span class="token comment">// ...</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">]</span></span></code></pre>
<p>I understand why they do it, but I don't like it. Whenever a new WordPress function gets referenced, they need to make sure it also makes it to this list. It's too manual, too fragile.</p>
<p>So this was my challenge: Isn't there a simpler way to scope a plugin, and relying on code that we can present to our friends and colleagues without blushing?</p>
<h2>PHP-Scoper, the easy way 😎</h2>
<p>It actually turned out to be easier than I thought! In just a few hours, I had it all working.</p>
<p><img src="/images/koala-scoping-in-few-hours.jpg" alt="Scoping in a few hours"></p>
<p>Now, when I say &quot;easy&quot; and &quot;hours&quot;, I actually mean: It all worked immediately, but only after spending 2 months creating the proper structure for the codebase (I'll explain better later on).</p>
<p>But the important thing is: If you have the right set-up for the project, scoping it can be accomplished in no time.</p>
<p>The problem with scoping WordPress code is, well, WordPress code. The issue <a href="https://github.com/humbug/php-scoper/issues/303">is explained here</a>, but it boils down to all WordPress functions and classes being namespaced too. So if we reference <code>WP_Query</code> or call <code>get_posts</code> in our code, these will be transformed to <code>MyPrefixedNamespace\WP_Query</code> and <code>MyPrefixedNamespace\get_posts</code>, producing an epic fail on runtime. And that cannot be avoided in PHP-Scoper without hacks.</p>
<p>So, what is the solution to this? Easy peasy: don't reference <code>WP_Query</code>, or call <code>get_posts</code>, or use any WordPress code in the codebase <strong>that will be scoped</strong>.</p>
<p><img src="/images/crazy-bird.jpg" alt="Crazy me?"></p>
<p>No, I'm not crazy, and I'm sure you're not either. And yeah, I know that we're building a WordPress plugin... Let me explain.</p>
<p>How can we not include WordPress code? By splitting the codebase into 2 sets of packages:</p>
<ul>
<li>Those containing WordPress code, <strong>without referencing code from any external library</strong></li>
<li>Those containing business logic, <strong>without containing any WordPress code</strong>, and <strong>including all required dependencies and references to their code</strong></li>
</ul>
<p>This way, instead of having a single codebase, we have multiple codebases (or packages), where some of them will get scoped and some not, and they all form the plugin, tied together via Composer.</p>
<p>Then, we do not scope the package containing WordPress code, avoiding the conflict. This works because it doesn't reference any code belonging to any external dependency. All references are internal, such as <code>MyNamespace\MyPlugin\MyClass</code>. But these need not be scoped, because we can safely assume that there will be only 1 version of the plugin installed in the WordPress site, and we can whitelist our namespace <code>MyNamespace\*</code>.</p>
<p>Moreover, if our plugin can be extended, then whitelisting our own namespace is mandatory. For instance, a field resolver for the GraphQL API for WordPress is implemented by extending from class <code>PoP\ComponentModel\FieldResolvers\AbstractFieldResolver</code>. If I scoped it, developers would be forced to reference <code>PoP\ComponentModel\FieldResolvers\AbstractFieldResolver</code> for development, and <code>PrefixedByPoP\PoP\ComponentModel\FieldResolvers\AbstractFieldResolver</code> for production. That's a no go.</p>
<p>Then, we only scope the business-logic packages, which contain references to all external libraries but no WordPress code.</p>
<p>In summary, we are switching this strategy:</p>
<p>&quot;Have a single codebase, scope it, and then painfully and with plenty of patience undo the damage, while praying that no conflict goes unnoticed and it 💣 booms in production&quot;</p>
<p>To this one:</p>
<p>&quot;Split up the codebase into 2 groups, scope only the one containing the references to the external dependencies and no WordPress code, and go have your well-earned daiquiri 🍹&quot;.</p>
<h2>Show me the real stuff</h2>
<p>It's time open up the sausage and see if it has real meat inside 🌭.</p>
<p>4 days ago, I had <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/380f16c46a91bb3d40fff53c6770a31c30d6d457/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/src/ContentProcessors/MarkdownContentParser.php">the following code</a> in my plugin:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">namespace</span> <span class="token package">GraphQLAPI<span class="token punctuation">\</span>GraphQLAPI<span class="token punctuation">\</span>ContentProcessors</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Parsedown</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">MarkdownContentParser</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getHTMLContent</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$fileContent</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Parsedown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token variable">$markdownContent</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Class <code>Parsedown</code> comes from the external dependency <a href="https://packagist.org/packages/erusev/parsedown"><code>erusev/parsedown</code></a>, as defined in the <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/380f16c46a91bb3d40fff53c6770a31c30d6d457/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/composer.json#L19">plugin's <code>composer.json</code></a>:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"erusev/parsedown"</span><span class="token operator">:</span> <span class="token string">"^1.7"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Hence, my plugin contained references to an external library, so I needed to scope it, to transform <code>Parsedown</code> into <code>PrefixedByPoP\Parsedown</code>. But doing so would also scope all WordPress code in the plugin, causing the conflicts.</p>
<p>So I extracted the code into a separate package, called <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/cfa98cf9470425016b8cdc88639bafb375d88375/layers/GraphQLAPIForWP/packages/markdown-convertor"><code>graphql-api/markdown-convertor</code></a>, and replaced the 3rd-party dependency in <code>composer.json</code> <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/cfa98cf9470425016b8cdc88639bafb375d88375/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/composer.json#L19">with my own dependency</a>:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"graphql-api/markdown-convertor"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now, the plugin avoids referencing the external library; instead, it <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/cfa98cf9470425016b8cdc88639bafb375d88375/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/src/ContentProcessors/MarkdownContentParser.php">references the service <code>MarkdownConvertorInterface</code> from the new package</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">namespace</span> <span class="token package">GraphQLAPI<span class="token punctuation">\</span>GraphQLAPI<span class="token punctuation">\</span>ContentProcessors</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">GraphQLAPI<span class="token punctuation">\</span>MarkdownConvertor<span class="token punctuation">\</span>MarkdownConvertorInterface</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">MarkdownContentParser</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractContentParser</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">protected</span> <span class="token class-name type-declaration">MarkdownConvertorInterface</span> <span class="token variable">$markdownConvertorInterface</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">MarkdownConvertorInterface</span> <span class="token variable">$markdownConvertorInterface</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">markdownConvertorInterface</span> <span class="token operator">=</span> <span class="token variable">$markdownConvertorInterface</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getHTMLContent</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$fileContent</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">markdownConvertorInterface</span><span class="token operator">-></span><span class="token function">convertMarkdownToHTML</span><span class="token punctuation">(</span><span class="token variable">$fileContent</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Referencing the 3rd-party dependency is done <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/cfa98cf9470425016b8cdc88639bafb375d88375/layers/GraphQLAPIForWP/packages/markdown-convertor/src/MarkdownConvertor.php">in the new package</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">namespace</span> <span class="token package">GraphQLAPI<span class="token punctuation">\</span>MarkdownConvertor</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Parsedown</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">MarkdownConvertor</span> <span class="token keyword">implements</span> <span class="token class-name">MarkdownConvertorInterface</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">convertMarkdownToHTML</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$markdownContent</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Parsedown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token variable">$markdownContent</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Finally, we must:</p>
<ul>
<li>Scope dependency <code>graphql-api/markdown-convertor</code></li>
<li>Skip scoping the plugin code</li>
<li>Whitelist namespace <code>GraphQLAPI\*</code>, to avoid my own classes from being scoped</li>
</ul>
<p>This is pretty much the strategy. From now on, it will be a repetition of this same idea, to remove all external dependencies from the code, until voilà, the plugin can be scoped.</p>
<p>The dependencies to extract are only those from the <code>require</code> section on your <code>composer.json</code> file; for <code>require-dev</code> you can keep any dependency, external or not, since we don't need to scope dependencies used for development; only those ones to create and ship the plugin, for production, need be scoped.</p>
<p>At the end, the <code>composer.json</code> from your plugin should not contain any external dependency. For my plugin, it <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/cfa98cf9470425016b8cdc88639bafb375d88375/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/composer.json">looks like this</a>:</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"^7.4|^8.0"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"getpop/engine-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"graphql-api/markdown-convertor"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"graphql-by-pop/graphql-clients-for-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"graphql-by-pop/graphql-endpoint-for-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"graphql-by-pop/graphql-server"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/basic-directives"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/comment-mutations-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/commentmeta-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/comments-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/custompost-mutations-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/custompostmedia-mutations-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/custompostmedia-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/custompostmeta-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/generic-customposts"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/media-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/pages-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/post-mutations"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/post-tags-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/posts-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/taxonomymeta-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/taxonomyquery-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/user-roles-access-control"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/user-roles-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/user-state-mutations-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/user-state-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/usermeta-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"pop-schema/users-wp"</span><span class="token operator">:</span> <span class="token string">"^0.8"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>All those packages, with namespaces <code>getpop</code>, <code>graphql-api</code>, <code>graphql-by-pop</code>, and <code>pop-schema</code>, are all mine: dependencies containing the whole code for the plugin. They are distributed into different namespaces to better manage the code, but you don't need to: using a single namespace works well.</p>
<p>Now, as the number of packages in your application grows, you'll need to have them all hosted in a monorepo, or you'll go bunkers creating pull requests involving more than one package (believe me, I've been there). In my case, all my packages are hosted in the <a href="https://github.com/GatoGraphQL/GatoGraphQL"><code>GatoGraphQL/GatoGraphQL</code> monorepo</a>, and I keep them in sync via the wonderful <a href="https://github.com/symplify/monorepo-builder">Monorepo Builder</a> (I need to write an article about this tool, it's such a life saver!).</p>
<p>The namespaces for these packages are <code>PoP</code>, <code>GraphQLAPI</code>, <code>GraphQLByPoP</code> and <code>PoPSchema</code>. Since they are mine, I know they will appear only once in the application, and so I can avoid scoping them.</p>
<p>To do that, I <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/858d2fc24b766236f79379a837f4130dfb76a6ff/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/scoper.inc.php#L69:L79">whitelist them in <code>scoper.inc.php</code></a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">return</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">  <span class="token string single-quoted-string">'whitelist'</span> <span class="token operator">=></span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token comment">// Own namespaces</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'PoPSchema\*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'PoP\*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'GraphQLByPoP\*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'GraphQLAPI\*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token comment">// Own container cache</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'PoPContainer\*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span></code></pre>
<p>The last entry corresponds to the dependency injection container, which also needs be scoped. By default, this container is assigned name <code>ProjectServiceContainer</code>, directly in the global namespace. But PHP-Scoper doesn't support whitelisting specific classes from the global namespace. Hence, I added the artificial namespace <code>PoPContainer</code> to the whitelist, and <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/27087ec23e6e393aa726f9461ad1c6806249c532/layers/Engine/packages/root/src/Container/ContainerBuilderFactory.php#L141">assigned this namespace</a> when dumping the container to disk:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token variable">$dumper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhpDumper</span><span class="token punctuation">(</span><span class="token variable">$containerBuilder</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token function">file_put_contents</span><span class="token punctuation">(</span></span><br><span class="highlight-line">  <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$cacheFile</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token variable">$dumper</span><span class="token operator">-></span><span class="token function">dump</span><span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token comment">// Save under own namespace to avoid conflicts</span></span><br><span class="highlight-line">    <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'namespace'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'PoPContainer'</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>You may notice that, concerning the packages, some of them end with <code>-wp</code> (like <code>pop-schema/users-wp</code>) while some don't (like <code>graphql-by-pop/graphql-server</code>). Yep, you guessed it right: the former ones contain WordPress code and no references to external libraries, and the latter ones can contain references to external libraries, but no WordPress code whatsoever.</p>
<p>Then, I <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/858d2fc24b766236f79379a837f4130dfb76a6ff/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/scoper.inc.php#L50:L52">skip scoping the WordPress packages</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">return</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">  <span class="token string single-quoted-string">'finders'</span> <span class="token operator">=></span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token comment">// Scope packages under vendor/, excluding local WordPress packages</span></span><br><span class="highlight-line">    <span class="token class-name static-context">Finder</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token operator">-></span><span class="token function">files</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token operator">-></span><span class="token function">notPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span><br><span class="highlight-line">        <span class="token comment">// Exclude libraries ending in "-wp"</span></span><br><span class="highlight-line">        <span class="token string single-quoted-string">'#getpop/[a-zA-Z0-9_-]*-wp/#'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token string single-quoted-string">'#pop-schema/[a-zA-Z0-9_-]*-wp/#'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token string single-quoted-string">'#graphql-by-pop/[a-zA-Z0-9_-]*-wp/#'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">      <span class="token operator">-></span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'vendor'</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span></code></pre>
<p>What happens if some WordPress package needs to reference an external library, and this cannot be extracted into another package? For instance, my package <code>getpop/routing-wp</code> depends on <a href="https://packagist.org/packages/brain/cortex"><code>brain/cortex</code></a>, and <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/17936bbd59b51a91fa584ed612e524832bbd03d0/layers/Engine/packages/routing-wp/src/Component.php#L58">this is unavoidable</a>.</p>
<p>I can't scope the whole package, since <code>getpop/routing-wp</code> contains WordPress code. Instead, what I do is to identify the files where those references are done, and make sure that they do not contain any WordPress code. Then I can scope those files only.</p>
<p>In this case, the reference to <code>Cortex/Brain</code> is done in 2 files, including <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/f805ccafd6240a3467582ff73286b02c0722c25b/layers/Engine/packages/routing-wp/src/Hooks/SetupCortexHookSet.php#L8"><code>layers/Engine/packages/routing-wp/src/Hooks/SetupCortexHookSet.php</code></a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">namespace</span> <span class="token package">PoP<span class="token punctuation">\</span>RoutingWP<span class="token punctuation">\</span>Hooks</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">PoP<span class="token punctuation">\</span>Hooks<span class="token punctuation">\</span>AbstractHookSet</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Brain<span class="token punctuation">\</span>Cortex<span class="token punctuation">\</span>Route<span class="token punctuation">\</span>RouteCollectionInterface</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Brain<span class="token punctuation">\</span>Cortex<span class="token punctuation">\</span>Route<span class="token punctuation">\</span>RouteInterface</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Brain<span class="token punctuation">\</span>Cortex<span class="token punctuation">\</span>Route<span class="token punctuation">\</span>QueryRoute</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">PoP<span class="token punctuation">\</span>RoutingWP<span class="token punctuation">\</span>WPQueries</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">PoP<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>RoutingManagerFacade</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">SetupCortexHookSet</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHookSet</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hooksAPI</span><span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'cortex.routes'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'setupCortex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token number">1</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br>  <span class="token comment">/**<br><span class="highlight-line">   * @param RouteCollectionInterface&lt;RouteInterface> $routes</span><br>   */</span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setupCortex</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RouteCollectionInterface</span> <span class="token variable">$routes</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token variable">$routingManager</span> <span class="token operator">=</span> <span class="token class-name static-context">RoutingManagerFacade</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$routingManager</span><span class="token operator">-></span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token variable">$routes</span><span class="token operator">-></span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryRoute</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token variable">$route</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$matches</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">          <span class="token keyword">return</span> <span class="token class-name static-context">WPQueries</span><span class="token operator">::</span><span class="token constant">STANDARD_NATURE</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Can you notice the oddity here? This is an implementation of a hook, but no <code>add_action</code> is called, since I can't have any WordPress code here. Instead, it calls function <code>addAction</code> from service <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/f805ccafd6240a3467582ff73286b02c0722c25b/layers/Engine/packages/hooks/src/HooksAPIInterface.php"><code>HooksAPIInterface</code></a>, and this service is implemented by <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/b79c5bef5f7abb5b8ebebb374fa1da252011d7ed/layers/Engine/packages/hooks-wp/src/HooksAPI.php#L27">class <code>HooksAPI</code> in package <code>getpop/hooks-wp</code></a>, where we can have WordPress code:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">namespace</span> <span class="token package">PoP<span class="token punctuation">\</span>HooksWP</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">PoP<span class="token punctuation">\</span>Hooks<span class="token punctuation">\</span>HooksAPIInterface</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">class</span> <span class="token class-name">HooksAPI</span> <span class="token keyword">implements</span> <span class="token class-name">HooksAPIInterface</span></span><br><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addAction</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$priority</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$accepted_args</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token function">add_action</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">,</span> <span class="token variable">$function_to_add</span><span class="token punctuation">,</span> <span class="token variable">$priority</span><span class="token punctuation">,</span> <span class="token variable">$accepted_args</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now that the code is cleanly split, we can <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/858d2fc24b766236f79379a837f4130dfb76a6ff/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/scoper.inc.php#L64:L67">scope those 2 files referencing external dependencies</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">return</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">  <span class="token string single-quoted-string">'finders'</span> <span class="token operator">=></span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token class-name static-context">Finder</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'vendor/getpop/routing-wp/src/Component.php'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string single-quoted-string">'vendor/getpop/routing-wp/src/Hooks/SetupCortexHookSet.php'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">]</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span></code></pre>
<p>Earlier on I mentioned that setting-up the scoping took a few hours, but only after 2 months of work. Well, this example demonstrates what I meant: The actual work lies in dividing the codebase cleanly into the 2 sets.</p>
<p>In my case, the work took 2 months because the level of detail was extreme: The plugin became a composition of 125 packages! But this is an exceptional case, with the goal to have <a href="https://graphql-by-pop.com">GraphQL by PoP</a> (the underlying server for the plugin) <a href="https://graphql-by-pop.com/docs/architecture/cms-agnosticism.html">be CMS-agnostic</a>, as to support an implementation for other CMSs/frameworks just by reimplementing the corresponding <code>-wp</code> packages.</p>
<p>(I wrote in detail about this strategy, in article <a href="https://www.smashingmagazine.com/2019/11/abstracting-wordpress-code-cms-concepts/">Abstracting WordPress Code To Reuse With Other CMSs: Concepts</a> and <a href="https://www.smashingmagazine.com/2019/11/abstracting-wordpress-code-reuse-with-other-cms-implementation/">Implementation</a>.)</p>
<p>It's certainly quite some work, but the improved cleanliness of the code makes it worth it. And not just for scoping the plugin, which came as a total surprise to me, and I'm still gidding in my unexpected happiness. For instance, I run PHPStan and PHPUnit separately on WordPress and non-WordPress code, avoiding me many headaches.</p>
<p>Once the codebase is tidied-up, the world suddenly becomes such a better place.</p>
<h2>Testing</h2>
<p>So, how do we test this beast?</p>
<p>The solution I came up with is to rely on <a href="https://github.com/rectorphp/rector">Rector</a>, the same tool I use for <a href="https://blog.logrocket.com/transpiling-php-code-from-8-0-to-7-x-via-rector/">downgrading code from PHP 7.4, for development, to 7.1, for production</a>.</p>
<p>The idea is the following:</p>
<ol>
<li>Scope the plugin</li>
<li>Analyze it with Rector, applying any rule (it doesn't matter which one)</li>
</ol>
<p>If something went wrong when scoping, then Rector won't be able to load some class, and it will throw an error. For instance, if class <code>Brain\Cortex</code> was scoped as <code>PrefixedByPoP\Brain\Cortex</code>, but some reference to it was left as <code>Brain\Cortex</code>, then autoloading this class will fail.</p>
<p>This is my <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/acaeeec4bcc3d93bffd8b6875ed3cbfbe1c18de8/.github/workflows/scope_graphql_api_for_wp_tests.yml">GitHub Action for testing</a> (<code>working-directory</code> is being used, because I'm operating from the root of the monorepo, but the scoping happens on the plugin folder):</p>
<pre class="language-yaml"><code class="language-yaml"><span class="highlight-line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Scope GraphQL API for WP tests</span><br><span class="highlight-line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span><br><span class="highlight-line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span><br><span class="highlight-line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token punctuation">-</span> master</span><br><span class="highlight-line">  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span> <span class="token null important">null</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token key atrule">env</span><span class="token punctuation">:</span></span><br><span class="highlight-line">  <span class="token key atrule">COMPOSER_ROOT_VERSION</span><span class="token punctuation">:</span> <span class="token string">"dev-master"</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span><br><span class="highlight-line">  <span class="token key atrule">main</span><span class="token punctuation">:</span></span><br><span class="highlight-line">    <span class="token key atrule">defaults</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token key atrule">run</span><span class="token punctuation">:</span></span><br><span class="highlight-line">        <span class="token key atrule">working-directory</span><span class="token punctuation">:</span> layers/GraphQLAPIForWP/plugins/graphql<span class="token punctuation">-</span>api<span class="token punctuation">-</span>for<span class="token punctuation">-</span>wp</span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> Scope the plugin code via PHP<span class="token punctuation">-</span>Scoper<span class="token punctuation">,</span> and execute tests</span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span><br><span class="highlight-line">    </span><br><span class="highlight-line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout code</span><br><span class="highlight-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set<span class="token punctuation">-</span>up PHP</span><br><span class="highlight-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> shivammathur/setup<span class="token punctuation">-</span>php@v2</span><br><span class="highlight-line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span><br><span class="highlight-line">          <span class="token key atrule">php-version</span><span class="token punctuation">:</span> <span class="token number">7.4</span></span><br><span class="highlight-line">          <span class="token key atrule">coverage</span><span class="token punctuation">:</span> none</span><br><span class="highlight-line">        <span class="token key atrule">env</span><span class="token punctuation">:</span></span><br><span class="highlight-line">          <span class="token key atrule">COMPOSER_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install root dependencies</span><br><span class="highlight-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> <span class="token string">"ramsey/composer-install@v1"</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install plugin dependencies for PROD</span><br><span class="highlight-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> composer install <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>dev <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>progress <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>interaction <span class="token punctuation">-</span><span class="token punctuation">-</span>ansi</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install PHP<span class="token punctuation">-</span>Scoper</span><br>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"><br><span class="highlight-line">          composer global config minimum-stability dev</span><br><span class="highlight-line">          composer global config prefer-stable true</span><br>          composer global require humbug/php-scoper</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment"># The scoped results correspond to vendor/, so must generate them in such folder</span></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Scope plugin into separate folder</span><br><span class="highlight-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> php<span class="token punctuation">-</span>scoper add<span class="token punctuation">-</span>prefix <span class="token punctuation">-</span><span class="token punctuation">-</span>output<span class="token punctuation">-</span>dir ../../../../build<span class="token punctuation">-</span>prefixed/vendor <span class="token punctuation">-</span><span class="token punctuation">-</span>ansi</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Copy scoped code back into plugin</span><br><span class="highlight-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> rsync <span class="token punctuation">-</span>av build<span class="token punctuation">-</span>prefixed/ layers/GraphQLAPIForWP/plugins/graphql<span class="token punctuation">-</span>api<span class="token punctuation">-</span>for<span class="token punctuation">-</span>wp/ <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet</span><br><span class="highlight-line">        <span class="token key atrule">working-directory</span><span class="token punctuation">:</span> .</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Regenerate autoloader</span><br><span class="highlight-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> composer dumpautoload <span class="token punctuation">-</span><span class="token punctuation">-</span>optimize <span class="token punctuation">-</span><span class="token punctuation">-</span>classmap<span class="token punctuation">-</span>authoritative <span class="token punctuation">-</span><span class="token punctuation">-</span>ansi</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Run Rector on the scoped code</span><br><span class="highlight-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> vendor/bin/rector process <span class="token punctuation">-</span><span class="token punctuation">-</span>config=layers/GraphQLAPIForWP/plugins/graphql<span class="token punctuation">-</span>api<span class="token punctuation">-</span>for<span class="token punctuation">-</span>wp/rector<span class="token punctuation">-</span>test<span class="token punctuation">-</span>scoping.php <span class="token punctuation">-</span><span class="token punctuation">-</span>ansi</span><br><span class="highlight-line">        <span class="token key atrule">working-directory</span><span class="token punctuation">:</span> .</span><br><span class="highlight-line"></span></code></pre>
<p>And <a href="https://github.com/GatoGraphQL/GatoGraphQL/blob/96ff3535f288548c2c02892136431ce886015ac9/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/rector-test-scoping.php#L1-L58">this is my Rector configuration</a>:</p>
<pre class="language-php"><code class="language-php"><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Rector<span class="token punctuation">\</span>CodeQuality<span class="token punctuation">\</span>Rector<span class="token punctuation">\</span>LogicalAnd<span class="token punctuation">\</span>AndAssignsToSeparateLinesRector</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Rector<span class="token punctuation">\</span>Core<span class="token punctuation">\</span>Configuration<span class="token punctuation">\</span>Option</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>DependencyInjection<span class="token punctuation">\</span>Loader<span class="token punctuation">\</span>Configurator<span class="token punctuation">\</span>ContainerConfigurator</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">return</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ContainerConfigurator</span> <span class="token variable">$containerConfigurator</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token variable">$services</span> <span class="token operator">=</span> <span class="token variable">$containerConfigurator</span><span class="token operator">-></span><span class="token function">services</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$services</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">AndAssignsToSeparateLinesRector</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token variable">$parameters</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">AUTO_IMPORT_NAMES</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token variable">$parameters</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">AUTOLOAD_PATHS</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/scoper-autoload.php'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/erusev/parsedown/Parsedown.php'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/jrfnl/php-cast-to-type/cast-to-type.php'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/jrfnl/php-cast-to-type/class.cast-to-type.php'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment">// files to rector</span></span><br><span class="highlight-line">  <span class="token variable">$parameters</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">PATHS</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment">// files to skip</span></span><br><span class="highlight-line">  <span class="token variable">$parameters</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">Option</span><span class="token operator">::</span><span class="token constant">SKIP</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token comment">// Exclude tests</span></span><br><span class="highlight-line">    <span class="token string single-quoted-string">'*/tests/*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/nikic/fast-route/test/*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/psr/log/Psr/Log/Test/*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/symfony/service-contracts/Test/*'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre>
<p>You can notice that some dependency files, such as <code>erusev/parsedown/Parsedown.php'</code> need to be added to <code>Option::AUTOLOAD_PATHS</code>. That's because scoping the package's <code>composer.json</code> is not 100% reliable, and then their autoloading may fail.</p>
<p>Whenever that happens, Rector will complain that some class failed autoloading. From there, we identify the corresponding file, and manually add it to the autoloading paths.</p>
<h2>Check out the results</h2>
<p><a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp">This is the plugin's source code</a>, and <a href="https://github.com/GraphQLAPI/graphql-api-for-wp-dist">this is its scoped (and downgraded to PHP 7.1) version</a>.</p>
<p>Find the 7 differences 😁. (I give you a hint: search for <code>PrefixedByPoP</code>.)</p>
<p>And <a href="https://github.com/GatoGraphQL/GatoGraphQL/releases/download/0.7.9/graphql-api.zip">this is the final <code>graphql-api.zip</code> plugin file</a>, ready to be installed on your site.</p>
<p>That's all. I hope this has been useful 😃💪🚀</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>
      🎉 Released GraphQL API v0.7, with support for mutations, and nested mutations!
      
    </title>
    <link href="https://gatographql.com/blog/released-graphql-api-v07-with-mutations-and-nested-mutations/"/>
    <updated>2020-12-01T00:00:00+00:00</updated>
    <id>https://gatographql.com/blog/released-graphql-api-v07-with-mutations-and-nested-mutations/</id>
    <content type="html"><![CDATA[
      <p>Version 0.7 of the <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp">GraphQL API for WordPress</a>, supporting mutations, and nested mutations, has been released! 🎉</p>
<p><img src="/images/finally-got-mutations.jpg" alt="Mutations are awesome!"></p>
<p>Here is a tour showing the new additions.</p>
<h2>1. Mutations! 🚀</h2>
<p><a href="https://graphql.org/learn/queries/#mutations">GraphQL mutations</a> enable to modify data (i.e. perform side-effect) through the query.</p>
<p>Mutations was the big item still missing from the GraphQL API. Now that it's been added, I can claim that this GraphQL server is pretty much feature-complete (only subscriptions are missing, and I'm already <a href="https://github.com/GraphQLAPI/graphql-api-for-wp/issues/61">thinking on how to add them</a>).</p>
<p><img src="/images/graphql-schema-mutation-root.jpg" alt="Mutation root in the interactive schema" title="Mutation root in the interactive schema"></p>
<p>Let's check an example on adding a comment. But first, we need to execute another mutation to log you in, so you can add comments. Press the &quot;Run&quot; button on the GraphiQL client below, to execute mutation field <code>loginUser</code> with a pre-created testing user:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> LogUserIn <span class="token punctuation">{</span></span><br><span class="highlight-line">  loginUser<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">credentials</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">usernameOrEmail</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token attr-name">password</span><span class="token punctuation">:</span> <span class="token string">"pass"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    name</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Now, let's add some comments. Press the Run button below, to add a comment to some post by executing mutation field <code>addCommentToCustomPost</code> (you can also edit the comment text):</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddComment <span class="token punctuation">{</span></span><br><span class="highlight-line">  addCommentToCustomPost<span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">customPostID</span><span class="token punctuation">:</span> <span class="token number">1459</span><span class="token punctuation">,</span> <span class="token attr-name">comment</span><span class="token punctuation">:</span> <span class="token string">"Adding a comment: bla bla bla"</span> <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    content</span><br><span class="highlight-line">    date</span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<hr>
<p>In this first release, the plugin ships with the following mutations:</p>
<p>✅ <code>createPost</code><br/>
✅ <code>updatePost</code><br/>
✅ <code>setFeaturedImageforCustomPost</code><br/>
✅ <code>removeFeaturedImageforCustomPost</code><br/>
✅ <code>addCommentToCustomPost</code><br/>
✅ <code>replyComment</code><br/>
✅ <code>loginUser</code><br/>
✅ <code>logoutUser</code></p>
<h2>2. Nested Mutations! 🚀🚀</h2>
<p>Nested mutations is the ability to perform mutations on a type other than the root type in GraphQL.</p>
<p>They have been <a href="https://github.com/graphql/graphql-spec/issues/252">requested for the GraphQL spec</a> but not yet approved (and may never will), hence GraphQL API adds support for them as an opt-in feature, via the <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/docs/en/modules/nested-mutations.md">Nested Mutations</a> module.</p>
<p>Then, the plugin supports the 2 behaviors:</p>
<ol>
<li>The standard GraphQL behavior (i.e. adding mutation fields to the root type), by default</li>
<li>Nested mutations, as an opt-in</li>
</ol>
<p>For instance, the query from above can also be executed with the following query, in which we first retrieve the post via <code>Root.post</code>, and only then add a comment to it via <code>Post.addComment</code>:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddComment <span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1459</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    addComment<span class="token punctuation">(</span></span><br><span class="highlight-line">      <span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token attr-name">comment</span><span class="token punctuation">:</span> <span class="token string">"Notice how field `addCommentToCustomPost` under the `Root` type is renamed as `addComment` under the `Post` type? The schema got neater!"</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      content</span><br><span class="highlight-line">      date</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Mutations can also modify data on the result from another mutation. In the query below, we first obtain the post through <code>Root.post</code>, then execute mutation <code>Post.addComment</code> on it and obtain the created comment object, and finally execute mutation <code>Comment.reply</code> on it:</p>
<pre class="language-graphql"><code class="language-graphql"><span class="highlight-line"><span class="token keyword">mutation</span> AddCommentAndResponse <span class="token punctuation">{</span></span><br><span class="highlight-line">  post<span class="token punctuation">(</span><span class="token attr-name">by</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token number">1459</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    id</span><br><span class="highlight-line">    title</span><br><span class="highlight-line">    addComment<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">comment</span><span class="token punctuation">:</span> <span class="token string">"Isn't this awesome?"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      id</span><br><span class="highlight-line">      date</span><br><span class="highlight-line">      content</span><br><span class="highlight-line">      reply<span class="token punctuation">(</span><span class="token attr-name">input</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">comment</span><span class="token punctuation">:</span> <span class="token string">"I think so!"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        id</span><br><span class="highlight-line">        date</span><br><span class="highlight-line">        content</span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>This is certainly useful! 😍 (The alternative method to produce this same behavior, in a single query, is via the <code>@export</code> directive... I'll compare both of them in an upcoming blog post).</p>
<hr>
<p>In this first release, the plugin ships with the following mutations:</p>
<p>✅ <code>CustomPost.update</code><br/>
✅ <code>CustomPost.setFeaturedImage</code><br/>
✅ <code>CustomPost.removeFeaturedImage</code><br/>
✅ <code>CustomPost.addComment</code><br/>
✅ <code>Comment.reply</code></p>
<h3>Standard or nested? Or both?</h3>
<p>You may have a GraphQL API that is used by your own application, and is also publicly available for your clients. You may want to enable nested mutations but only for your own application, not for your clients because this is a non-standard feature.</p>
<p>Good news: you can.</p>
<p>I've added a &quot;Mutation Scheme&quot; section in the Schema Configuration, which is used to customize the schema for <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/docs/en/modules/custom-endpoints.md">Custom Endpoints</a> and <a href="https://github.com/GatoGraphQL/GatoGraphQL/tree/master/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp/docs/en/modules/persisted-queries.md">Persisted Queries</a>:</p>
<p><img src="/images/releases/v07/schema-configuration-mutation-scheme.jpg" alt="Mutation scheme in the Schema configuration"></p>
<p>Hence, you can disable the nested mutations everywhere, but enable them just for a specific custom endpoint that only your application will use. 💪</p>
<h3>Removing redundant fields from the root type</h3>
<p>With nested mutations, mutation fields may be added two times to the schema:</p>
<ul>
<li>once under the root type</li>
<li>once under the specific type</li>
</ul>
<p>For instance, these fields can be considered a &quot;duplicate&quot; of each other:</p>
<ul>
<li><code>Root.updatePost</code></li>
<li><code>Post.update</code></li>
</ul>
<p>The GraphQL API enables to keep both of them, or remove the ones from the root type, which are redundant.</p>
<p>Check-out the following 3 schemas:</p>
<ol>
<li><a href="https://newapi.getpop.org/graphql-interactive/">Standard behavior</a>:<br/>it uses types <code>QueryRoot</code> to handle queries and <code>MutationRoot</code> to handle queries</li>
<li><a href="https://newapi.getpop.org/graphql-interactive/?mutation_scheme=nested">Nested mutations keeping mutation fields duplicate</a>:<br/>a single <code>Root</code> type handles queries and mutations, and redundant mutation fields in this type are kept</li>
<li><a href="https://newapi.getpop.org/graphql-interactive/?mutation_scheme=lean_nested">Nested mutations removing redundant mutation fields from the root type</a>:<br/>same as above, but removing all redundant mutation fields from the <code>Root</code> type</li>
</ol>
<p>✱ Btw1, these 3 schemas all use the same endpoint, but changing a URL param <code>?mutation_scheme</code> to values <code>standard</code>, <code>nested</code> and <code>lean_nested</code>. That's possible because the GraphQL server follows the <a href="https://graphql-by-pop.com/docs/architecture/code-first.html">code-first approach</a>. 🤟</p>
<p>✱ Btw2, these options can be selected on the &quot;Mutation Scheme&quot; section in the Schema configuration (shown above), hence you can also decide what behavior to apply for individual custom endpoints and persisted queries. 👏</p>
<hr>
<p>Now it's time to start preparing for v0.8!</p>
<p><span style="font-size: 150px;">🙏</span></p>

    ]]></content>
  </entry>
	
</feed>
